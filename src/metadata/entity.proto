/// Type: Protocol model
/// Info: https://vocdoni.io/docs/#/architecture/components/entity?id=json-schema

syntax = "proto3";
package dvote;

// Helper to serialize and store all cached data
message EntityMetadataStore {
    repeated EntityMetadata items = 1;
}

// The metadata of an entity
// https://vocdoni.io/docs/#/architecture/components/entity?id=json-schema
message EntityMetadata {
    // OWN FIELDS
    string version = 1;

    repeated string languages = 2;
    map<string, string> name = 3;  // locale-aware value
    map<string, string> description = 4;  // locale-aware value

    message VotingProcesses {
        repeated string active = 1;
        repeated string ended = 2;
    }
    VotingProcesses votingProcesses = 5;

    map<string, string> newsFeed = 6;  // locale-aware value

    message Media {
        string avatar = 1;
        string header = 2;
    }
    Media media = 7;

    // See entity actions definition
    // https://vocdoni.io/docs/#/architecture/components/entity?id=entity-actions
    message Action {
        string type = 1;
        string actionKey = 7;
        map<string, string> name = 2;  // locale-aware value
        string visible = 3; // A URL or "true"

        // type = register / browser / submitMedia
        string url = 4;

        // type = submitMedia
        message ImageSource {
            string type = 1;
            string name = 2;
            string orientation = 3;
            string overlay = 4;
            map<string, string> caption = 5;  // locale-aware value
        }
        repeated ImageSource imageSources = 5;
    }
    repeated Action actions = 8;

    repeated EntityReference bootEntities = 9;
    repeated EntityReference fallbackBootNodeEntities = 10;
    repeated EntityReference trustedEntities = 11;
    repeated EntityReference censusServiceManagedEntities = 12;

    // EXTERNAL FIELDS
    // Allow to use arbitrary key/values so that
    // entities can be organized by custom values.
    map<string, string> meta = 100;
}


// Pointer to the place where the metadata of an Entity can be fetched
message EntityReference {
    string entityId = 1;
    repeated string entryPoints = 2; // Web3
}
