syntax = "proto3";

package dvote.types.v1;

import "common/vote.proto";

option go_package = "github.com/vocdoni/dvote-protobuf/build/go/models";

enum TxType {
	TX_UNKNOWN = 0;
	NEW_PROCESS = 1;
	CANCEL_PROCESS = 10000000;  // Legacy
	SET_PROCESS_STATUS = 2;
	SET_PROCESS_CENSUS = 3;
	SET_PROCESS_QUESTION_INDEX = 4;
	ADD_PROCESS_KEYS = 5;
	REVEAL_PROCESS_KEYS = 6;
	ADD_ORACLE = 7;
	REMOVE_ORACLE = 8;
	ADD_VALIDATOR = 9;
	REMOVE_VALIDATOR = 10;
	VOTE = 11;
	SET_PROCESS_RESULTS = 12;
}

message Tx {
	oneof payload {
		VoteEnvelope vote = 2;
		NewProcessTx newProcess = 3;
		CancelProcessTx cancelProcess = 10000000; // Legacy
		AdminTx admin = 4;
		SetProcessTx setProcess = 5;
	}
	optional bytes signature = 1;
}

message NewProcessTx {
	TxType txtype = 1;
	bytes nonce = 2;
	Process process = 3;
}

message SetProcessTx {
	TxType txtype = 1;
	bytes nonce = 2;
	bytes processId = 3;
	optional ProcessStatus status = 4;
	optional uint32 questionIndex = 5;
	optional bytes censusMkRoot = 6;
	optional string censusMkURI = 7;
	optional Proof proof = 8;
	optional ProcessResult results = 9;
}

message CancelProcessTx { // Legacy
	TxType txtype = 1;
	bytes processId = 2;
	bytes nonce = 3;
}

message AdminTx {
	TxType txtype = 1;
	bytes processId = 2;
	optional bytes address = 3;
	optional bytes commitmentKey = 4;
	optional bytes encryptionPrivateKey = 5;
	optional bytes encryptionPublicKey = 6;
	optional uint32 keyIndex = 7;
	optional uint64 power = 8;
	optional bytes publicKey = 9;
	optional bytes revealKey = 10;
	bytes nonce = 11;
}

message Process {
	bytes processId = 1;
	// EntityId identifies unequivocally a process
	bytes entityId = 2;
	// StartBlock represents the tendermint block where the process goes from scheduled to active
	uint32 startBlock = 3;
	// BlockCount represents the amount of tendermint blocks that the process will last
	uint32 blockCount = 4;
	// CensusMkRoot merkle root of all the census in the process
	bytes censusMkRoot = 5;
	// CensusMkURI merkle tree URI of all the census in the process
	optional string censusMkURI = 6;
	// CommitmentKeys are the reveal keys hashed
	repeated string commitmentKeys = 7;
	// EncryptionPrivateKeys are the keys required to decrypt the votes
	repeated string encryptionPrivateKeys = 8;
	// EncryptionPublicKeys are the keys required to encrypt the votes
	repeated string encryptionPublicKeys = 9;
	// RevealKeys are the seed of the CommitmentKeys
	repeated string revealKeys = 10;
	optional uint32 keyIndex = 11;
	ProcessStatus status = 12;
	optional bytes paramsSignature = 13;
	uint32 namespace = 14;
	EnvelopeType envelopeType = 15;
	ProcessMode mode = 16;
	optional uint32 questionIndex = 17;
	optional uint32 questionCount = 18;
	ProcessVoteOptions voteOptions = 19;
	CensusOrigin censusOrigin = 20;
	ProcessResult results = 21;
	repeated bytes resultsSignatures = 22;

	optional uint32 ethIndexSlot = 23;
	string ProcessType = 10000000; // Legacy
}

enum ProcessStatus {
	PROCESS_UNKNOWN = 0;
	READY = 1;
	ENDED = 2;
	CANCELED = 3;
	PAUSED = 4;
	RESULTS = 5;
}

enum CensusOrigin {
	CENSUS_UNKNOWN = 0;
	OFF_CHAIN = 1;
	ERC20 = 2;
	ERC721 = 3;
	ERC1155 = 4;
	ERC777 = 5;
	MINI_ME = 6;
}

message EnvelopeType {
	bool serial = 1;
	bool anonymous = 2;
	bool encryptedVotes = 3;
	bool uniqueValues = 4;
}

message ProcessMode {
	bool autoStart = 1;
	bool interruptible = 2;
	bool dynamicCensus = 3;
	bool encryptedMetaData = 4;
}

message ProcessVoteOptions {
	uint32 maxCount = 1;
	uint32 maxValue = 2;
	uint32 maxVoteOverwrites = 3;
	uint32 maxTotalCost = 4;
	uint32 costExponent = 5;
}

message OracleList {
	repeated bytes oracles = 1;
}

message ValidatorList {
	repeated Validator validators = 1;
}

message Validator {
	bytes address = 1;
	bytes pubKey = 2;
	uint64 power = 3;
	string name = 4;
}

message Vote {
	uint32 height = 1;
	bytes nullifier = 2;
	bytes processId = 3;
	bytes votePackage = 4;
	repeated uint32 encryptionKeyIndexes = 5;
}

message TendermintHeader {
  // basic block info
  string chain_id = 2 ;
  int64 height = 3;
  int64 timestamp = 4 ;

  // prev block info
  bytes blockID  = 5;

  // hashes of block data
  bytes last_commit_hash = 6;  // commit from validators from the last block
  bytes data_hash        = 7;  // transactions

  // hashes from the app output from the prev block
  bytes validators_hash      = 8;   // validators for the current block
  bytes next_validators_hash = 9;   // validators for the next block
  bytes consensus_hash       = 10;  // consensus params for current block
  bytes app_hash             = 11;  // state after txs from the previous block
  bytes last_results_hash    = 12;  // root hash of all results from the txs from the previous block

  // consensus info
  bytes evidence_hash    = 13;  // evidence included in the block
  bytes proposer_address = 14;  // original proposer of the block
}


// Scrutinizer
message ProcessResult {
	repeated QuestionResult votes = 1;
	optional bytes processId = 2;
	optional bytes entityId = 3;
}
message QuestionResult {
	repeated uint32 question = 1;
}
message ProcessEndingList {
	repeated bytes processList = 1;
}

// KeyKeeper
message StoredKeys {
	repeated bytes pids = 1;
}
