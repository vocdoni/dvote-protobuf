syntax = "proto3";

package dvote.types.v1;

option go_package = "go.vocdoni.io/proto/build/go/models";

message VoteEnvelope {
        bytes nonce = 1;  // Unique number per vote attempt, so that replay attacks can't reuse this payload
        bytes processId = 2;  // The process for which the vote is casted
        Proof proof = 3;  // One of ProofGraviton, ProofIden3, ProofEthereumStorage, ProofEthereumAccount, or ProofCA
        bytes votePackage = 4;   // JSON string of the Vote Package (potentially encrypted), encoded as bytes.

        // optional bytes nullifier = 5;
        bytes nullifier = 5;  // Hash of the private key + processId

        repeated uint32 encryptionKeyIndexes = 6; // On encrypted votes, contains the (sorted) indexes of the keys used to encrypt
}

message Census {
        enum Type {
        	UNKNOWN = 0;
        	GRAVITON = 1;
        	IDEN3 = 2;
        	ETHEREUMSTORAGE = 3;
        	ETHEREUMACCOUNT = 4;
        	CA = 5;
        	ARBO_POSEIDON = 6;
        	ARBO_BLAKE2B = 7;
        }
}

message Proof {
        oneof payload {
                // Proof used for signed envelopes
                ProofGraviton graviton = 1;
                // Proof used for anonymous votes
                ProofIden3 iden3 = 2;
                // Proof used on EVM census based processes
                ProofEthereumStorage ethereumStorage = 3;
                // Proof used by oracles to update the census of EVM processes
                ProofEthereumAccount ethereumAccount = 4;
                // Proof Certification Authority
                ProofCA ca = 5;
                // Proof used for census using arbo
                ProofArbo arbo = 6;
                // zkSnark proof
                ProofZkSNARK zkSnark = 7;
                // Proof used in Minime token based census
                ProofMinime minimeStorage = 8;
         }
}

message ProofGraviton {
        bytes siblings = 1;
		bytes value = 2;
}

message ProofIden3 {
        bytes siblings = 1;
}

message ProofEthereumStorage {
        bytes key = 1;
        bytes value = 2;
        repeated bytes siblings = 3;
}

message ProofEthereumAccount {
        bytes nonce = 1;
        bytes balance = 2;  // Big Int encoded as bytes
        bytes storageHash = 3;
        bytes codeHash = 4;
        repeated bytes siblings = 5;
}

message ProofMinime {
	ProofEthereumStorage proofPrevBlock = 1;
	ProofEthereumStorage proofNextBlock = 2;
}

message ProofCA {
        enum Type {
                UNKNOWN = 0;
                ECDSA = 1;
                ECDSA_PIDSALTED = 2;
                ECDSA_BLIND = 3;
                ECDSA_BLIND_PIDSALTED = 4;
        }

        Type type = 1;
        CAbundle bundle = 2;
        bytes signature = 3;
}

message CAbundle {
        bytes processId = 1;
        bytes address = 2;
}

message ProofArbo {
        enum Type {
                BLAKE2B = 0;
                POSEIDON = 1;
        }
        Type type = 1;
        bytes siblings = 2;
}

// Groth16 zkSNARK proof + public inputs
message ProofZkSNARK {
        // Type determines which to circuit corresponds the zkProof
        enum Type {
                UNKNOWN = 0;
        }
        Type type = 1;

        // a represents a G1 point
        repeated string a = 2;
        // b represents a G2 point, represented by an array of arrays: []string => [2][3]bigint)
        // [u, v, w, x, y, z] => [[u, v, w], [x, y, z]]
        repeated string b = 3;
        // c represents a G1 point
        repeated string c = 4;
        repeated string publicInputs = 5;
}

enum TxType {
	TX_UNKNOWN = 0;
	NEW_PROCESS = 1;
	SET_PROCESS_STATUS = 2;
	SET_PROCESS_CENSUS = 3;
	SET_PROCESS_QUESTION_INDEX = 4;
	ADD_PROCESS_KEYS = 5;
	REVEAL_PROCESS_KEYS = 6;
	ADD_ORACLE = 7;
	REMOVE_ORACLE = 8;
	ADD_VALIDATOR = 9;
	REMOVE_VALIDATOR = 10;
	VOTE = 11;
	SET_PROCESS_RESULTS = 12;
}

message Tx {
	oneof payload {
		VoteEnvelope vote = 1;
		NewProcessTx newProcess = 2;
		AdminTx admin = 3;
		SetProcessTx setProcess = 4;
	}
}

message SignedTx {
	bytes tx = 1; // The bytes produced by Marshaling a Tx{} message
	optional bytes signature = 2; // The signature for the tx bytes. 
	// signature is only required in those transactions that actually need signature.
        // I.e zk-Snarks based transactions won't needed, however the transaction should use
        // this message type in order to preserve consistency on the Vochain
}

message NewProcessTx {
	TxType txtype = 1;
	bytes nonce = 2;
	Process process = 3;
}

message SetProcessTx {
	TxType txtype = 1;
	bytes nonce = 2;
	bytes processId = 3;
	optional ProcessStatus status = 4;
	optional uint32 questionIndex = 5;
	optional bytes censusRoot = 6;
	optional string censusURI = 7;
	optional Proof proof = 8;
	optional ProcessResult results = 9;
}

message AdminTx {
	TxType txtype = 1;
	bytes processId = 2;
	optional bytes address = 3;
	optional bytes commitmentKey = 4;
	optional bytes encryptionPrivateKey = 5;
	optional bytes encryptionPublicKey = 6;
	optional uint32 keyIndex = 7;
	optional uint64 power = 8;
	optional bytes publicKey = 9;
	optional bytes revealKey = 10;
	bytes nonce = 11;
}

message Process {
	bytes processId = 1;
	// EntityId identifies unequivocally a process
	bytes entityId = 2;
	// StartBlock represents the tendermint block where the process goes from scheduled to active
	uint32 startBlock = 3;
	// BlockCount represents the amount of tendermint blocks that the process will last
	uint32 blockCount = 4;
	// CensusRoot merkle root of all the census in the process
	bytes censusRoot = 5;
	// CensusURI where to find the census
	optional string censusURI = 6;
	// CommitmentKeys are the reveal keys hashed
	repeated string commitmentKeys = 7;
	// EncryptionPrivateKeys are the keys required to decrypt the votes
	repeated string encryptionPrivateKeys = 8;
	// EncryptionPublicKeys are the keys required to encrypt the votes
	repeated string encryptionPublicKeys = 9;
	// RevealKeys are the seed of the CommitmentKeys
	repeated string revealKeys = 10;
	optional uint32 keyIndex = 11;
	ProcessStatus status = 12;
	optional bytes paramsSignature = 13;
	uint32 namespace = 14;
	EnvelopeType envelopeType = 15;
	ProcessMode mode = 16;
	optional uint32 questionIndex = 17;
	optional uint32 questionCount = 18;
	ProcessVoteOptions voteOptions = 19;
	CensusOrigin censusOrigin = 20;
	ProcessResult results = 21;
	repeated bytes resultsSignatures = 22;
	optional uint32 ethIndexSlot = 23;
	// SourceBlockHeight is the block height of the origin blockchain (if any)
	optional uint64 sourceBlockHeight = 24;
	// Owner is the creator of a process (if any) otherwise is assumed the creator is the entityId
	optional bytes owner = 25;
	// Metadata is the content hashed URI of the JSON meta data (See Data Origins)
	optional string metadata = 26;
	// SourceNetworkId is the identifier of the network origin (where the process have been created)
	SourceNetworkId sourceNetworkId = 27;
}

enum ProcessStatus {
	PROCESS_UNKNOWN = 0;
	READY = 1;
	ENDED = 2;
	CANCELED = 3;
	PAUSED = 4;
	RESULTS = 5;
}

enum SourceNetworkId {
	UNKNOWN = 0;
	ETH_MAINNET = 1;
	ETH_RINKEBY = 2;
	ETH_GOERLI = 3;
	POA_XDAI = 4;
	POA_SOKOL = 5;
	POLYGON = 6;
	BSC = 7;
	ETH_MAINNET_SIGNALING = 8;
	ETH_RINKEBY_SIGNALING = 9;
	AVAX_FUJI = 10;
	AVAX = 11;
}

enum CensusOrigin {
	CENSUS_UNKNOWN = 0;
	OFF_CHAIN_TREE = 1;
	OFF_CHAIN_TREE_WEIGHTED = 2;
	OFF_CHAIN_CA = 3;
	ERC20 = 11;
	ERC721 = 12;
	ERC1155 = 13;
	ERC777 = 14;
	MINI_ME = 15;
}

message EnvelopeType {
	bool serial = 1;
	bool anonymous = 2;
	bool encryptedVotes = 3;
	bool uniqueValues = 4;
	bool costFromWeight = 5;
}

message ProcessMode {
	bool autoStart = 1;
	bool interruptible = 2;
	bool dynamicCensus = 3;
	bool encryptedMetaData = 4;
}

message ProcessVoteOptions {
	uint32 maxCount = 1;
	uint32 maxValue = 2;
	uint32 maxVoteOverwrites = 3;
	uint32 maxTotalCost = 4;
	uint32 costExponent = 5;
}

message OracleList {
	repeated bytes oracles = 1;
}

message ValidatorList {
	repeated Validator validators = 1;
}

message Validator {
	bytes address = 1;
	bytes pubKey = 2;
	uint64 power = 3;
	string name = 4;
}

message Vote {
	uint32 height = 1;
	bytes nullifier = 2;
	bytes processId = 3;
	bytes votePackage = 4;
	repeated uint32 encryptionKeyIndexes = 5;
	bytes weight = 6;
}

message TendermintHeader {
  // basic block info
  string chain_id = 2 ;
  int64 height = 3;
  int64 timestamp = 4 ;

  // prev block info
  bytes blockID  = 5;

  // hashes of block data
  bytes last_commit_hash = 6;  // commit from validators from the last block
  bytes data_hash        = 7;  // transactions

  // hashes from the app output from the prev block
  bytes validators_hash      = 8;   // validators for the current block
  bytes next_validators_hash = 9;   // validators for the next block
  bytes consensus_hash       = 10;  // consensus params for current block
  bytes app_hash             = 11;  // state after txs from the previous block
  bytes last_results_hash    = 12;  // root hash of all results from the txs from the previous block

  // consensus info
  bytes evidence_hash    = 13;  // evidence included in the block
  bytes proposer_address = 14;  // original proposer of the block
}


// Scrutinizer
message ProcessResult {
	repeated QuestionResult votes = 1;
	optional bytes processId = 2;
	optional bytes entityId = 3;
}

message QuestionResult {
	repeated bytes question = 1;
}

message ProcessEndingList {
	repeated bytes processList = 1;
}

// KeyKeeper
message StoredKeys {
	repeated bytes pids = 1;
}
