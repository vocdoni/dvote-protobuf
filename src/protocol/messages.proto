// Type: Protocol layer definitions

syntax = "proto3";
package dvote.types.v2;

option go_package = "go.vocdoni.io/proto/build/go/models/v2";

import "protocol/enums.proto";
import "protocol/transactions.proto";
import "protocol/service.proto";

///////////////////////////////////////////////////////////////////////////////
// Message > Body
///////////////////////////////////////////////////////////////////////////////

// Remote calls between components are a message, optionally signed
message Message {
	// The bytes of the {Body} model being signed
	bytes body = 1;

	// Optionally signed. Not expected when:
	// - Submitting a vote
	// - Performing a read-only operation
	// 
	optional bytes signature = 2;

	SignatureType signatureType = 3;
}

// The body contains the serialized bytes from a `Body`, which can host three types of interactions.
message Body {
	bytes id = 1;
    // UNIX timestamp
	int32 timestamp = 2;

	oneof body {
        // Vochain, VocOne, ...
		Transaction transaction = 11;
		TransactionReceipt receipt = 12;

		// To remote services
        Request request = 13;
		Response response = 14;
	}
}

///////////////////////////////////////////////////////////////////////////////
// Transactions
///////////////////////////////////////////////////////////////////////////////

// Vochain or VocOne transactions, all wrapped within a `Message > Body`.
message Transaction {
	oneof body {
		// ACCOUNTS
		SetOrganization setOrganization = 1;
		Transfer transfer = 2;
		Mint mint = 3;
		ClaimTokens claimTokens = 4;

		// ELECTIONS
		NewElection newElection = 11;
		RegisterElectionKey registerElectionKey = 12;
		SubmitBallot submitBallot = 13;
		SetElectionStatus setElectionStatus = 14;
		SetProposalStatus setProposalStatus = 15;
	}
}


// The response given to the transaction submitter:
message TransactionReceipt {
	oneof body {
		TransactionSuccess success = 1;
		TransactionError error = 2;
	}
}

message TransactionSuccess {
	bytes hash = 1;
}
message TransactionError {
	string message = 1;
	int32 code = 2;
}

///////////////////////////////////////////////////////////////////////////////
// RPC requests
///////////////////////////////////////////////////////////////////////////////

// Census Service, File gateways, and similar nodes expect `Request` models, and return `Response` models, all wrapped within a `Message > Body`.
message Request {
	oneof body {
		// ELECTION
		GetElection getElection = 1;
		GetElectionList getElectionList = 2;
		GetOrganization getOrganization = 3;
		GetBallot getBallot = 4;
		GetElectionBallots getElectionBallots = 5;
		GetElectionKeys getElectionKeys = 6;
		GetElectionCircuitInfo getElectionCircuitInfo = 7;
		GetElectionResults getElectionResults = 8;
		GetElectionWeight getElectionWeight = 9;

		// CENSUS
		NewCensus newCensus = 31;
		AddCensusKeys addCensusKeys = 32;
		GetCensusRoot getCensusRoot = 33;
		GetCensusSize getCensusSize = 34;
		PublishCensus publishCensus = 35;
		GetCensusProof getCensusProof = 36;
		DumpCensus dumpCensus = 37;

		// FILE STORAGE
		PinFile pinFile = 51;
		FetchFile fetchFile = 52;

		// NETWORK
		GetBlockStatus getBlockStatus = 61;
		GetBlockCount getBlockCount = 62;
		EstimateElectionPrice estimateElectionPrice = 63;

		// TRANSACTIONS
		GetTransaction getTransaction = 81;
		WaitTransaction waitTransaction = 82;
	}
}

// Responses can either be successful or fail. The `Response` body depends on the type of request made originally, and the caller is responsible for deserializing the bytes into the according model, if any.
message Response {
	oneof body {
		ResponseSuccess success = 1;
		ResponseError error = 2;
	}
}

message ResponseSuccess {
	// Serialized response, related to the request model
	bytes body = 1;
}
message ResponseError {
	string message = 1;

	// Serialized response, related to the request model
	bytes body = 2;
}
