// Type: Protocol layer definitions

syntax = "proto3";
package dvote.types.v2;

option go_package = "go.vocdoni.io/proto/build/go/models/v2";

import "protocol/enums.proto";
import "protocol/election.proto";
import "protocol/organization.proto";
import "protocol/census.proto";
import "protocol/ballot.proto";
import "protocol/results.proto";

///////////////////////////////////////////////////////////////////////////////
// Election Requests
///////////////////////////////////////////////////////////////////////////////

// Request
message GetElection {
	bytes electionId = 1;
}
// Response
message GetElectionResponse {
	bytes organizationId = 1;
	// The originally defined params
    Election parameters = 2;
	// The status of each individual proposal
    repeated ProposalStatus statuses = 3;
    // How many ballots each proposal has
	repeated int32 ballotCounts = 4;
}

// Request
message GetElectionList {
	int32 fromIndex = 1;  // Used for pagination
	optional bytes organizationId = 2;
	optional bytes tokenAddress = 3;
	optional ProposalStatus status = 4;  // Some of its proposals in Ready, paused, ended, results
}
// Response
message GetElectionListResponse {
	repeated bytes electionIds = 1;
}

// Request
message GetOrganization {
	bytes organizationId = 1;
}
// Response
message GetOrganizationResponse {
    Organization organization = 1;
}

// Request
message GetBallot {
	bytes nullifier = 1;
}
// Response
message GetBallotResponse {
    Ballot ballot = 1;
}

// Request
message GetElectionBallots {
	bytes electionId = 1;
    // Used to iterate the different envelopes by chunks
    int32 fromIndex = 2;
}
// Response
message GetElectionBallotsResponse {
    repeated Ballot ballot = 1;
}

// Request
message GetElectionKeys {
	bytes electionId = 1;
}
// Response
message GetElectionKeysResponse {
    message KeyEntry {
        int32 index = 1;
        bytes key = 2;
    }

    repeated KeyEntry encryptionPublicKeys = 1;
    repeated KeyEntry encryptionPrivateKeys = 2;
}

// Request
message GetElectionCircuitInfo {
	bytes electionId = 1;
}
// Response
message GetElectionCircuitInfoResponse {
    // Circuit index
    int32 index = 1;
    // The prefix of the URI to fetch the artifacts from
    string baseUri = 2;
    // Relative path where the circuit is hosted
    string circuitPath = 3;
    // Maximum census size supported by the circuit
    int32 maxSize = 4;

    bytes witnessHash = 5;
    bytes zKeyHash = 6;
    bytes vKeyHash = 7;
}

// Request
message GetElectionResults {
	bytes electionId = 1;
}
// Response
message GetElectionResultsResponse {
    Results results = 1;
}

// Request
message GetElectionResultsWeight {
	bytes electionId = 1;
}
// Response
message GetElectionResultsWeightResponse {
    // The total amount of vote weight that has been used on each proposal
    repeated string weights = 1; // bigint as a string
}

///////////////////////////////////////////////////////////////////////////////
// Census Requests
///////////////////////////////////////////////////////////////////////////////

// Request
message NewCensus {
    bytes censusSalt = 1;
    repeated bytes managerPublicKeys = 2;
    CensusType censusType = 3;
}
// Response
message NewCensusResponse {
    string censusId = 1;
    bytes censusRoot = 2;
}

// Request
message AddCensusKeys {
    string censusId = 1;
    bool digested = 2;

    message CensusEntry {
        bytes key = 1;
        bytes value = 2;
    }
    repeated CensusEntry entries = 3;
}
// Response
message AddCensusKeysResponse {
    bytes censusRoot = 1;
    int32 keysAdded = 2;
    int32 keysSkipped = 3;
}

// Request
message GetCensusRoot {
    string censusId = 1;
}
// Response
message GetCensusRootResponse {
    bytes censusRoot = 1;
}

// Request
message GetCensusSize {
    string censusId = 1;
}
// Response
message GetCensusSizeResponse {
    int32 size = 1;
}

// Request
message PublishCensus {
    string censusId = 1;
}
// Response
message PublishCensusResponse {
    string ipfsUri = 1;
}

// Request
message GetCensusProof {
    // Defines the kind of census proof to receive back
    // Mostly:  CensusArbo, StorageProofErc20
    Census census = 1;

    bytes key = 2;
    // bytes value = 3;
}
// Response
message GetCensusProofResponse {
    Proof proof = 1;
}

// Request
message DumpCensus {
    string censusId = 1;
}
// Response
message DumpCensusResponse {
    bytes body = 1;
}


///////////////////////////////////////////////////////////////////////////////
// File Requests
///////////////////////////////////////////////////////////////////////////////

// Request
message PinFile {
    bytes body = 1;
    int32 retentionDays = 2;
}
// Response
message PinFileResponse {
    // The URI at which the file can be addressed
    string ipfsUri = 1; 
}

// Request
message FetchFile {
    // The URI at which the file can be addressed
    string ipfsUri = 1; 
}
// Response
message FetchFileResponse {
    bytes body = 1;
}


///////////////////////////////////////////////////////////////////////////////
// Network Requests
///////////////////////////////////////////////////////////////////////////////

// Request
message GetBlockStatus {}
// Response
message GetBlockStatusResponse {
    // The current block height
    int32 number = 1; 
    // The UNIX timestamp at which the block was mined
    int32 blockTimestamp = 2;
    // The average block times (in milliseconds) during the last minute, 10m, 1h, 6h and 24h
    repeated int32 blockTimes = 3;
}

// Request
message GetBlockCount {}
// Response
message GetBlockCountResponse {
    // The number of the last mined block
    int32 number = 1; 
}

// Request
message EstimateElectionPrice {
    // TODO: 
}
// Response
message EstimateElectionPriceResponse {}


///////////////////////////////////////////////////////////////////////////////
// Transaction Requests
///////////////////////////////////////////////////////////////////////////////

// Request
message GetTransaction {
    bytes txHash = 1;
}
// Response
message GetTransactionResponse {
    // The bytes of the {Transaction} model
    bytes body = 1;
}

// Request: Get the bytes of the {Mesage} model, originally containing the signed {Transaction}
message GetRawTransactionMessage {
    bytes txHash = 1;
}
// Response
message GetRawTransactionMessageResponse {
    // The bytes of the {Mesage} model originally containing the transaction
    bytes body = 1;
}

// Request
message WaitTransaction {
    bytes txHash = 1;
}
// Response
message WaitTransactionResponse {
    // Returns after waiting for 15 seconds, or as soon as the transaction is mined
    bool mined = 1;
}
