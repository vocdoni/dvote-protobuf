// source: common/vote.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.dvote.types.v1.Proof', null, global);
goog.exportSymbol('proto.dvote.types.v1.Proof.PayloadCase', null, global);
goog.exportSymbol('proto.dvote.types.v1.ProofEthereumAccount', null, global);
goog.exportSymbol('proto.dvote.types.v1.ProofEthereumStorage', null, global);
goog.exportSymbol('proto.dvote.types.v1.ProofGraviton', null, global);
goog.exportSymbol('proto.dvote.types.v1.ProofIden3', null, global);
goog.exportSymbol('proto.dvote.types.v1.VoteEnvelope', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dvote.types.v1.VoteEnvelope = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.dvote.types.v1.VoteEnvelope.repeatedFields_, null);
};
goog.inherits(proto.dvote.types.v1.VoteEnvelope, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dvote.types.v1.VoteEnvelope.displayName = 'proto.dvote.types.v1.VoteEnvelope';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dvote.types.v1.Proof = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.dvote.types.v1.Proof.oneofGroups_);
};
goog.inherits(proto.dvote.types.v1.Proof, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dvote.types.v1.Proof.displayName = 'proto.dvote.types.v1.Proof';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dvote.types.v1.ProofGraviton = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dvote.types.v1.ProofGraviton, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dvote.types.v1.ProofGraviton.displayName = 'proto.dvote.types.v1.ProofGraviton';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dvote.types.v1.ProofIden3 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dvote.types.v1.ProofIden3, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dvote.types.v1.ProofIden3.displayName = 'proto.dvote.types.v1.ProofIden3';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dvote.types.v1.ProofEthereumStorage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.dvote.types.v1.ProofEthereumStorage.repeatedFields_, null);
};
goog.inherits(proto.dvote.types.v1.ProofEthereumStorage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dvote.types.v1.ProofEthereumStorage.displayName = 'proto.dvote.types.v1.ProofEthereumStorage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dvote.types.v1.ProofEthereumAccount = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.dvote.types.v1.ProofEthereumAccount.repeatedFields_, null);
};
goog.inherits(proto.dvote.types.v1.ProofEthereumAccount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dvote.types.v1.ProofEthereumAccount.displayName = 'proto.dvote.types.v1.ProofEthereumAccount';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.dvote.types.v1.VoteEnvelope.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dvote.types.v1.VoteEnvelope.prototype.toObject = function(opt_includeInstance) {
  return proto.dvote.types.v1.VoteEnvelope.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dvote.types.v1.VoteEnvelope} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dvote.types.v1.VoteEnvelope.toObject = function(includeInstance, msg) {
  var f, obj = {
    nonce: msg.getNonce_asB64(),
    processid: msg.getProcessid_asB64(),
    proof: (f = msg.getProof()) && proto.dvote.types.v1.Proof.toObject(includeInstance, f),
    votepackage: msg.getVotepackage_asB64(),
    nullifier: msg.getNullifier_asB64(),
    encryptionkeyindexesList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dvote.types.v1.VoteEnvelope}
 */
proto.dvote.types.v1.VoteEnvelope.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dvote.types.v1.VoteEnvelope;
  return proto.dvote.types.v1.VoteEnvelope.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dvote.types.v1.VoteEnvelope} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dvote.types.v1.VoteEnvelope}
 */
proto.dvote.types.v1.VoteEnvelope.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNonce(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProcessid(value);
      break;
    case 3:
      var value = new proto.dvote.types.v1.Proof;
      reader.readMessage(value,proto.dvote.types.v1.Proof.deserializeBinaryFromReader);
      msg.setProof(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setVotepackage(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNullifier(value);
      break;
    case 6:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addEncryptionkeyindexes(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.VoteEnvelope.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dvote.types.v1.VoteEnvelope.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dvote.types.v1.VoteEnvelope} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dvote.types.v1.VoteEnvelope.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNonce_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getProcessid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getProof();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.dvote.types.v1.Proof.serializeBinaryToWriter
    );
  }
  f = message.getVotepackage_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getNullifier_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getEncryptionkeyindexesList();
  if (f.length > 0) {
    writer.writePackedUint32(
      6,
      f
    );
  }
};


/**
 * optional bytes nonce = 1;
 * @return {!(string|Uint8Array)}
 */
proto.dvote.types.v1.VoteEnvelope.prototype.getNonce = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes nonce = 1;
 * This is a type-conversion wrapper around `getNonce()`
 * @return {string}
 */
proto.dvote.types.v1.VoteEnvelope.prototype.getNonce_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNonce()));
};


/**
 * optional bytes nonce = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNonce()`
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.VoteEnvelope.prototype.getNonce_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNonce()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.dvote.types.v1.VoteEnvelope} returns this
 */
proto.dvote.types.v1.VoteEnvelope.prototype.setNonce = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes processId = 2;
 * @return {!(string|Uint8Array)}
 */
proto.dvote.types.v1.VoteEnvelope.prototype.getProcessid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes processId = 2;
 * This is a type-conversion wrapper around `getProcessid()`
 * @return {string}
 */
proto.dvote.types.v1.VoteEnvelope.prototype.getProcessid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProcessid()));
};


/**
 * optional bytes processId = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProcessid()`
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.VoteEnvelope.prototype.getProcessid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProcessid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.dvote.types.v1.VoteEnvelope} returns this
 */
proto.dvote.types.v1.VoteEnvelope.prototype.setProcessid = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional Proof proof = 3;
 * @return {?proto.dvote.types.v1.Proof}
 */
proto.dvote.types.v1.VoteEnvelope.prototype.getProof = function() {
  return /** @type{?proto.dvote.types.v1.Proof} */ (
    jspb.Message.getWrapperField(this, proto.dvote.types.v1.Proof, 3));
};


/**
 * @param {?proto.dvote.types.v1.Proof|undefined} value
 * @return {!proto.dvote.types.v1.VoteEnvelope} returns this
*/
proto.dvote.types.v1.VoteEnvelope.prototype.setProof = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dvote.types.v1.VoteEnvelope} returns this
 */
proto.dvote.types.v1.VoteEnvelope.prototype.clearProof = function() {
  return this.setProof(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dvote.types.v1.VoteEnvelope.prototype.hasProof = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bytes votePackage = 4;
 * @return {!(string|Uint8Array)}
 */
proto.dvote.types.v1.VoteEnvelope.prototype.getVotepackage = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes votePackage = 4;
 * This is a type-conversion wrapper around `getVotepackage()`
 * @return {string}
 */
proto.dvote.types.v1.VoteEnvelope.prototype.getVotepackage_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getVotepackage()));
};


/**
 * optional bytes votePackage = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getVotepackage()`
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.VoteEnvelope.prototype.getVotepackage_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getVotepackage()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.dvote.types.v1.VoteEnvelope} returns this
 */
proto.dvote.types.v1.VoteEnvelope.prototype.setVotepackage = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional bytes nullifier = 5;
 * @return {!(string|Uint8Array)}
 */
proto.dvote.types.v1.VoteEnvelope.prototype.getNullifier = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes nullifier = 5;
 * This is a type-conversion wrapper around `getNullifier()`
 * @return {string}
 */
proto.dvote.types.v1.VoteEnvelope.prototype.getNullifier_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNullifier()));
};


/**
 * optional bytes nullifier = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNullifier()`
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.VoteEnvelope.prototype.getNullifier_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNullifier()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.dvote.types.v1.VoteEnvelope} returns this
 */
proto.dvote.types.v1.VoteEnvelope.prototype.setNullifier = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * repeated uint32 encryptionKeyIndexes = 6;
 * @return {!Array<number>}
 */
proto.dvote.types.v1.VoteEnvelope.prototype.getEncryptionkeyindexesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.dvote.types.v1.VoteEnvelope} returns this
 */
proto.dvote.types.v1.VoteEnvelope.prototype.setEncryptionkeyindexesList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.dvote.types.v1.VoteEnvelope} returns this
 */
proto.dvote.types.v1.VoteEnvelope.prototype.addEncryptionkeyindexes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.dvote.types.v1.VoteEnvelope} returns this
 */
proto.dvote.types.v1.VoteEnvelope.prototype.clearEncryptionkeyindexesList = function() {
  return this.setEncryptionkeyindexesList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.dvote.types.v1.Proof.oneofGroups_ = [[1,2,3,4]];

/**
 * @enum {number}
 */
proto.dvote.types.v1.Proof.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  GRAVITON: 1,
  IDEN3: 2,
  ETHEREUMSTORAGE: 3,
  ETHEREUMACCOUNT: 4
};

/**
 * @return {proto.dvote.types.v1.Proof.PayloadCase}
 */
proto.dvote.types.v1.Proof.prototype.getPayloadCase = function() {
  return /** @type {proto.dvote.types.v1.Proof.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.dvote.types.v1.Proof.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dvote.types.v1.Proof.prototype.toObject = function(opt_includeInstance) {
  return proto.dvote.types.v1.Proof.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dvote.types.v1.Proof} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dvote.types.v1.Proof.toObject = function(includeInstance, msg) {
  var f, obj = {
    graviton: (f = msg.getGraviton()) && proto.dvote.types.v1.ProofGraviton.toObject(includeInstance, f),
    iden3: (f = msg.getIden3()) && proto.dvote.types.v1.ProofIden3.toObject(includeInstance, f),
    ethereumstorage: (f = msg.getEthereumstorage()) && proto.dvote.types.v1.ProofEthereumStorage.toObject(includeInstance, f),
    ethereumaccount: (f = msg.getEthereumaccount()) && proto.dvote.types.v1.ProofEthereumAccount.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dvote.types.v1.Proof}
 */
proto.dvote.types.v1.Proof.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dvote.types.v1.Proof;
  return proto.dvote.types.v1.Proof.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dvote.types.v1.Proof} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dvote.types.v1.Proof}
 */
proto.dvote.types.v1.Proof.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.dvote.types.v1.ProofGraviton;
      reader.readMessage(value,proto.dvote.types.v1.ProofGraviton.deserializeBinaryFromReader);
      msg.setGraviton(value);
      break;
    case 2:
      var value = new proto.dvote.types.v1.ProofIden3;
      reader.readMessage(value,proto.dvote.types.v1.ProofIden3.deserializeBinaryFromReader);
      msg.setIden3(value);
      break;
    case 3:
      var value = new proto.dvote.types.v1.ProofEthereumStorage;
      reader.readMessage(value,proto.dvote.types.v1.ProofEthereumStorage.deserializeBinaryFromReader);
      msg.setEthereumstorage(value);
      break;
    case 4:
      var value = new proto.dvote.types.v1.ProofEthereumAccount;
      reader.readMessage(value,proto.dvote.types.v1.ProofEthereumAccount.deserializeBinaryFromReader);
      msg.setEthereumaccount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.Proof.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dvote.types.v1.Proof.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dvote.types.v1.Proof} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dvote.types.v1.Proof.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGraviton();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.dvote.types.v1.ProofGraviton.serializeBinaryToWriter
    );
  }
  f = message.getIden3();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.dvote.types.v1.ProofIden3.serializeBinaryToWriter
    );
  }
  f = message.getEthereumstorage();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.dvote.types.v1.ProofEthereumStorage.serializeBinaryToWriter
    );
  }
  f = message.getEthereumaccount();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.dvote.types.v1.ProofEthereumAccount.serializeBinaryToWriter
    );
  }
};


/**
 * optional ProofGraviton graviton = 1;
 * @return {?proto.dvote.types.v1.ProofGraviton}
 */
proto.dvote.types.v1.Proof.prototype.getGraviton = function() {
  return /** @type{?proto.dvote.types.v1.ProofGraviton} */ (
    jspb.Message.getWrapperField(this, proto.dvote.types.v1.ProofGraviton, 1));
};


/**
 * @param {?proto.dvote.types.v1.ProofGraviton|undefined} value
 * @return {!proto.dvote.types.v1.Proof} returns this
*/
proto.dvote.types.v1.Proof.prototype.setGraviton = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.dvote.types.v1.Proof.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dvote.types.v1.Proof} returns this
 */
proto.dvote.types.v1.Proof.prototype.clearGraviton = function() {
  return this.setGraviton(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dvote.types.v1.Proof.prototype.hasGraviton = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ProofIden3 iden3 = 2;
 * @return {?proto.dvote.types.v1.ProofIden3}
 */
proto.dvote.types.v1.Proof.prototype.getIden3 = function() {
  return /** @type{?proto.dvote.types.v1.ProofIden3} */ (
    jspb.Message.getWrapperField(this, proto.dvote.types.v1.ProofIden3, 2));
};


/**
 * @param {?proto.dvote.types.v1.ProofIden3|undefined} value
 * @return {!proto.dvote.types.v1.Proof} returns this
*/
proto.dvote.types.v1.Proof.prototype.setIden3 = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.dvote.types.v1.Proof.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dvote.types.v1.Proof} returns this
 */
proto.dvote.types.v1.Proof.prototype.clearIden3 = function() {
  return this.setIden3(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dvote.types.v1.Proof.prototype.hasIden3 = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ProofEthereumStorage ethereumStorage = 3;
 * @return {?proto.dvote.types.v1.ProofEthereumStorage}
 */
proto.dvote.types.v1.Proof.prototype.getEthereumstorage = function() {
  return /** @type{?proto.dvote.types.v1.ProofEthereumStorage} */ (
    jspb.Message.getWrapperField(this, proto.dvote.types.v1.ProofEthereumStorage, 3));
};


/**
 * @param {?proto.dvote.types.v1.ProofEthereumStorage|undefined} value
 * @return {!proto.dvote.types.v1.Proof} returns this
*/
proto.dvote.types.v1.Proof.prototype.setEthereumstorage = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.dvote.types.v1.Proof.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dvote.types.v1.Proof} returns this
 */
proto.dvote.types.v1.Proof.prototype.clearEthereumstorage = function() {
  return this.setEthereumstorage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dvote.types.v1.Proof.prototype.hasEthereumstorage = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ProofEthereumAccount ethereumAccount = 4;
 * @return {?proto.dvote.types.v1.ProofEthereumAccount}
 */
proto.dvote.types.v1.Proof.prototype.getEthereumaccount = function() {
  return /** @type{?proto.dvote.types.v1.ProofEthereumAccount} */ (
    jspb.Message.getWrapperField(this, proto.dvote.types.v1.ProofEthereumAccount, 4));
};


/**
 * @param {?proto.dvote.types.v1.ProofEthereumAccount|undefined} value
 * @return {!proto.dvote.types.v1.Proof} returns this
*/
proto.dvote.types.v1.Proof.prototype.setEthereumaccount = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.dvote.types.v1.Proof.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dvote.types.v1.Proof} returns this
 */
proto.dvote.types.v1.Proof.prototype.clearEthereumaccount = function() {
  return this.setEthereumaccount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dvote.types.v1.Proof.prototype.hasEthereumaccount = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dvote.types.v1.ProofGraviton.prototype.toObject = function(opt_includeInstance) {
  return proto.dvote.types.v1.ProofGraviton.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dvote.types.v1.ProofGraviton} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dvote.types.v1.ProofGraviton.toObject = function(includeInstance, msg) {
  var f, obj = {
    siblings: msg.getSiblings_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dvote.types.v1.ProofGraviton}
 */
proto.dvote.types.v1.ProofGraviton.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dvote.types.v1.ProofGraviton;
  return proto.dvote.types.v1.ProofGraviton.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dvote.types.v1.ProofGraviton} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dvote.types.v1.ProofGraviton}
 */
proto.dvote.types.v1.ProofGraviton.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSiblings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.ProofGraviton.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dvote.types.v1.ProofGraviton.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dvote.types.v1.ProofGraviton} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dvote.types.v1.ProofGraviton.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSiblings_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes siblings = 1;
 * @return {!(string|Uint8Array)}
 */
proto.dvote.types.v1.ProofGraviton.prototype.getSiblings = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes siblings = 1;
 * This is a type-conversion wrapper around `getSiblings()`
 * @return {string}
 */
proto.dvote.types.v1.ProofGraviton.prototype.getSiblings_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSiblings()));
};


/**
 * optional bytes siblings = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSiblings()`
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.ProofGraviton.prototype.getSiblings_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSiblings()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.dvote.types.v1.ProofGraviton} returns this
 */
proto.dvote.types.v1.ProofGraviton.prototype.setSiblings = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dvote.types.v1.ProofIden3.prototype.toObject = function(opt_includeInstance) {
  return proto.dvote.types.v1.ProofIden3.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dvote.types.v1.ProofIden3} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dvote.types.v1.ProofIden3.toObject = function(includeInstance, msg) {
  var f, obj = {
    siblings: msg.getSiblings_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dvote.types.v1.ProofIden3}
 */
proto.dvote.types.v1.ProofIden3.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dvote.types.v1.ProofIden3;
  return proto.dvote.types.v1.ProofIden3.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dvote.types.v1.ProofIden3} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dvote.types.v1.ProofIden3}
 */
proto.dvote.types.v1.ProofIden3.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSiblings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.ProofIden3.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dvote.types.v1.ProofIden3.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dvote.types.v1.ProofIden3} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dvote.types.v1.ProofIden3.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSiblings_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes siblings = 1;
 * @return {!(string|Uint8Array)}
 */
proto.dvote.types.v1.ProofIden3.prototype.getSiblings = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes siblings = 1;
 * This is a type-conversion wrapper around `getSiblings()`
 * @return {string}
 */
proto.dvote.types.v1.ProofIden3.prototype.getSiblings_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSiblings()));
};


/**
 * optional bytes siblings = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSiblings()`
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.ProofIden3.prototype.getSiblings_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSiblings()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.dvote.types.v1.ProofIden3} returns this
 */
proto.dvote.types.v1.ProofIden3.prototype.setSiblings = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.dvote.types.v1.ProofEthereumStorage.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dvote.types.v1.ProofEthereumStorage.prototype.toObject = function(opt_includeInstance) {
  return proto.dvote.types.v1.ProofEthereumStorage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dvote.types.v1.ProofEthereumStorage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dvote.types.v1.ProofEthereumStorage.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: msg.getKey_asB64(),
    value: msg.getValue_asB64(),
    siblingsList: msg.getSiblingsList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dvote.types.v1.ProofEthereumStorage}
 */
proto.dvote.types.v1.ProofEthereumStorage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dvote.types.v1.ProofEthereumStorage;
  return proto.dvote.types.v1.ProofEthereumStorage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dvote.types.v1.ProofEthereumStorage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dvote.types.v1.ProofEthereumStorage}
 */
proto.dvote.types.v1.ProofEthereumStorage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValue(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addSiblings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.ProofEthereumStorage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dvote.types.v1.ProofEthereumStorage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dvote.types.v1.ProofEthereumStorage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dvote.types.v1.ProofEthereumStorage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getSiblingsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      3,
      f
    );
  }
};


/**
 * optional bytes key = 1;
 * @return {!(string|Uint8Array)}
 */
proto.dvote.types.v1.ProofEthereumStorage.prototype.getKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes key = 1;
 * This is a type-conversion wrapper around `getKey()`
 * @return {string}
 */
proto.dvote.types.v1.ProofEthereumStorage.prototype.getKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getKey()));
};


/**
 * optional bytes key = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKey()`
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.ProofEthereumStorage.prototype.getKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.dvote.types.v1.ProofEthereumStorage} returns this
 */
proto.dvote.types.v1.ProofEthereumStorage.prototype.setKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes value = 2;
 * @return {!(string|Uint8Array)}
 */
proto.dvote.types.v1.ProofEthereumStorage.prototype.getValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes value = 2;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.dvote.types.v1.ProofEthereumStorage.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValue()));
};


/**
 * optional bytes value = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.ProofEthereumStorage.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValue()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.dvote.types.v1.ProofEthereumStorage} returns this
 */
proto.dvote.types.v1.ProofEthereumStorage.prototype.setValue = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * repeated bytes siblings = 3;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.dvote.types.v1.ProofEthereumStorage.prototype.getSiblingsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * repeated bytes siblings = 3;
 * This is a type-conversion wrapper around `getSiblingsList()`
 * @return {!Array<string>}
 */
proto.dvote.types.v1.ProofEthereumStorage.prototype.getSiblingsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getSiblingsList()));
};


/**
 * repeated bytes siblings = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSiblingsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.dvote.types.v1.ProofEthereumStorage.prototype.getSiblingsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getSiblingsList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.dvote.types.v1.ProofEthereumStorage} returns this
 */
proto.dvote.types.v1.ProofEthereumStorage.prototype.setSiblingsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.dvote.types.v1.ProofEthereumStorage} returns this
 */
proto.dvote.types.v1.ProofEthereumStorage.prototype.addSiblings = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.dvote.types.v1.ProofEthereumStorage} returns this
 */
proto.dvote.types.v1.ProofEthereumStorage.prototype.clearSiblingsList = function() {
  return this.setSiblingsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.dvote.types.v1.ProofEthereumAccount.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dvote.types.v1.ProofEthereumAccount.prototype.toObject = function(opt_includeInstance) {
  return proto.dvote.types.v1.ProofEthereumAccount.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dvote.types.v1.ProofEthereumAccount} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dvote.types.v1.ProofEthereumAccount.toObject = function(includeInstance, msg) {
  var f, obj = {
    nonce: msg.getNonce_asB64(),
    balance: msg.getBalance_asB64(),
    storagehash: msg.getStoragehash_asB64(),
    codehash: msg.getCodehash_asB64(),
    siblingsList: msg.getSiblingsList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dvote.types.v1.ProofEthereumAccount}
 */
proto.dvote.types.v1.ProofEthereumAccount.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dvote.types.v1.ProofEthereumAccount;
  return proto.dvote.types.v1.ProofEthereumAccount.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dvote.types.v1.ProofEthereumAccount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dvote.types.v1.ProofEthereumAccount}
 */
proto.dvote.types.v1.ProofEthereumAccount.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNonce(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBalance(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setStoragehash(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCodehash(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addSiblings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.ProofEthereumAccount.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dvote.types.v1.ProofEthereumAccount.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dvote.types.v1.ProofEthereumAccount} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dvote.types.v1.ProofEthereumAccount.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNonce_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getBalance_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getStoragehash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getCodehash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getSiblingsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      5,
      f
    );
  }
};


/**
 * optional bytes nonce = 1;
 * @return {!(string|Uint8Array)}
 */
proto.dvote.types.v1.ProofEthereumAccount.prototype.getNonce = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes nonce = 1;
 * This is a type-conversion wrapper around `getNonce()`
 * @return {string}
 */
proto.dvote.types.v1.ProofEthereumAccount.prototype.getNonce_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNonce()));
};


/**
 * optional bytes nonce = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNonce()`
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.ProofEthereumAccount.prototype.getNonce_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNonce()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.dvote.types.v1.ProofEthereumAccount} returns this
 */
proto.dvote.types.v1.ProofEthereumAccount.prototype.setNonce = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes balance = 2;
 * @return {!(string|Uint8Array)}
 */
proto.dvote.types.v1.ProofEthereumAccount.prototype.getBalance = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes balance = 2;
 * This is a type-conversion wrapper around `getBalance()`
 * @return {string}
 */
proto.dvote.types.v1.ProofEthereumAccount.prototype.getBalance_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBalance()));
};


/**
 * optional bytes balance = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBalance()`
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.ProofEthereumAccount.prototype.getBalance_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBalance()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.dvote.types.v1.ProofEthereumAccount} returns this
 */
proto.dvote.types.v1.ProofEthereumAccount.prototype.setBalance = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes storageHash = 3;
 * @return {!(string|Uint8Array)}
 */
proto.dvote.types.v1.ProofEthereumAccount.prototype.getStoragehash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes storageHash = 3;
 * This is a type-conversion wrapper around `getStoragehash()`
 * @return {string}
 */
proto.dvote.types.v1.ProofEthereumAccount.prototype.getStoragehash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getStoragehash()));
};


/**
 * optional bytes storageHash = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getStoragehash()`
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.ProofEthereumAccount.prototype.getStoragehash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getStoragehash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.dvote.types.v1.ProofEthereumAccount} returns this
 */
proto.dvote.types.v1.ProofEthereumAccount.prototype.setStoragehash = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes codeHash = 4;
 * @return {!(string|Uint8Array)}
 */
proto.dvote.types.v1.ProofEthereumAccount.prototype.getCodehash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes codeHash = 4;
 * This is a type-conversion wrapper around `getCodehash()`
 * @return {string}
 */
proto.dvote.types.v1.ProofEthereumAccount.prototype.getCodehash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCodehash()));
};


/**
 * optional bytes codeHash = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCodehash()`
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.ProofEthereumAccount.prototype.getCodehash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCodehash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.dvote.types.v1.ProofEthereumAccount} returns this
 */
proto.dvote.types.v1.ProofEthereumAccount.prototype.setCodehash = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * repeated bytes siblings = 5;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.dvote.types.v1.ProofEthereumAccount.prototype.getSiblingsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * repeated bytes siblings = 5;
 * This is a type-conversion wrapper around `getSiblingsList()`
 * @return {!Array<string>}
 */
proto.dvote.types.v1.ProofEthereumAccount.prototype.getSiblingsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getSiblingsList()));
};


/**
 * repeated bytes siblings = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSiblingsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.dvote.types.v1.ProofEthereumAccount.prototype.getSiblingsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getSiblingsList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.dvote.types.v1.ProofEthereumAccount} returns this
 */
proto.dvote.types.v1.ProofEthereumAccount.prototype.setSiblingsList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.dvote.types.v1.ProofEthereumAccount} returns this
 */
proto.dvote.types.v1.ProofEthereumAccount.prototype.addSiblings = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.dvote.types.v1.ProofEthereumAccount} returns this
 */
proto.dvote.types.v1.ProofEthereumAccount.prototype.clearSiblingsList = function() {
  return this.setSiblingsList([]);
};


goog.object.extend(exports, proto.dvote.types.v1);
