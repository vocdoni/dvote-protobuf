// source: vochain/vochain.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.dvote.types.v1.AdminTx', null, global);
goog.exportSymbol('proto.dvote.types.v1.CAbundle', null, global);
goog.exportSymbol('proto.dvote.types.v1.CensusOrigin', null, global);
goog.exportSymbol('proto.dvote.types.v1.EnvelopeType', null, global);
goog.exportSymbol('proto.dvote.types.v1.NewProcessTx', null, global);
goog.exportSymbol('proto.dvote.types.v1.OracleList', null, global);
goog.exportSymbol('proto.dvote.types.v1.Process', null, global);
goog.exportSymbol('proto.dvote.types.v1.ProcessEndingList', null, global);
goog.exportSymbol('proto.dvote.types.v1.ProcessMode', null, global);
goog.exportSymbol('proto.dvote.types.v1.ProcessResult', null, global);
goog.exportSymbol('proto.dvote.types.v1.ProcessStatus', null, global);
goog.exportSymbol('proto.dvote.types.v1.ProcessVoteOptions', null, global);
goog.exportSymbol('proto.dvote.types.v1.Proof', null, global);
goog.exportSymbol('proto.dvote.types.v1.Proof.PayloadCase', null, global);
goog.exportSymbol('proto.dvote.types.v1.ProofCA', null, global);
goog.exportSymbol('proto.dvote.types.v1.ProofEthereumAccount', null, global);
goog.exportSymbol('proto.dvote.types.v1.ProofEthereumStorage', null, global);
goog.exportSymbol('proto.dvote.types.v1.ProofGraviton', null, global);
goog.exportSymbol('proto.dvote.types.v1.ProofIden3', null, global);
goog.exportSymbol('proto.dvote.types.v1.QuestionResult', null, global);
goog.exportSymbol('proto.dvote.types.v1.SetProcessTx', null, global);
goog.exportSymbol('proto.dvote.types.v1.SignatureType', null, global);
goog.exportSymbol('proto.dvote.types.v1.SignedTx', null, global);
goog.exportSymbol('proto.dvote.types.v1.StoredKeys', null, global);
goog.exportSymbol('proto.dvote.types.v1.TendermintHeader', null, global);
goog.exportSymbol('proto.dvote.types.v1.Tx', null, global);
goog.exportSymbol('proto.dvote.types.v1.Tx.PayloadCase', null, global);
goog.exportSymbol('proto.dvote.types.v1.TxType', null, global);
goog.exportSymbol('proto.dvote.types.v1.Validator', null, global);
goog.exportSymbol('proto.dvote.types.v1.ValidatorList', null, global);
goog.exportSymbol('proto.dvote.types.v1.Vote', null, global);
goog.exportSymbol('proto.dvote.types.v1.VoteEnvelope', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dvote.types.v1.VoteEnvelope = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.dvote.types.v1.VoteEnvelope.repeatedFields_, null);
};
goog.inherits(proto.dvote.types.v1.VoteEnvelope, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dvote.types.v1.VoteEnvelope.displayName = 'proto.dvote.types.v1.VoteEnvelope';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dvote.types.v1.Proof = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.dvote.types.v1.Proof.oneofGroups_);
};
goog.inherits(proto.dvote.types.v1.Proof, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dvote.types.v1.Proof.displayName = 'proto.dvote.types.v1.Proof';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dvote.types.v1.ProofGraviton = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dvote.types.v1.ProofGraviton, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dvote.types.v1.ProofGraviton.displayName = 'proto.dvote.types.v1.ProofGraviton';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dvote.types.v1.ProofIden3 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dvote.types.v1.ProofIden3, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dvote.types.v1.ProofIden3.displayName = 'proto.dvote.types.v1.ProofIden3';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dvote.types.v1.ProofCA = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dvote.types.v1.ProofCA, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dvote.types.v1.ProofCA.displayName = 'proto.dvote.types.v1.ProofCA';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dvote.types.v1.CAbundle = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dvote.types.v1.CAbundle, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dvote.types.v1.CAbundle.displayName = 'proto.dvote.types.v1.CAbundle';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dvote.types.v1.ProofEthereumStorage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.dvote.types.v1.ProofEthereumStorage.repeatedFields_, null);
};
goog.inherits(proto.dvote.types.v1.ProofEthereumStorage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dvote.types.v1.ProofEthereumStorage.displayName = 'proto.dvote.types.v1.ProofEthereumStorage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dvote.types.v1.ProofEthereumAccount = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.dvote.types.v1.ProofEthereumAccount.repeatedFields_, null);
};
goog.inherits(proto.dvote.types.v1.ProofEthereumAccount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dvote.types.v1.ProofEthereumAccount.displayName = 'proto.dvote.types.v1.ProofEthereumAccount';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dvote.types.v1.Tx = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.dvote.types.v1.Tx.oneofGroups_);
};
goog.inherits(proto.dvote.types.v1.Tx, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dvote.types.v1.Tx.displayName = 'proto.dvote.types.v1.Tx';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dvote.types.v1.SignedTx = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dvote.types.v1.SignedTx, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dvote.types.v1.SignedTx.displayName = 'proto.dvote.types.v1.SignedTx';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dvote.types.v1.NewProcessTx = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dvote.types.v1.NewProcessTx, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dvote.types.v1.NewProcessTx.displayName = 'proto.dvote.types.v1.NewProcessTx';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dvote.types.v1.SetProcessTx = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dvote.types.v1.SetProcessTx, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dvote.types.v1.SetProcessTx.displayName = 'proto.dvote.types.v1.SetProcessTx';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dvote.types.v1.AdminTx = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dvote.types.v1.AdminTx, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dvote.types.v1.AdminTx.displayName = 'proto.dvote.types.v1.AdminTx';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dvote.types.v1.Process = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.dvote.types.v1.Process.repeatedFields_, null);
};
goog.inherits(proto.dvote.types.v1.Process, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dvote.types.v1.Process.displayName = 'proto.dvote.types.v1.Process';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dvote.types.v1.EnvelopeType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dvote.types.v1.EnvelopeType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dvote.types.v1.EnvelopeType.displayName = 'proto.dvote.types.v1.EnvelopeType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dvote.types.v1.ProcessMode = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dvote.types.v1.ProcessMode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dvote.types.v1.ProcessMode.displayName = 'proto.dvote.types.v1.ProcessMode';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dvote.types.v1.ProcessVoteOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dvote.types.v1.ProcessVoteOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dvote.types.v1.ProcessVoteOptions.displayName = 'proto.dvote.types.v1.ProcessVoteOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dvote.types.v1.OracleList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.dvote.types.v1.OracleList.repeatedFields_, null);
};
goog.inherits(proto.dvote.types.v1.OracleList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dvote.types.v1.OracleList.displayName = 'proto.dvote.types.v1.OracleList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dvote.types.v1.ValidatorList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.dvote.types.v1.ValidatorList.repeatedFields_, null);
};
goog.inherits(proto.dvote.types.v1.ValidatorList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dvote.types.v1.ValidatorList.displayName = 'proto.dvote.types.v1.ValidatorList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dvote.types.v1.Validator = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dvote.types.v1.Validator, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dvote.types.v1.Validator.displayName = 'proto.dvote.types.v1.Validator';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dvote.types.v1.Vote = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.dvote.types.v1.Vote.repeatedFields_, null);
};
goog.inherits(proto.dvote.types.v1.Vote, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dvote.types.v1.Vote.displayName = 'proto.dvote.types.v1.Vote';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dvote.types.v1.TendermintHeader = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dvote.types.v1.TendermintHeader, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dvote.types.v1.TendermintHeader.displayName = 'proto.dvote.types.v1.TendermintHeader';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dvote.types.v1.ProcessResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.dvote.types.v1.ProcessResult.repeatedFields_, null);
};
goog.inherits(proto.dvote.types.v1.ProcessResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dvote.types.v1.ProcessResult.displayName = 'proto.dvote.types.v1.ProcessResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dvote.types.v1.QuestionResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.dvote.types.v1.QuestionResult.repeatedFields_, null);
};
goog.inherits(proto.dvote.types.v1.QuestionResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dvote.types.v1.QuestionResult.displayName = 'proto.dvote.types.v1.QuestionResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dvote.types.v1.ProcessEndingList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.dvote.types.v1.ProcessEndingList.repeatedFields_, null);
};
goog.inherits(proto.dvote.types.v1.ProcessEndingList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dvote.types.v1.ProcessEndingList.displayName = 'proto.dvote.types.v1.ProcessEndingList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dvote.types.v1.StoredKeys = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.dvote.types.v1.StoredKeys.repeatedFields_, null);
};
goog.inherits(proto.dvote.types.v1.StoredKeys, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dvote.types.v1.StoredKeys.displayName = 'proto.dvote.types.v1.StoredKeys';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.dvote.types.v1.VoteEnvelope.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dvote.types.v1.VoteEnvelope.prototype.toObject = function(opt_includeInstance) {
  return proto.dvote.types.v1.VoteEnvelope.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dvote.types.v1.VoteEnvelope} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dvote.types.v1.VoteEnvelope.toObject = function(includeInstance, msg) {
  var f, obj = {
    nonce: msg.getNonce_asB64(),
    processid: msg.getProcessid_asB64(),
    proof: (f = msg.getProof()) && proto.dvote.types.v1.Proof.toObject(includeInstance, f),
    votepackage: msg.getVotepackage_asB64(),
    nullifier: msg.getNullifier_asB64(),
    encryptionkeyindexesList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dvote.types.v1.VoteEnvelope}
 */
proto.dvote.types.v1.VoteEnvelope.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dvote.types.v1.VoteEnvelope;
  return proto.dvote.types.v1.VoteEnvelope.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dvote.types.v1.VoteEnvelope} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dvote.types.v1.VoteEnvelope}
 */
proto.dvote.types.v1.VoteEnvelope.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNonce(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProcessid(value);
      break;
    case 3:
      var value = new proto.dvote.types.v1.Proof;
      reader.readMessage(value,proto.dvote.types.v1.Proof.deserializeBinaryFromReader);
      msg.setProof(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setVotepackage(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNullifier(value);
      break;
    case 6:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addEncryptionkeyindexes(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.VoteEnvelope.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dvote.types.v1.VoteEnvelope.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dvote.types.v1.VoteEnvelope} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dvote.types.v1.VoteEnvelope.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNonce_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getProcessid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getProof();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.dvote.types.v1.Proof.serializeBinaryToWriter
    );
  }
  f = message.getVotepackage_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getNullifier_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getEncryptionkeyindexesList();
  if (f.length > 0) {
    writer.writePackedUint32(
      6,
      f
    );
  }
};


/**
 * optional bytes nonce = 1;
 * @return {!(string|Uint8Array)}
 */
proto.dvote.types.v1.VoteEnvelope.prototype.getNonce = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes nonce = 1;
 * This is a type-conversion wrapper around `getNonce()`
 * @return {string}
 */
proto.dvote.types.v1.VoteEnvelope.prototype.getNonce_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNonce()));
};


/**
 * optional bytes nonce = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNonce()`
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.VoteEnvelope.prototype.getNonce_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNonce()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.dvote.types.v1.VoteEnvelope} returns this
 */
proto.dvote.types.v1.VoteEnvelope.prototype.setNonce = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes processId = 2;
 * @return {!(string|Uint8Array)}
 */
proto.dvote.types.v1.VoteEnvelope.prototype.getProcessid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes processId = 2;
 * This is a type-conversion wrapper around `getProcessid()`
 * @return {string}
 */
proto.dvote.types.v1.VoteEnvelope.prototype.getProcessid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProcessid()));
};


/**
 * optional bytes processId = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProcessid()`
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.VoteEnvelope.prototype.getProcessid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProcessid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.dvote.types.v1.VoteEnvelope} returns this
 */
proto.dvote.types.v1.VoteEnvelope.prototype.setProcessid = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional Proof proof = 3;
 * @return {?proto.dvote.types.v1.Proof}
 */
proto.dvote.types.v1.VoteEnvelope.prototype.getProof = function() {
  return /** @type{?proto.dvote.types.v1.Proof} */ (
    jspb.Message.getWrapperField(this, proto.dvote.types.v1.Proof, 3));
};


/**
 * @param {?proto.dvote.types.v1.Proof|undefined} value
 * @return {!proto.dvote.types.v1.VoteEnvelope} returns this
*/
proto.dvote.types.v1.VoteEnvelope.prototype.setProof = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dvote.types.v1.VoteEnvelope} returns this
 */
proto.dvote.types.v1.VoteEnvelope.prototype.clearProof = function() {
  return this.setProof(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dvote.types.v1.VoteEnvelope.prototype.hasProof = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bytes votePackage = 4;
 * @return {!(string|Uint8Array)}
 */
proto.dvote.types.v1.VoteEnvelope.prototype.getVotepackage = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes votePackage = 4;
 * This is a type-conversion wrapper around `getVotepackage()`
 * @return {string}
 */
proto.dvote.types.v1.VoteEnvelope.prototype.getVotepackage_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getVotepackage()));
};


/**
 * optional bytes votePackage = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getVotepackage()`
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.VoteEnvelope.prototype.getVotepackage_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getVotepackage()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.dvote.types.v1.VoteEnvelope} returns this
 */
proto.dvote.types.v1.VoteEnvelope.prototype.setVotepackage = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional bytes nullifier = 5;
 * @return {!(string|Uint8Array)}
 */
proto.dvote.types.v1.VoteEnvelope.prototype.getNullifier = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes nullifier = 5;
 * This is a type-conversion wrapper around `getNullifier()`
 * @return {string}
 */
proto.dvote.types.v1.VoteEnvelope.prototype.getNullifier_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNullifier()));
};


/**
 * optional bytes nullifier = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNullifier()`
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.VoteEnvelope.prototype.getNullifier_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNullifier()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.dvote.types.v1.VoteEnvelope} returns this
 */
proto.dvote.types.v1.VoteEnvelope.prototype.setNullifier = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * repeated uint32 encryptionKeyIndexes = 6;
 * @return {!Array<number>}
 */
proto.dvote.types.v1.VoteEnvelope.prototype.getEncryptionkeyindexesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.dvote.types.v1.VoteEnvelope} returns this
 */
proto.dvote.types.v1.VoteEnvelope.prototype.setEncryptionkeyindexesList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.dvote.types.v1.VoteEnvelope} returns this
 */
proto.dvote.types.v1.VoteEnvelope.prototype.addEncryptionkeyindexes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.dvote.types.v1.VoteEnvelope} returns this
 */
proto.dvote.types.v1.VoteEnvelope.prototype.clearEncryptionkeyindexesList = function() {
  return this.setEncryptionkeyindexesList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.dvote.types.v1.Proof.oneofGroups_ = [[1,2,3,4,5]];

/**
 * @enum {number}
 */
proto.dvote.types.v1.Proof.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  GRAVITON: 1,
  IDEN3: 2,
  ETHEREUMSTORAGE: 3,
  ETHEREUMACCOUNT: 4,
  CA: 5
};

/**
 * @return {proto.dvote.types.v1.Proof.PayloadCase}
 */
proto.dvote.types.v1.Proof.prototype.getPayloadCase = function() {
  return /** @type {proto.dvote.types.v1.Proof.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.dvote.types.v1.Proof.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dvote.types.v1.Proof.prototype.toObject = function(opt_includeInstance) {
  return proto.dvote.types.v1.Proof.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dvote.types.v1.Proof} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dvote.types.v1.Proof.toObject = function(includeInstance, msg) {
  var f, obj = {
    graviton: (f = msg.getGraviton()) && proto.dvote.types.v1.ProofGraviton.toObject(includeInstance, f),
    iden3: (f = msg.getIden3()) && proto.dvote.types.v1.ProofIden3.toObject(includeInstance, f),
    ethereumstorage: (f = msg.getEthereumstorage()) && proto.dvote.types.v1.ProofEthereumStorage.toObject(includeInstance, f),
    ethereumaccount: (f = msg.getEthereumaccount()) && proto.dvote.types.v1.ProofEthereumAccount.toObject(includeInstance, f),
    ca: (f = msg.getCa()) && proto.dvote.types.v1.ProofCA.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dvote.types.v1.Proof}
 */
proto.dvote.types.v1.Proof.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dvote.types.v1.Proof;
  return proto.dvote.types.v1.Proof.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dvote.types.v1.Proof} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dvote.types.v1.Proof}
 */
proto.dvote.types.v1.Proof.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.dvote.types.v1.ProofGraviton;
      reader.readMessage(value,proto.dvote.types.v1.ProofGraviton.deserializeBinaryFromReader);
      msg.setGraviton(value);
      break;
    case 2:
      var value = new proto.dvote.types.v1.ProofIden3;
      reader.readMessage(value,proto.dvote.types.v1.ProofIden3.deserializeBinaryFromReader);
      msg.setIden3(value);
      break;
    case 3:
      var value = new proto.dvote.types.v1.ProofEthereumStorage;
      reader.readMessage(value,proto.dvote.types.v1.ProofEthereumStorage.deserializeBinaryFromReader);
      msg.setEthereumstorage(value);
      break;
    case 4:
      var value = new proto.dvote.types.v1.ProofEthereumAccount;
      reader.readMessage(value,proto.dvote.types.v1.ProofEthereumAccount.deserializeBinaryFromReader);
      msg.setEthereumaccount(value);
      break;
    case 5:
      var value = new proto.dvote.types.v1.ProofCA;
      reader.readMessage(value,proto.dvote.types.v1.ProofCA.deserializeBinaryFromReader);
      msg.setCa(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.Proof.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dvote.types.v1.Proof.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dvote.types.v1.Proof} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dvote.types.v1.Proof.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGraviton();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.dvote.types.v1.ProofGraviton.serializeBinaryToWriter
    );
  }
  f = message.getIden3();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.dvote.types.v1.ProofIden3.serializeBinaryToWriter
    );
  }
  f = message.getEthereumstorage();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.dvote.types.v1.ProofEthereumStorage.serializeBinaryToWriter
    );
  }
  f = message.getEthereumaccount();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.dvote.types.v1.ProofEthereumAccount.serializeBinaryToWriter
    );
  }
  f = message.getCa();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.dvote.types.v1.ProofCA.serializeBinaryToWriter
    );
  }
};


/**
 * optional ProofGraviton graviton = 1;
 * @return {?proto.dvote.types.v1.ProofGraviton}
 */
proto.dvote.types.v1.Proof.prototype.getGraviton = function() {
  return /** @type{?proto.dvote.types.v1.ProofGraviton} */ (
    jspb.Message.getWrapperField(this, proto.dvote.types.v1.ProofGraviton, 1));
};


/**
 * @param {?proto.dvote.types.v1.ProofGraviton|undefined} value
 * @return {!proto.dvote.types.v1.Proof} returns this
*/
proto.dvote.types.v1.Proof.prototype.setGraviton = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.dvote.types.v1.Proof.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dvote.types.v1.Proof} returns this
 */
proto.dvote.types.v1.Proof.prototype.clearGraviton = function() {
  return this.setGraviton(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dvote.types.v1.Proof.prototype.hasGraviton = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ProofIden3 iden3 = 2;
 * @return {?proto.dvote.types.v1.ProofIden3}
 */
proto.dvote.types.v1.Proof.prototype.getIden3 = function() {
  return /** @type{?proto.dvote.types.v1.ProofIden3} */ (
    jspb.Message.getWrapperField(this, proto.dvote.types.v1.ProofIden3, 2));
};


/**
 * @param {?proto.dvote.types.v1.ProofIden3|undefined} value
 * @return {!proto.dvote.types.v1.Proof} returns this
*/
proto.dvote.types.v1.Proof.prototype.setIden3 = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.dvote.types.v1.Proof.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dvote.types.v1.Proof} returns this
 */
proto.dvote.types.v1.Proof.prototype.clearIden3 = function() {
  return this.setIden3(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dvote.types.v1.Proof.prototype.hasIden3 = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ProofEthereumStorage ethereumStorage = 3;
 * @return {?proto.dvote.types.v1.ProofEthereumStorage}
 */
proto.dvote.types.v1.Proof.prototype.getEthereumstorage = function() {
  return /** @type{?proto.dvote.types.v1.ProofEthereumStorage} */ (
    jspb.Message.getWrapperField(this, proto.dvote.types.v1.ProofEthereumStorage, 3));
};


/**
 * @param {?proto.dvote.types.v1.ProofEthereumStorage|undefined} value
 * @return {!proto.dvote.types.v1.Proof} returns this
*/
proto.dvote.types.v1.Proof.prototype.setEthereumstorage = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.dvote.types.v1.Proof.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dvote.types.v1.Proof} returns this
 */
proto.dvote.types.v1.Proof.prototype.clearEthereumstorage = function() {
  return this.setEthereumstorage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dvote.types.v1.Proof.prototype.hasEthereumstorage = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ProofEthereumAccount ethereumAccount = 4;
 * @return {?proto.dvote.types.v1.ProofEthereumAccount}
 */
proto.dvote.types.v1.Proof.prototype.getEthereumaccount = function() {
  return /** @type{?proto.dvote.types.v1.ProofEthereumAccount} */ (
    jspb.Message.getWrapperField(this, proto.dvote.types.v1.ProofEthereumAccount, 4));
};


/**
 * @param {?proto.dvote.types.v1.ProofEthereumAccount|undefined} value
 * @return {!proto.dvote.types.v1.Proof} returns this
*/
proto.dvote.types.v1.Proof.prototype.setEthereumaccount = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.dvote.types.v1.Proof.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dvote.types.v1.Proof} returns this
 */
proto.dvote.types.v1.Proof.prototype.clearEthereumaccount = function() {
  return this.setEthereumaccount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dvote.types.v1.Proof.prototype.hasEthereumaccount = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ProofCA ca = 5;
 * @return {?proto.dvote.types.v1.ProofCA}
 */
proto.dvote.types.v1.Proof.prototype.getCa = function() {
  return /** @type{?proto.dvote.types.v1.ProofCA} */ (
    jspb.Message.getWrapperField(this, proto.dvote.types.v1.ProofCA, 5));
};


/**
 * @param {?proto.dvote.types.v1.ProofCA|undefined} value
 * @return {!proto.dvote.types.v1.Proof} returns this
*/
proto.dvote.types.v1.Proof.prototype.setCa = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.dvote.types.v1.Proof.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dvote.types.v1.Proof} returns this
 */
proto.dvote.types.v1.Proof.prototype.clearCa = function() {
  return this.setCa(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dvote.types.v1.Proof.prototype.hasCa = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dvote.types.v1.ProofGraviton.prototype.toObject = function(opt_includeInstance) {
  return proto.dvote.types.v1.ProofGraviton.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dvote.types.v1.ProofGraviton} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dvote.types.v1.ProofGraviton.toObject = function(includeInstance, msg) {
  var f, obj = {
    siblings: msg.getSiblings_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dvote.types.v1.ProofGraviton}
 */
proto.dvote.types.v1.ProofGraviton.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dvote.types.v1.ProofGraviton;
  return proto.dvote.types.v1.ProofGraviton.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dvote.types.v1.ProofGraviton} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dvote.types.v1.ProofGraviton}
 */
proto.dvote.types.v1.ProofGraviton.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSiblings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.ProofGraviton.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dvote.types.v1.ProofGraviton.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dvote.types.v1.ProofGraviton} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dvote.types.v1.ProofGraviton.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSiblings_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes siblings = 1;
 * @return {!(string|Uint8Array)}
 */
proto.dvote.types.v1.ProofGraviton.prototype.getSiblings = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes siblings = 1;
 * This is a type-conversion wrapper around `getSiblings()`
 * @return {string}
 */
proto.dvote.types.v1.ProofGraviton.prototype.getSiblings_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSiblings()));
};


/**
 * optional bytes siblings = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSiblings()`
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.ProofGraviton.prototype.getSiblings_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSiblings()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.dvote.types.v1.ProofGraviton} returns this
 */
proto.dvote.types.v1.ProofGraviton.prototype.setSiblings = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dvote.types.v1.ProofIden3.prototype.toObject = function(opt_includeInstance) {
  return proto.dvote.types.v1.ProofIden3.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dvote.types.v1.ProofIden3} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dvote.types.v1.ProofIden3.toObject = function(includeInstance, msg) {
  var f, obj = {
    siblings: msg.getSiblings_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dvote.types.v1.ProofIden3}
 */
proto.dvote.types.v1.ProofIden3.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dvote.types.v1.ProofIden3;
  return proto.dvote.types.v1.ProofIden3.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dvote.types.v1.ProofIden3} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dvote.types.v1.ProofIden3}
 */
proto.dvote.types.v1.ProofIden3.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSiblings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.ProofIden3.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dvote.types.v1.ProofIden3.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dvote.types.v1.ProofIden3} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dvote.types.v1.ProofIden3.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSiblings_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes siblings = 1;
 * @return {!(string|Uint8Array)}
 */
proto.dvote.types.v1.ProofIden3.prototype.getSiblings = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes siblings = 1;
 * This is a type-conversion wrapper around `getSiblings()`
 * @return {string}
 */
proto.dvote.types.v1.ProofIden3.prototype.getSiblings_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSiblings()));
};


/**
 * optional bytes siblings = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSiblings()`
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.ProofIden3.prototype.getSiblings_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSiblings()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.dvote.types.v1.ProofIden3} returns this
 */
proto.dvote.types.v1.ProofIden3.prototype.setSiblings = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dvote.types.v1.ProofCA.prototype.toObject = function(opt_includeInstance) {
  return proto.dvote.types.v1.ProofCA.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dvote.types.v1.ProofCA} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dvote.types.v1.ProofCA.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    bundle: (f = msg.getBundle()) && proto.dvote.types.v1.CAbundle.toObject(includeInstance, f),
    signature: msg.getSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dvote.types.v1.ProofCA}
 */
proto.dvote.types.v1.ProofCA.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dvote.types.v1.ProofCA;
  return proto.dvote.types.v1.ProofCA.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dvote.types.v1.ProofCA} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dvote.types.v1.ProofCA}
 */
proto.dvote.types.v1.ProofCA.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.dvote.types.v1.SignatureType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = new proto.dvote.types.v1.CAbundle;
      reader.readMessage(value,proto.dvote.types.v1.CAbundle.deserializeBinaryFromReader);
      msg.setBundle(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.ProofCA.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dvote.types.v1.ProofCA.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dvote.types.v1.ProofCA} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dvote.types.v1.ProofCA.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getBundle();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.dvote.types.v1.CAbundle.serializeBinaryToWriter
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional SignatureType type = 1;
 * @return {!proto.dvote.types.v1.SignatureType}
 */
proto.dvote.types.v1.ProofCA.prototype.getType = function() {
  return /** @type {!proto.dvote.types.v1.SignatureType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.dvote.types.v1.SignatureType} value
 * @return {!proto.dvote.types.v1.ProofCA} returns this
 */
proto.dvote.types.v1.ProofCA.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional CAbundle bundle = 2;
 * @return {?proto.dvote.types.v1.CAbundle}
 */
proto.dvote.types.v1.ProofCA.prototype.getBundle = function() {
  return /** @type{?proto.dvote.types.v1.CAbundle} */ (
    jspb.Message.getWrapperField(this, proto.dvote.types.v1.CAbundle, 2));
};


/**
 * @param {?proto.dvote.types.v1.CAbundle|undefined} value
 * @return {!proto.dvote.types.v1.ProofCA} returns this
*/
proto.dvote.types.v1.ProofCA.prototype.setBundle = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dvote.types.v1.ProofCA} returns this
 */
proto.dvote.types.v1.ProofCA.prototype.clearBundle = function() {
  return this.setBundle(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dvote.types.v1.ProofCA.prototype.hasBundle = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes signature = 3;
 * @return {!(string|Uint8Array)}
 */
proto.dvote.types.v1.ProofCA.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes signature = 3;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.dvote.types.v1.ProofCA.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.ProofCA.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.dvote.types.v1.ProofCA} returns this
 */
proto.dvote.types.v1.ProofCA.prototype.setSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dvote.types.v1.CAbundle.prototype.toObject = function(opt_includeInstance) {
  return proto.dvote.types.v1.CAbundle.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dvote.types.v1.CAbundle} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dvote.types.v1.CAbundle.toObject = function(includeInstance, msg) {
  var f, obj = {
    processid: msg.getProcessid_asB64(),
    address: msg.getAddress_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dvote.types.v1.CAbundle}
 */
proto.dvote.types.v1.CAbundle.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dvote.types.v1.CAbundle;
  return proto.dvote.types.v1.CAbundle.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dvote.types.v1.CAbundle} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dvote.types.v1.CAbundle}
 */
proto.dvote.types.v1.CAbundle.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProcessid(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.CAbundle.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dvote.types.v1.CAbundle.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dvote.types.v1.CAbundle} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dvote.types.v1.CAbundle.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProcessid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes processId = 1;
 * @return {!(string|Uint8Array)}
 */
proto.dvote.types.v1.CAbundle.prototype.getProcessid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes processId = 1;
 * This is a type-conversion wrapper around `getProcessid()`
 * @return {string}
 */
proto.dvote.types.v1.CAbundle.prototype.getProcessid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProcessid()));
};


/**
 * optional bytes processId = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProcessid()`
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.CAbundle.prototype.getProcessid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProcessid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.dvote.types.v1.CAbundle} returns this
 */
proto.dvote.types.v1.CAbundle.prototype.setProcessid = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes address = 2;
 * @return {!(string|Uint8Array)}
 */
proto.dvote.types.v1.CAbundle.prototype.getAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes address = 2;
 * This is a type-conversion wrapper around `getAddress()`
 * @return {string}
 */
proto.dvote.types.v1.CAbundle.prototype.getAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAddress()));
};


/**
 * optional bytes address = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddress()`
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.CAbundle.prototype.getAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.dvote.types.v1.CAbundle} returns this
 */
proto.dvote.types.v1.CAbundle.prototype.setAddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.dvote.types.v1.ProofEthereumStorage.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dvote.types.v1.ProofEthereumStorage.prototype.toObject = function(opt_includeInstance) {
  return proto.dvote.types.v1.ProofEthereumStorage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dvote.types.v1.ProofEthereumStorage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dvote.types.v1.ProofEthereumStorage.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: msg.getKey_asB64(),
    value: msg.getValue_asB64(),
    siblingsList: msg.getSiblingsList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dvote.types.v1.ProofEthereumStorage}
 */
proto.dvote.types.v1.ProofEthereumStorage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dvote.types.v1.ProofEthereumStorage;
  return proto.dvote.types.v1.ProofEthereumStorage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dvote.types.v1.ProofEthereumStorage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dvote.types.v1.ProofEthereumStorage}
 */
proto.dvote.types.v1.ProofEthereumStorage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValue(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addSiblings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.ProofEthereumStorage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dvote.types.v1.ProofEthereumStorage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dvote.types.v1.ProofEthereumStorage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dvote.types.v1.ProofEthereumStorage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getSiblingsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      3,
      f
    );
  }
};


/**
 * optional bytes key = 1;
 * @return {!(string|Uint8Array)}
 */
proto.dvote.types.v1.ProofEthereumStorage.prototype.getKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes key = 1;
 * This is a type-conversion wrapper around `getKey()`
 * @return {string}
 */
proto.dvote.types.v1.ProofEthereumStorage.prototype.getKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getKey()));
};


/**
 * optional bytes key = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKey()`
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.ProofEthereumStorage.prototype.getKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.dvote.types.v1.ProofEthereumStorage} returns this
 */
proto.dvote.types.v1.ProofEthereumStorage.prototype.setKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes value = 2;
 * @return {!(string|Uint8Array)}
 */
proto.dvote.types.v1.ProofEthereumStorage.prototype.getValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes value = 2;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.dvote.types.v1.ProofEthereumStorage.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValue()));
};


/**
 * optional bytes value = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.ProofEthereumStorage.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValue()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.dvote.types.v1.ProofEthereumStorage} returns this
 */
proto.dvote.types.v1.ProofEthereumStorage.prototype.setValue = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * repeated bytes siblings = 3;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.dvote.types.v1.ProofEthereumStorage.prototype.getSiblingsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * repeated bytes siblings = 3;
 * This is a type-conversion wrapper around `getSiblingsList()`
 * @return {!Array<string>}
 */
proto.dvote.types.v1.ProofEthereumStorage.prototype.getSiblingsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getSiblingsList()));
};


/**
 * repeated bytes siblings = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSiblingsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.dvote.types.v1.ProofEthereumStorage.prototype.getSiblingsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getSiblingsList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.dvote.types.v1.ProofEthereumStorage} returns this
 */
proto.dvote.types.v1.ProofEthereumStorage.prototype.setSiblingsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.dvote.types.v1.ProofEthereumStorage} returns this
 */
proto.dvote.types.v1.ProofEthereumStorage.prototype.addSiblings = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.dvote.types.v1.ProofEthereumStorage} returns this
 */
proto.dvote.types.v1.ProofEthereumStorage.prototype.clearSiblingsList = function() {
  return this.setSiblingsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.dvote.types.v1.ProofEthereumAccount.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dvote.types.v1.ProofEthereumAccount.prototype.toObject = function(opt_includeInstance) {
  return proto.dvote.types.v1.ProofEthereumAccount.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dvote.types.v1.ProofEthereumAccount} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dvote.types.v1.ProofEthereumAccount.toObject = function(includeInstance, msg) {
  var f, obj = {
    nonce: msg.getNonce_asB64(),
    balance: msg.getBalance_asB64(),
    storagehash: msg.getStoragehash_asB64(),
    codehash: msg.getCodehash_asB64(),
    siblingsList: msg.getSiblingsList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dvote.types.v1.ProofEthereumAccount}
 */
proto.dvote.types.v1.ProofEthereumAccount.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dvote.types.v1.ProofEthereumAccount;
  return proto.dvote.types.v1.ProofEthereumAccount.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dvote.types.v1.ProofEthereumAccount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dvote.types.v1.ProofEthereumAccount}
 */
proto.dvote.types.v1.ProofEthereumAccount.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNonce(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBalance(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setStoragehash(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCodehash(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addSiblings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.ProofEthereumAccount.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dvote.types.v1.ProofEthereumAccount.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dvote.types.v1.ProofEthereumAccount} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dvote.types.v1.ProofEthereumAccount.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNonce_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getBalance_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getStoragehash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getCodehash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getSiblingsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      5,
      f
    );
  }
};


/**
 * optional bytes nonce = 1;
 * @return {!(string|Uint8Array)}
 */
proto.dvote.types.v1.ProofEthereumAccount.prototype.getNonce = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes nonce = 1;
 * This is a type-conversion wrapper around `getNonce()`
 * @return {string}
 */
proto.dvote.types.v1.ProofEthereumAccount.prototype.getNonce_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNonce()));
};


/**
 * optional bytes nonce = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNonce()`
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.ProofEthereumAccount.prototype.getNonce_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNonce()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.dvote.types.v1.ProofEthereumAccount} returns this
 */
proto.dvote.types.v1.ProofEthereumAccount.prototype.setNonce = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes balance = 2;
 * @return {!(string|Uint8Array)}
 */
proto.dvote.types.v1.ProofEthereumAccount.prototype.getBalance = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes balance = 2;
 * This is a type-conversion wrapper around `getBalance()`
 * @return {string}
 */
proto.dvote.types.v1.ProofEthereumAccount.prototype.getBalance_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBalance()));
};


/**
 * optional bytes balance = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBalance()`
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.ProofEthereumAccount.prototype.getBalance_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBalance()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.dvote.types.v1.ProofEthereumAccount} returns this
 */
proto.dvote.types.v1.ProofEthereumAccount.prototype.setBalance = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes storageHash = 3;
 * @return {!(string|Uint8Array)}
 */
proto.dvote.types.v1.ProofEthereumAccount.prototype.getStoragehash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes storageHash = 3;
 * This is a type-conversion wrapper around `getStoragehash()`
 * @return {string}
 */
proto.dvote.types.v1.ProofEthereumAccount.prototype.getStoragehash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getStoragehash()));
};


/**
 * optional bytes storageHash = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getStoragehash()`
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.ProofEthereumAccount.prototype.getStoragehash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getStoragehash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.dvote.types.v1.ProofEthereumAccount} returns this
 */
proto.dvote.types.v1.ProofEthereumAccount.prototype.setStoragehash = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes codeHash = 4;
 * @return {!(string|Uint8Array)}
 */
proto.dvote.types.v1.ProofEthereumAccount.prototype.getCodehash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes codeHash = 4;
 * This is a type-conversion wrapper around `getCodehash()`
 * @return {string}
 */
proto.dvote.types.v1.ProofEthereumAccount.prototype.getCodehash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCodehash()));
};


/**
 * optional bytes codeHash = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCodehash()`
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.ProofEthereumAccount.prototype.getCodehash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCodehash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.dvote.types.v1.ProofEthereumAccount} returns this
 */
proto.dvote.types.v1.ProofEthereumAccount.prototype.setCodehash = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * repeated bytes siblings = 5;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.dvote.types.v1.ProofEthereumAccount.prototype.getSiblingsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * repeated bytes siblings = 5;
 * This is a type-conversion wrapper around `getSiblingsList()`
 * @return {!Array<string>}
 */
proto.dvote.types.v1.ProofEthereumAccount.prototype.getSiblingsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getSiblingsList()));
};


/**
 * repeated bytes siblings = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSiblingsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.dvote.types.v1.ProofEthereumAccount.prototype.getSiblingsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getSiblingsList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.dvote.types.v1.ProofEthereumAccount} returns this
 */
proto.dvote.types.v1.ProofEthereumAccount.prototype.setSiblingsList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.dvote.types.v1.ProofEthereumAccount} returns this
 */
proto.dvote.types.v1.ProofEthereumAccount.prototype.addSiblings = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.dvote.types.v1.ProofEthereumAccount} returns this
 */
proto.dvote.types.v1.ProofEthereumAccount.prototype.clearSiblingsList = function() {
  return this.setSiblingsList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.dvote.types.v1.Tx.oneofGroups_ = [[1,2,3,4]];

/**
 * @enum {number}
 */
proto.dvote.types.v1.Tx.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  VOTE: 1,
  NEWPROCESS: 2,
  ADMIN: 3,
  SETPROCESS: 4
};

/**
 * @return {proto.dvote.types.v1.Tx.PayloadCase}
 */
proto.dvote.types.v1.Tx.prototype.getPayloadCase = function() {
  return /** @type {proto.dvote.types.v1.Tx.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.dvote.types.v1.Tx.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dvote.types.v1.Tx.prototype.toObject = function(opt_includeInstance) {
  return proto.dvote.types.v1.Tx.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dvote.types.v1.Tx} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dvote.types.v1.Tx.toObject = function(includeInstance, msg) {
  var f, obj = {
    vote: (f = msg.getVote()) && proto.dvote.types.v1.VoteEnvelope.toObject(includeInstance, f),
    newprocess: (f = msg.getNewprocess()) && proto.dvote.types.v1.NewProcessTx.toObject(includeInstance, f),
    admin: (f = msg.getAdmin()) && proto.dvote.types.v1.AdminTx.toObject(includeInstance, f),
    setprocess: (f = msg.getSetprocess()) && proto.dvote.types.v1.SetProcessTx.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dvote.types.v1.Tx}
 */
proto.dvote.types.v1.Tx.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dvote.types.v1.Tx;
  return proto.dvote.types.v1.Tx.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dvote.types.v1.Tx} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dvote.types.v1.Tx}
 */
proto.dvote.types.v1.Tx.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.dvote.types.v1.VoteEnvelope;
      reader.readMessage(value,proto.dvote.types.v1.VoteEnvelope.deserializeBinaryFromReader);
      msg.setVote(value);
      break;
    case 2:
      var value = new proto.dvote.types.v1.NewProcessTx;
      reader.readMessage(value,proto.dvote.types.v1.NewProcessTx.deserializeBinaryFromReader);
      msg.setNewprocess(value);
      break;
    case 3:
      var value = new proto.dvote.types.v1.AdminTx;
      reader.readMessage(value,proto.dvote.types.v1.AdminTx.deserializeBinaryFromReader);
      msg.setAdmin(value);
      break;
    case 4:
      var value = new proto.dvote.types.v1.SetProcessTx;
      reader.readMessage(value,proto.dvote.types.v1.SetProcessTx.deserializeBinaryFromReader);
      msg.setSetprocess(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.Tx.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dvote.types.v1.Tx.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dvote.types.v1.Tx} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dvote.types.v1.Tx.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVote();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.dvote.types.v1.VoteEnvelope.serializeBinaryToWriter
    );
  }
  f = message.getNewprocess();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.dvote.types.v1.NewProcessTx.serializeBinaryToWriter
    );
  }
  f = message.getAdmin();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.dvote.types.v1.AdminTx.serializeBinaryToWriter
    );
  }
  f = message.getSetprocess();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.dvote.types.v1.SetProcessTx.serializeBinaryToWriter
    );
  }
};


/**
 * optional VoteEnvelope vote = 1;
 * @return {?proto.dvote.types.v1.VoteEnvelope}
 */
proto.dvote.types.v1.Tx.prototype.getVote = function() {
  return /** @type{?proto.dvote.types.v1.VoteEnvelope} */ (
    jspb.Message.getWrapperField(this, proto.dvote.types.v1.VoteEnvelope, 1));
};


/**
 * @param {?proto.dvote.types.v1.VoteEnvelope|undefined} value
 * @return {!proto.dvote.types.v1.Tx} returns this
*/
proto.dvote.types.v1.Tx.prototype.setVote = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.dvote.types.v1.Tx.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dvote.types.v1.Tx} returns this
 */
proto.dvote.types.v1.Tx.prototype.clearVote = function() {
  return this.setVote(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dvote.types.v1.Tx.prototype.hasVote = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional NewProcessTx newProcess = 2;
 * @return {?proto.dvote.types.v1.NewProcessTx}
 */
proto.dvote.types.v1.Tx.prototype.getNewprocess = function() {
  return /** @type{?proto.dvote.types.v1.NewProcessTx} */ (
    jspb.Message.getWrapperField(this, proto.dvote.types.v1.NewProcessTx, 2));
};


/**
 * @param {?proto.dvote.types.v1.NewProcessTx|undefined} value
 * @return {!proto.dvote.types.v1.Tx} returns this
*/
proto.dvote.types.v1.Tx.prototype.setNewprocess = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.dvote.types.v1.Tx.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dvote.types.v1.Tx} returns this
 */
proto.dvote.types.v1.Tx.prototype.clearNewprocess = function() {
  return this.setNewprocess(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dvote.types.v1.Tx.prototype.hasNewprocess = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional AdminTx admin = 3;
 * @return {?proto.dvote.types.v1.AdminTx}
 */
proto.dvote.types.v1.Tx.prototype.getAdmin = function() {
  return /** @type{?proto.dvote.types.v1.AdminTx} */ (
    jspb.Message.getWrapperField(this, proto.dvote.types.v1.AdminTx, 3));
};


/**
 * @param {?proto.dvote.types.v1.AdminTx|undefined} value
 * @return {!proto.dvote.types.v1.Tx} returns this
*/
proto.dvote.types.v1.Tx.prototype.setAdmin = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.dvote.types.v1.Tx.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dvote.types.v1.Tx} returns this
 */
proto.dvote.types.v1.Tx.prototype.clearAdmin = function() {
  return this.setAdmin(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dvote.types.v1.Tx.prototype.hasAdmin = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional SetProcessTx setProcess = 4;
 * @return {?proto.dvote.types.v1.SetProcessTx}
 */
proto.dvote.types.v1.Tx.prototype.getSetprocess = function() {
  return /** @type{?proto.dvote.types.v1.SetProcessTx} */ (
    jspb.Message.getWrapperField(this, proto.dvote.types.v1.SetProcessTx, 4));
};


/**
 * @param {?proto.dvote.types.v1.SetProcessTx|undefined} value
 * @return {!proto.dvote.types.v1.Tx} returns this
*/
proto.dvote.types.v1.Tx.prototype.setSetprocess = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.dvote.types.v1.Tx.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dvote.types.v1.Tx} returns this
 */
proto.dvote.types.v1.Tx.prototype.clearSetprocess = function() {
  return this.setSetprocess(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dvote.types.v1.Tx.prototype.hasSetprocess = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dvote.types.v1.SignedTx.prototype.toObject = function(opt_includeInstance) {
  return proto.dvote.types.v1.SignedTx.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dvote.types.v1.SignedTx} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dvote.types.v1.SignedTx.toObject = function(includeInstance, msg) {
  var f, obj = {
    tx: msg.getTx_asB64(),
    signature: msg.getSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dvote.types.v1.SignedTx}
 */
proto.dvote.types.v1.SignedTx.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dvote.types.v1.SignedTx;
  return proto.dvote.types.v1.SignedTx.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dvote.types.v1.SignedTx} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dvote.types.v1.SignedTx}
 */
proto.dvote.types.v1.SignedTx.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTx(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.SignedTx.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dvote.types.v1.SignedTx.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dvote.types.v1.SignedTx} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dvote.types.v1.SignedTx.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTx_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes tx = 1;
 * @return {!(string|Uint8Array)}
 */
proto.dvote.types.v1.SignedTx.prototype.getTx = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes tx = 1;
 * This is a type-conversion wrapper around `getTx()`
 * @return {string}
 */
proto.dvote.types.v1.SignedTx.prototype.getTx_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTx()));
};


/**
 * optional bytes tx = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTx()`
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.SignedTx.prototype.getTx_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTx()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.dvote.types.v1.SignedTx} returns this
 */
proto.dvote.types.v1.SignedTx.prototype.setTx = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes signature = 2;
 * @return {!(string|Uint8Array)}
 */
proto.dvote.types.v1.SignedTx.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes signature = 2;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.dvote.types.v1.SignedTx.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.SignedTx.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.dvote.types.v1.SignedTx} returns this
 */
proto.dvote.types.v1.SignedTx.prototype.setSignature = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.dvote.types.v1.SignedTx} returns this
 */
proto.dvote.types.v1.SignedTx.prototype.clearSignature = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dvote.types.v1.SignedTx.prototype.hasSignature = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dvote.types.v1.NewProcessTx.prototype.toObject = function(opt_includeInstance) {
  return proto.dvote.types.v1.NewProcessTx.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dvote.types.v1.NewProcessTx} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dvote.types.v1.NewProcessTx.toObject = function(includeInstance, msg) {
  var f, obj = {
    txtype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    nonce: msg.getNonce_asB64(),
    process: (f = msg.getProcess()) && proto.dvote.types.v1.Process.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dvote.types.v1.NewProcessTx}
 */
proto.dvote.types.v1.NewProcessTx.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dvote.types.v1.NewProcessTx;
  return proto.dvote.types.v1.NewProcessTx.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dvote.types.v1.NewProcessTx} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dvote.types.v1.NewProcessTx}
 */
proto.dvote.types.v1.NewProcessTx.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.dvote.types.v1.TxType} */ (reader.readEnum());
      msg.setTxtype(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNonce(value);
      break;
    case 3:
      var value = new proto.dvote.types.v1.Process;
      reader.readMessage(value,proto.dvote.types.v1.Process.deserializeBinaryFromReader);
      msg.setProcess(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.NewProcessTx.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dvote.types.v1.NewProcessTx.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dvote.types.v1.NewProcessTx} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dvote.types.v1.NewProcessTx.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTxtype();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getNonce_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getProcess();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.dvote.types.v1.Process.serializeBinaryToWriter
    );
  }
};


/**
 * optional TxType txtype = 1;
 * @return {!proto.dvote.types.v1.TxType}
 */
proto.dvote.types.v1.NewProcessTx.prototype.getTxtype = function() {
  return /** @type {!proto.dvote.types.v1.TxType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.dvote.types.v1.TxType} value
 * @return {!proto.dvote.types.v1.NewProcessTx} returns this
 */
proto.dvote.types.v1.NewProcessTx.prototype.setTxtype = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bytes nonce = 2;
 * @return {!(string|Uint8Array)}
 */
proto.dvote.types.v1.NewProcessTx.prototype.getNonce = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes nonce = 2;
 * This is a type-conversion wrapper around `getNonce()`
 * @return {string}
 */
proto.dvote.types.v1.NewProcessTx.prototype.getNonce_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNonce()));
};


/**
 * optional bytes nonce = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNonce()`
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.NewProcessTx.prototype.getNonce_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNonce()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.dvote.types.v1.NewProcessTx} returns this
 */
proto.dvote.types.v1.NewProcessTx.prototype.setNonce = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional Process process = 3;
 * @return {?proto.dvote.types.v1.Process}
 */
proto.dvote.types.v1.NewProcessTx.prototype.getProcess = function() {
  return /** @type{?proto.dvote.types.v1.Process} */ (
    jspb.Message.getWrapperField(this, proto.dvote.types.v1.Process, 3));
};


/**
 * @param {?proto.dvote.types.v1.Process|undefined} value
 * @return {!proto.dvote.types.v1.NewProcessTx} returns this
*/
proto.dvote.types.v1.NewProcessTx.prototype.setProcess = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dvote.types.v1.NewProcessTx} returns this
 */
proto.dvote.types.v1.NewProcessTx.prototype.clearProcess = function() {
  return this.setProcess(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dvote.types.v1.NewProcessTx.prototype.hasProcess = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dvote.types.v1.SetProcessTx.prototype.toObject = function(opt_includeInstance) {
  return proto.dvote.types.v1.SetProcessTx.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dvote.types.v1.SetProcessTx} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dvote.types.v1.SetProcessTx.toObject = function(includeInstance, msg) {
  var f, obj = {
    txtype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    nonce: msg.getNonce_asB64(),
    processid: msg.getProcessid_asB64(),
    status: jspb.Message.getFieldWithDefault(msg, 4, 0),
    questionindex: jspb.Message.getFieldWithDefault(msg, 5, 0),
    censusroot: msg.getCensusroot_asB64(),
    censusuri: jspb.Message.getFieldWithDefault(msg, 7, ""),
    proof: (f = msg.getProof()) && proto.dvote.types.v1.Proof.toObject(includeInstance, f),
    results: (f = msg.getResults()) && proto.dvote.types.v1.ProcessResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dvote.types.v1.SetProcessTx}
 */
proto.dvote.types.v1.SetProcessTx.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dvote.types.v1.SetProcessTx;
  return proto.dvote.types.v1.SetProcessTx.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dvote.types.v1.SetProcessTx} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dvote.types.v1.SetProcessTx}
 */
proto.dvote.types.v1.SetProcessTx.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.dvote.types.v1.TxType} */ (reader.readEnum());
      msg.setTxtype(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNonce(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProcessid(value);
      break;
    case 4:
      var value = /** @type {!proto.dvote.types.v1.ProcessStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setQuestionindex(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCensusroot(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setCensusuri(value);
      break;
    case 8:
      var value = new proto.dvote.types.v1.Proof;
      reader.readMessage(value,proto.dvote.types.v1.Proof.deserializeBinaryFromReader);
      msg.setProof(value);
      break;
    case 9:
      var value = new proto.dvote.types.v1.ProcessResult;
      reader.readMessage(value,proto.dvote.types.v1.ProcessResult.deserializeBinaryFromReader);
      msg.setResults(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.SetProcessTx.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dvote.types.v1.SetProcessTx.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dvote.types.v1.SetProcessTx} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dvote.types.v1.SetProcessTx.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTxtype();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getNonce_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getProcessid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = /** @type {!proto.dvote.types.v1.ProcessStatus} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getProof();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.dvote.types.v1.Proof.serializeBinaryToWriter
    );
  }
  f = message.getResults();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.dvote.types.v1.ProcessResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional TxType txtype = 1;
 * @return {!proto.dvote.types.v1.TxType}
 */
proto.dvote.types.v1.SetProcessTx.prototype.getTxtype = function() {
  return /** @type {!proto.dvote.types.v1.TxType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.dvote.types.v1.TxType} value
 * @return {!proto.dvote.types.v1.SetProcessTx} returns this
 */
proto.dvote.types.v1.SetProcessTx.prototype.setTxtype = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bytes nonce = 2;
 * @return {!(string|Uint8Array)}
 */
proto.dvote.types.v1.SetProcessTx.prototype.getNonce = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes nonce = 2;
 * This is a type-conversion wrapper around `getNonce()`
 * @return {string}
 */
proto.dvote.types.v1.SetProcessTx.prototype.getNonce_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNonce()));
};


/**
 * optional bytes nonce = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNonce()`
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.SetProcessTx.prototype.getNonce_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNonce()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.dvote.types.v1.SetProcessTx} returns this
 */
proto.dvote.types.v1.SetProcessTx.prototype.setNonce = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes processId = 3;
 * @return {!(string|Uint8Array)}
 */
proto.dvote.types.v1.SetProcessTx.prototype.getProcessid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes processId = 3;
 * This is a type-conversion wrapper around `getProcessid()`
 * @return {string}
 */
proto.dvote.types.v1.SetProcessTx.prototype.getProcessid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProcessid()));
};


/**
 * optional bytes processId = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProcessid()`
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.SetProcessTx.prototype.getProcessid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProcessid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.dvote.types.v1.SetProcessTx} returns this
 */
proto.dvote.types.v1.SetProcessTx.prototype.setProcessid = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional ProcessStatus status = 4;
 * @return {!proto.dvote.types.v1.ProcessStatus}
 */
proto.dvote.types.v1.SetProcessTx.prototype.getStatus = function() {
  return /** @type {!proto.dvote.types.v1.ProcessStatus} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.dvote.types.v1.ProcessStatus} value
 * @return {!proto.dvote.types.v1.SetProcessTx} returns this
 */
proto.dvote.types.v1.SetProcessTx.prototype.setStatus = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.dvote.types.v1.SetProcessTx} returns this
 */
proto.dvote.types.v1.SetProcessTx.prototype.clearStatus = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dvote.types.v1.SetProcessTx.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint32 questionIndex = 5;
 * @return {number}
 */
proto.dvote.types.v1.SetProcessTx.prototype.getQuestionindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.dvote.types.v1.SetProcessTx} returns this
 */
proto.dvote.types.v1.SetProcessTx.prototype.setQuestionindex = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.dvote.types.v1.SetProcessTx} returns this
 */
proto.dvote.types.v1.SetProcessTx.prototype.clearQuestionindex = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dvote.types.v1.SetProcessTx.prototype.hasQuestionindex = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bytes censusRoot = 6;
 * @return {!(string|Uint8Array)}
 */
proto.dvote.types.v1.SetProcessTx.prototype.getCensusroot = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes censusRoot = 6;
 * This is a type-conversion wrapper around `getCensusroot()`
 * @return {string}
 */
proto.dvote.types.v1.SetProcessTx.prototype.getCensusroot_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCensusroot()));
};


/**
 * optional bytes censusRoot = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCensusroot()`
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.SetProcessTx.prototype.getCensusroot_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCensusroot()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.dvote.types.v1.SetProcessTx} returns this
 */
proto.dvote.types.v1.SetProcessTx.prototype.setCensusroot = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.dvote.types.v1.SetProcessTx} returns this
 */
proto.dvote.types.v1.SetProcessTx.prototype.clearCensusroot = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dvote.types.v1.SetProcessTx.prototype.hasCensusroot = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string censusURI = 7;
 * @return {string}
 */
proto.dvote.types.v1.SetProcessTx.prototype.getCensusuri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.dvote.types.v1.SetProcessTx} returns this
 */
proto.dvote.types.v1.SetProcessTx.prototype.setCensusuri = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.dvote.types.v1.SetProcessTx} returns this
 */
proto.dvote.types.v1.SetProcessTx.prototype.clearCensusuri = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dvote.types.v1.SetProcessTx.prototype.hasCensusuri = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional Proof proof = 8;
 * @return {?proto.dvote.types.v1.Proof}
 */
proto.dvote.types.v1.SetProcessTx.prototype.getProof = function() {
  return /** @type{?proto.dvote.types.v1.Proof} */ (
    jspb.Message.getWrapperField(this, proto.dvote.types.v1.Proof, 8));
};


/**
 * @param {?proto.dvote.types.v1.Proof|undefined} value
 * @return {!proto.dvote.types.v1.SetProcessTx} returns this
*/
proto.dvote.types.v1.SetProcessTx.prototype.setProof = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dvote.types.v1.SetProcessTx} returns this
 */
proto.dvote.types.v1.SetProcessTx.prototype.clearProof = function() {
  return this.setProof(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dvote.types.v1.SetProcessTx.prototype.hasProof = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional ProcessResult results = 9;
 * @return {?proto.dvote.types.v1.ProcessResult}
 */
proto.dvote.types.v1.SetProcessTx.prototype.getResults = function() {
  return /** @type{?proto.dvote.types.v1.ProcessResult} */ (
    jspb.Message.getWrapperField(this, proto.dvote.types.v1.ProcessResult, 9));
};


/**
 * @param {?proto.dvote.types.v1.ProcessResult|undefined} value
 * @return {!proto.dvote.types.v1.SetProcessTx} returns this
*/
proto.dvote.types.v1.SetProcessTx.prototype.setResults = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dvote.types.v1.SetProcessTx} returns this
 */
proto.dvote.types.v1.SetProcessTx.prototype.clearResults = function() {
  return this.setResults(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dvote.types.v1.SetProcessTx.prototype.hasResults = function() {
  return jspb.Message.getField(this, 9) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dvote.types.v1.AdminTx.prototype.toObject = function(opt_includeInstance) {
  return proto.dvote.types.v1.AdminTx.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dvote.types.v1.AdminTx} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dvote.types.v1.AdminTx.toObject = function(includeInstance, msg) {
  var f, obj = {
    txtype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    processid: msg.getProcessid_asB64(),
    address: msg.getAddress_asB64(),
    commitmentkey: msg.getCommitmentkey_asB64(),
    encryptionprivatekey: msg.getEncryptionprivatekey_asB64(),
    encryptionpublickey: msg.getEncryptionpublickey_asB64(),
    keyindex: jspb.Message.getFieldWithDefault(msg, 7, 0),
    power: jspb.Message.getFieldWithDefault(msg, 8, 0),
    publickey: msg.getPublickey_asB64(),
    revealkey: msg.getRevealkey_asB64(),
    nonce: msg.getNonce_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dvote.types.v1.AdminTx}
 */
proto.dvote.types.v1.AdminTx.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dvote.types.v1.AdminTx;
  return proto.dvote.types.v1.AdminTx.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dvote.types.v1.AdminTx} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dvote.types.v1.AdminTx}
 */
proto.dvote.types.v1.AdminTx.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.dvote.types.v1.TxType} */ (reader.readEnum());
      msg.setTxtype(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProcessid(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAddress(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCommitmentkey(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEncryptionprivatekey(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEncryptionpublickey(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setKeyindex(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPower(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPublickey(value);
      break;
    case 10:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRevealkey(value);
      break;
    case 11:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNonce(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.AdminTx.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dvote.types.v1.AdminTx.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dvote.types.v1.AdminTx} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dvote.types.v1.AdminTx.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTxtype();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getProcessid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeUint64(
      8,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeBytes(
      9,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeBytes(
      10,
      f
    );
  }
  f = message.getNonce_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      11,
      f
    );
  }
};


/**
 * optional TxType txtype = 1;
 * @return {!proto.dvote.types.v1.TxType}
 */
proto.dvote.types.v1.AdminTx.prototype.getTxtype = function() {
  return /** @type {!proto.dvote.types.v1.TxType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.dvote.types.v1.TxType} value
 * @return {!proto.dvote.types.v1.AdminTx} returns this
 */
proto.dvote.types.v1.AdminTx.prototype.setTxtype = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bytes processId = 2;
 * @return {!(string|Uint8Array)}
 */
proto.dvote.types.v1.AdminTx.prototype.getProcessid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes processId = 2;
 * This is a type-conversion wrapper around `getProcessid()`
 * @return {string}
 */
proto.dvote.types.v1.AdminTx.prototype.getProcessid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProcessid()));
};


/**
 * optional bytes processId = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProcessid()`
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.AdminTx.prototype.getProcessid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProcessid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.dvote.types.v1.AdminTx} returns this
 */
proto.dvote.types.v1.AdminTx.prototype.setProcessid = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes address = 3;
 * @return {!(string|Uint8Array)}
 */
proto.dvote.types.v1.AdminTx.prototype.getAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes address = 3;
 * This is a type-conversion wrapper around `getAddress()`
 * @return {string}
 */
proto.dvote.types.v1.AdminTx.prototype.getAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAddress()));
};


/**
 * optional bytes address = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddress()`
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.AdminTx.prototype.getAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.dvote.types.v1.AdminTx} returns this
 */
proto.dvote.types.v1.AdminTx.prototype.setAddress = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.dvote.types.v1.AdminTx} returns this
 */
proto.dvote.types.v1.AdminTx.prototype.clearAddress = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dvote.types.v1.AdminTx.prototype.hasAddress = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bytes commitmentKey = 4;
 * @return {!(string|Uint8Array)}
 */
proto.dvote.types.v1.AdminTx.prototype.getCommitmentkey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes commitmentKey = 4;
 * This is a type-conversion wrapper around `getCommitmentkey()`
 * @return {string}
 */
proto.dvote.types.v1.AdminTx.prototype.getCommitmentkey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCommitmentkey()));
};


/**
 * optional bytes commitmentKey = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCommitmentkey()`
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.AdminTx.prototype.getCommitmentkey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCommitmentkey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.dvote.types.v1.AdminTx} returns this
 */
proto.dvote.types.v1.AdminTx.prototype.setCommitmentkey = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.dvote.types.v1.AdminTx} returns this
 */
proto.dvote.types.v1.AdminTx.prototype.clearCommitmentkey = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dvote.types.v1.AdminTx.prototype.hasCommitmentkey = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bytes encryptionPrivateKey = 5;
 * @return {!(string|Uint8Array)}
 */
proto.dvote.types.v1.AdminTx.prototype.getEncryptionprivatekey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes encryptionPrivateKey = 5;
 * This is a type-conversion wrapper around `getEncryptionprivatekey()`
 * @return {string}
 */
proto.dvote.types.v1.AdminTx.prototype.getEncryptionprivatekey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEncryptionprivatekey()));
};


/**
 * optional bytes encryptionPrivateKey = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEncryptionprivatekey()`
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.AdminTx.prototype.getEncryptionprivatekey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEncryptionprivatekey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.dvote.types.v1.AdminTx} returns this
 */
proto.dvote.types.v1.AdminTx.prototype.setEncryptionprivatekey = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.dvote.types.v1.AdminTx} returns this
 */
proto.dvote.types.v1.AdminTx.prototype.clearEncryptionprivatekey = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dvote.types.v1.AdminTx.prototype.hasEncryptionprivatekey = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bytes encryptionPublicKey = 6;
 * @return {!(string|Uint8Array)}
 */
proto.dvote.types.v1.AdminTx.prototype.getEncryptionpublickey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes encryptionPublicKey = 6;
 * This is a type-conversion wrapper around `getEncryptionpublickey()`
 * @return {string}
 */
proto.dvote.types.v1.AdminTx.prototype.getEncryptionpublickey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEncryptionpublickey()));
};


/**
 * optional bytes encryptionPublicKey = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEncryptionpublickey()`
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.AdminTx.prototype.getEncryptionpublickey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEncryptionpublickey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.dvote.types.v1.AdminTx} returns this
 */
proto.dvote.types.v1.AdminTx.prototype.setEncryptionpublickey = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.dvote.types.v1.AdminTx} returns this
 */
proto.dvote.types.v1.AdminTx.prototype.clearEncryptionpublickey = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dvote.types.v1.AdminTx.prototype.hasEncryptionpublickey = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional uint32 keyIndex = 7;
 * @return {number}
 */
proto.dvote.types.v1.AdminTx.prototype.getKeyindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.dvote.types.v1.AdminTx} returns this
 */
proto.dvote.types.v1.AdminTx.prototype.setKeyindex = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.dvote.types.v1.AdminTx} returns this
 */
proto.dvote.types.v1.AdminTx.prototype.clearKeyindex = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dvote.types.v1.AdminTx.prototype.hasKeyindex = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional uint64 power = 8;
 * @return {number}
 */
proto.dvote.types.v1.AdminTx.prototype.getPower = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.dvote.types.v1.AdminTx} returns this
 */
proto.dvote.types.v1.AdminTx.prototype.setPower = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.dvote.types.v1.AdminTx} returns this
 */
proto.dvote.types.v1.AdminTx.prototype.clearPower = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dvote.types.v1.AdminTx.prototype.hasPower = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional bytes publicKey = 9;
 * @return {!(string|Uint8Array)}
 */
proto.dvote.types.v1.AdminTx.prototype.getPublickey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * optional bytes publicKey = 9;
 * This is a type-conversion wrapper around `getPublickey()`
 * @return {string}
 */
proto.dvote.types.v1.AdminTx.prototype.getPublickey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPublickey()));
};


/**
 * optional bytes publicKey = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPublickey()`
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.AdminTx.prototype.getPublickey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPublickey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.dvote.types.v1.AdminTx} returns this
 */
proto.dvote.types.v1.AdminTx.prototype.setPublickey = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.dvote.types.v1.AdminTx} returns this
 */
proto.dvote.types.v1.AdminTx.prototype.clearPublickey = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dvote.types.v1.AdminTx.prototype.hasPublickey = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional bytes revealKey = 10;
 * @return {!(string|Uint8Array)}
 */
proto.dvote.types.v1.AdminTx.prototype.getRevealkey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * optional bytes revealKey = 10;
 * This is a type-conversion wrapper around `getRevealkey()`
 * @return {string}
 */
proto.dvote.types.v1.AdminTx.prototype.getRevealkey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRevealkey()));
};


/**
 * optional bytes revealKey = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRevealkey()`
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.AdminTx.prototype.getRevealkey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRevealkey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.dvote.types.v1.AdminTx} returns this
 */
proto.dvote.types.v1.AdminTx.prototype.setRevealkey = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.dvote.types.v1.AdminTx} returns this
 */
proto.dvote.types.v1.AdminTx.prototype.clearRevealkey = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dvote.types.v1.AdminTx.prototype.hasRevealkey = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional bytes nonce = 11;
 * @return {!(string|Uint8Array)}
 */
proto.dvote.types.v1.AdminTx.prototype.getNonce = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * optional bytes nonce = 11;
 * This is a type-conversion wrapper around `getNonce()`
 * @return {string}
 */
proto.dvote.types.v1.AdminTx.prototype.getNonce_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNonce()));
};


/**
 * optional bytes nonce = 11;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNonce()`
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.AdminTx.prototype.getNonce_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNonce()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.dvote.types.v1.AdminTx} returns this
 */
proto.dvote.types.v1.AdminTx.prototype.setNonce = function(value) {
  return jspb.Message.setProto3BytesField(this, 11, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.dvote.types.v1.Process.repeatedFields_ = [7,8,9,10,22];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dvote.types.v1.Process.prototype.toObject = function(opt_includeInstance) {
  return proto.dvote.types.v1.Process.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dvote.types.v1.Process} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dvote.types.v1.Process.toObject = function(includeInstance, msg) {
  var f, obj = {
    processid: msg.getProcessid_asB64(),
    entityid: msg.getEntityid_asB64(),
    startblock: jspb.Message.getFieldWithDefault(msg, 3, 0),
    blockcount: jspb.Message.getFieldWithDefault(msg, 4, 0),
    censusroot: msg.getCensusroot_asB64(),
    censusuri: jspb.Message.getFieldWithDefault(msg, 6, ""),
    commitmentkeysList: (f = jspb.Message.getRepeatedField(msg, 7)) == null ? undefined : f,
    encryptionprivatekeysList: (f = jspb.Message.getRepeatedField(msg, 8)) == null ? undefined : f,
    encryptionpublickeysList: (f = jspb.Message.getRepeatedField(msg, 9)) == null ? undefined : f,
    revealkeysList: (f = jspb.Message.getRepeatedField(msg, 10)) == null ? undefined : f,
    keyindex: jspb.Message.getFieldWithDefault(msg, 11, 0),
    status: jspb.Message.getFieldWithDefault(msg, 12, 0),
    paramssignature: msg.getParamssignature_asB64(),
    namespace: jspb.Message.getFieldWithDefault(msg, 14, 0),
    envelopetype: (f = msg.getEnvelopetype()) && proto.dvote.types.v1.EnvelopeType.toObject(includeInstance, f),
    mode: (f = msg.getMode()) && proto.dvote.types.v1.ProcessMode.toObject(includeInstance, f),
    questionindex: jspb.Message.getFieldWithDefault(msg, 17, 0),
    questioncount: jspb.Message.getFieldWithDefault(msg, 18, 0),
    voteoptions: (f = msg.getVoteoptions()) && proto.dvote.types.v1.ProcessVoteOptions.toObject(includeInstance, f),
    censusorigin: jspb.Message.getFieldWithDefault(msg, 20, 0),
    results: (f = msg.getResults()) && proto.dvote.types.v1.ProcessResult.toObject(includeInstance, f),
    resultssignaturesList: msg.getResultssignaturesList_asB64(),
    ethindexslot: jspb.Message.getFieldWithDefault(msg, 23, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dvote.types.v1.Process}
 */
proto.dvote.types.v1.Process.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dvote.types.v1.Process;
  return proto.dvote.types.v1.Process.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dvote.types.v1.Process} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dvote.types.v1.Process}
 */
proto.dvote.types.v1.Process.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProcessid(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEntityid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStartblock(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBlockcount(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCensusroot(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCensusuri(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.addCommitmentkeys(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.addEncryptionprivatekeys(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.addEncryptionpublickeys(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.addRevealkeys(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setKeyindex(value);
      break;
    case 12:
      var value = /** @type {!proto.dvote.types.v1.ProcessStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 13:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setParamssignature(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNamespace(value);
      break;
    case 15:
      var value = new proto.dvote.types.v1.EnvelopeType;
      reader.readMessage(value,proto.dvote.types.v1.EnvelopeType.deserializeBinaryFromReader);
      msg.setEnvelopetype(value);
      break;
    case 16:
      var value = new proto.dvote.types.v1.ProcessMode;
      reader.readMessage(value,proto.dvote.types.v1.ProcessMode.deserializeBinaryFromReader);
      msg.setMode(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setQuestionindex(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setQuestioncount(value);
      break;
    case 19:
      var value = new proto.dvote.types.v1.ProcessVoteOptions;
      reader.readMessage(value,proto.dvote.types.v1.ProcessVoteOptions.deserializeBinaryFromReader);
      msg.setVoteoptions(value);
      break;
    case 20:
      var value = /** @type {!proto.dvote.types.v1.CensusOrigin} */ (reader.readEnum());
      msg.setCensusorigin(value);
      break;
    case 21:
      var value = new proto.dvote.types.v1.ProcessResult;
      reader.readMessage(value,proto.dvote.types.v1.ProcessResult.deserializeBinaryFromReader);
      msg.setResults(value);
      break;
    case 22:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addResultssignatures(value);
      break;
    case 23:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEthindexslot(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.Process.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dvote.types.v1.Process.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dvote.types.v1.Process} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dvote.types.v1.Process.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProcessid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getEntityid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getStartblock();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getBlockcount();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getCensusroot_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getCommitmentkeysList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      7,
      f
    );
  }
  f = message.getEncryptionprivatekeysList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      8,
      f
    );
  }
  f = message.getEncryptionpublickeysList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      9,
      f
    );
  }
  f = message.getRevealkeysList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeUint32(
      11,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      12,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeBytes(
      13,
      f
    );
  }
  f = message.getNamespace();
  if (f !== 0) {
    writer.writeUint32(
      14,
      f
    );
  }
  f = message.getEnvelopetype();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.dvote.types.v1.EnvelopeType.serializeBinaryToWriter
    );
  }
  f = message.getMode();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.dvote.types.v1.ProcessMode.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeUint32(
      17,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 18));
  if (f != null) {
    writer.writeUint32(
      18,
      f
    );
  }
  f = message.getVoteoptions();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      proto.dvote.types.v1.ProcessVoteOptions.serializeBinaryToWriter
    );
  }
  f = message.getCensusorigin();
  if (f !== 0.0) {
    writer.writeEnum(
      20,
      f
    );
  }
  f = message.getResults();
  if (f != null) {
    writer.writeMessage(
      21,
      f,
      proto.dvote.types.v1.ProcessResult.serializeBinaryToWriter
    );
  }
  f = message.getResultssignaturesList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      22,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 23));
  if (f != null) {
    writer.writeUint32(
      23,
      f
    );
  }
};


/**
 * optional bytes processId = 1;
 * @return {!(string|Uint8Array)}
 */
proto.dvote.types.v1.Process.prototype.getProcessid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes processId = 1;
 * This is a type-conversion wrapper around `getProcessid()`
 * @return {string}
 */
proto.dvote.types.v1.Process.prototype.getProcessid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProcessid()));
};


/**
 * optional bytes processId = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProcessid()`
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.Process.prototype.getProcessid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProcessid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.dvote.types.v1.Process} returns this
 */
proto.dvote.types.v1.Process.prototype.setProcessid = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes entityId = 2;
 * @return {!(string|Uint8Array)}
 */
proto.dvote.types.v1.Process.prototype.getEntityid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes entityId = 2;
 * This is a type-conversion wrapper around `getEntityid()`
 * @return {string}
 */
proto.dvote.types.v1.Process.prototype.getEntityid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEntityid()));
};


/**
 * optional bytes entityId = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEntityid()`
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.Process.prototype.getEntityid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEntityid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.dvote.types.v1.Process} returns this
 */
proto.dvote.types.v1.Process.prototype.setEntityid = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional uint32 startBlock = 3;
 * @return {number}
 */
proto.dvote.types.v1.Process.prototype.getStartblock = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.dvote.types.v1.Process} returns this
 */
proto.dvote.types.v1.Process.prototype.setStartblock = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 blockCount = 4;
 * @return {number}
 */
proto.dvote.types.v1.Process.prototype.getBlockcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.dvote.types.v1.Process} returns this
 */
proto.dvote.types.v1.Process.prototype.setBlockcount = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bytes censusRoot = 5;
 * @return {!(string|Uint8Array)}
 */
proto.dvote.types.v1.Process.prototype.getCensusroot = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes censusRoot = 5;
 * This is a type-conversion wrapper around `getCensusroot()`
 * @return {string}
 */
proto.dvote.types.v1.Process.prototype.getCensusroot_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCensusroot()));
};


/**
 * optional bytes censusRoot = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCensusroot()`
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.Process.prototype.getCensusroot_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCensusroot()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.dvote.types.v1.Process} returns this
 */
proto.dvote.types.v1.Process.prototype.setCensusroot = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional string censusURI = 6;
 * @return {string}
 */
proto.dvote.types.v1.Process.prototype.getCensusuri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.dvote.types.v1.Process} returns this
 */
proto.dvote.types.v1.Process.prototype.setCensusuri = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.dvote.types.v1.Process} returns this
 */
proto.dvote.types.v1.Process.prototype.clearCensusuri = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dvote.types.v1.Process.prototype.hasCensusuri = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * repeated string commitmentKeys = 7;
 * @return {!Array<string>}
 */
proto.dvote.types.v1.Process.prototype.getCommitmentkeysList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 7));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.dvote.types.v1.Process} returns this
 */
proto.dvote.types.v1.Process.prototype.setCommitmentkeysList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.dvote.types.v1.Process} returns this
 */
proto.dvote.types.v1.Process.prototype.addCommitmentkeys = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.dvote.types.v1.Process} returns this
 */
proto.dvote.types.v1.Process.prototype.clearCommitmentkeysList = function() {
  return this.setCommitmentkeysList([]);
};


/**
 * repeated string encryptionPrivateKeys = 8;
 * @return {!Array<string>}
 */
proto.dvote.types.v1.Process.prototype.getEncryptionprivatekeysList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 8));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.dvote.types.v1.Process} returns this
 */
proto.dvote.types.v1.Process.prototype.setEncryptionprivatekeysList = function(value) {
  return jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.dvote.types.v1.Process} returns this
 */
proto.dvote.types.v1.Process.prototype.addEncryptionprivatekeys = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.dvote.types.v1.Process} returns this
 */
proto.dvote.types.v1.Process.prototype.clearEncryptionprivatekeysList = function() {
  return this.setEncryptionprivatekeysList([]);
};


/**
 * repeated string encryptionPublicKeys = 9;
 * @return {!Array<string>}
 */
proto.dvote.types.v1.Process.prototype.getEncryptionpublickeysList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 9));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.dvote.types.v1.Process} returns this
 */
proto.dvote.types.v1.Process.prototype.setEncryptionpublickeysList = function(value) {
  return jspb.Message.setField(this, 9, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.dvote.types.v1.Process} returns this
 */
proto.dvote.types.v1.Process.prototype.addEncryptionpublickeys = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 9, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.dvote.types.v1.Process} returns this
 */
proto.dvote.types.v1.Process.prototype.clearEncryptionpublickeysList = function() {
  return this.setEncryptionpublickeysList([]);
};


/**
 * repeated string revealKeys = 10;
 * @return {!Array<string>}
 */
proto.dvote.types.v1.Process.prototype.getRevealkeysList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 10));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.dvote.types.v1.Process} returns this
 */
proto.dvote.types.v1.Process.prototype.setRevealkeysList = function(value) {
  return jspb.Message.setField(this, 10, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.dvote.types.v1.Process} returns this
 */
proto.dvote.types.v1.Process.prototype.addRevealkeys = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 10, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.dvote.types.v1.Process} returns this
 */
proto.dvote.types.v1.Process.prototype.clearRevealkeysList = function() {
  return this.setRevealkeysList([]);
};


/**
 * optional uint32 keyIndex = 11;
 * @return {number}
 */
proto.dvote.types.v1.Process.prototype.getKeyindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.dvote.types.v1.Process} returns this
 */
proto.dvote.types.v1.Process.prototype.setKeyindex = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.dvote.types.v1.Process} returns this
 */
proto.dvote.types.v1.Process.prototype.clearKeyindex = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dvote.types.v1.Process.prototype.hasKeyindex = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional ProcessStatus status = 12;
 * @return {!proto.dvote.types.v1.ProcessStatus}
 */
proto.dvote.types.v1.Process.prototype.getStatus = function() {
  return /** @type {!proto.dvote.types.v1.ProcessStatus} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {!proto.dvote.types.v1.ProcessStatus} value
 * @return {!proto.dvote.types.v1.Process} returns this
 */
proto.dvote.types.v1.Process.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 12, value);
};


/**
 * optional bytes paramsSignature = 13;
 * @return {!(string|Uint8Array)}
 */
proto.dvote.types.v1.Process.prototype.getParamssignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * optional bytes paramsSignature = 13;
 * This is a type-conversion wrapper around `getParamssignature()`
 * @return {string}
 */
proto.dvote.types.v1.Process.prototype.getParamssignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getParamssignature()));
};


/**
 * optional bytes paramsSignature = 13;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getParamssignature()`
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.Process.prototype.getParamssignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getParamssignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.dvote.types.v1.Process} returns this
 */
proto.dvote.types.v1.Process.prototype.setParamssignature = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.dvote.types.v1.Process} returns this
 */
proto.dvote.types.v1.Process.prototype.clearParamssignature = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dvote.types.v1.Process.prototype.hasParamssignature = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional uint32 namespace = 14;
 * @return {number}
 */
proto.dvote.types.v1.Process.prototype.getNamespace = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.dvote.types.v1.Process} returns this
 */
proto.dvote.types.v1.Process.prototype.setNamespace = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional EnvelopeType envelopeType = 15;
 * @return {?proto.dvote.types.v1.EnvelopeType}
 */
proto.dvote.types.v1.Process.prototype.getEnvelopetype = function() {
  return /** @type{?proto.dvote.types.v1.EnvelopeType} */ (
    jspb.Message.getWrapperField(this, proto.dvote.types.v1.EnvelopeType, 15));
};


/**
 * @param {?proto.dvote.types.v1.EnvelopeType|undefined} value
 * @return {!proto.dvote.types.v1.Process} returns this
*/
proto.dvote.types.v1.Process.prototype.setEnvelopetype = function(value) {
  return jspb.Message.setWrapperField(this, 15, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dvote.types.v1.Process} returns this
 */
proto.dvote.types.v1.Process.prototype.clearEnvelopetype = function() {
  return this.setEnvelopetype(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dvote.types.v1.Process.prototype.hasEnvelopetype = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional ProcessMode mode = 16;
 * @return {?proto.dvote.types.v1.ProcessMode}
 */
proto.dvote.types.v1.Process.prototype.getMode = function() {
  return /** @type{?proto.dvote.types.v1.ProcessMode} */ (
    jspb.Message.getWrapperField(this, proto.dvote.types.v1.ProcessMode, 16));
};


/**
 * @param {?proto.dvote.types.v1.ProcessMode|undefined} value
 * @return {!proto.dvote.types.v1.Process} returns this
*/
proto.dvote.types.v1.Process.prototype.setMode = function(value) {
  return jspb.Message.setWrapperField(this, 16, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dvote.types.v1.Process} returns this
 */
proto.dvote.types.v1.Process.prototype.clearMode = function() {
  return this.setMode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dvote.types.v1.Process.prototype.hasMode = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional uint32 questionIndex = 17;
 * @return {number}
 */
proto.dvote.types.v1.Process.prototype.getQuestionindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/**
 * @param {number} value
 * @return {!proto.dvote.types.v1.Process} returns this
 */
proto.dvote.types.v1.Process.prototype.setQuestionindex = function(value) {
  return jspb.Message.setField(this, 17, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.dvote.types.v1.Process} returns this
 */
proto.dvote.types.v1.Process.prototype.clearQuestionindex = function() {
  return jspb.Message.setField(this, 17, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dvote.types.v1.Process.prototype.hasQuestionindex = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional uint32 questionCount = 18;
 * @return {number}
 */
proto.dvote.types.v1.Process.prototype.getQuestioncount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/**
 * @param {number} value
 * @return {!proto.dvote.types.v1.Process} returns this
 */
proto.dvote.types.v1.Process.prototype.setQuestioncount = function(value) {
  return jspb.Message.setField(this, 18, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.dvote.types.v1.Process} returns this
 */
proto.dvote.types.v1.Process.prototype.clearQuestioncount = function() {
  return jspb.Message.setField(this, 18, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dvote.types.v1.Process.prototype.hasQuestioncount = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional ProcessVoteOptions voteOptions = 19;
 * @return {?proto.dvote.types.v1.ProcessVoteOptions}
 */
proto.dvote.types.v1.Process.prototype.getVoteoptions = function() {
  return /** @type{?proto.dvote.types.v1.ProcessVoteOptions} */ (
    jspb.Message.getWrapperField(this, proto.dvote.types.v1.ProcessVoteOptions, 19));
};


/**
 * @param {?proto.dvote.types.v1.ProcessVoteOptions|undefined} value
 * @return {!proto.dvote.types.v1.Process} returns this
*/
proto.dvote.types.v1.Process.prototype.setVoteoptions = function(value) {
  return jspb.Message.setWrapperField(this, 19, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dvote.types.v1.Process} returns this
 */
proto.dvote.types.v1.Process.prototype.clearVoteoptions = function() {
  return this.setVoteoptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dvote.types.v1.Process.prototype.hasVoteoptions = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional CensusOrigin censusOrigin = 20;
 * @return {!proto.dvote.types.v1.CensusOrigin}
 */
proto.dvote.types.v1.Process.prototype.getCensusorigin = function() {
  return /** @type {!proto.dvote.types.v1.CensusOrigin} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/**
 * @param {!proto.dvote.types.v1.CensusOrigin} value
 * @return {!proto.dvote.types.v1.Process} returns this
 */
proto.dvote.types.v1.Process.prototype.setCensusorigin = function(value) {
  return jspb.Message.setProto3EnumField(this, 20, value);
};


/**
 * optional ProcessResult results = 21;
 * @return {?proto.dvote.types.v1.ProcessResult}
 */
proto.dvote.types.v1.Process.prototype.getResults = function() {
  return /** @type{?proto.dvote.types.v1.ProcessResult} */ (
    jspb.Message.getWrapperField(this, proto.dvote.types.v1.ProcessResult, 21));
};


/**
 * @param {?proto.dvote.types.v1.ProcessResult|undefined} value
 * @return {!proto.dvote.types.v1.Process} returns this
*/
proto.dvote.types.v1.Process.prototype.setResults = function(value) {
  return jspb.Message.setWrapperField(this, 21, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dvote.types.v1.Process} returns this
 */
proto.dvote.types.v1.Process.prototype.clearResults = function() {
  return this.setResults(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dvote.types.v1.Process.prototype.hasResults = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * repeated bytes resultsSignatures = 22;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.dvote.types.v1.Process.prototype.getResultssignaturesList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 22));
};


/**
 * repeated bytes resultsSignatures = 22;
 * This is a type-conversion wrapper around `getResultssignaturesList()`
 * @return {!Array<string>}
 */
proto.dvote.types.v1.Process.prototype.getResultssignaturesList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getResultssignaturesList()));
};


/**
 * repeated bytes resultsSignatures = 22;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getResultssignaturesList()`
 * @return {!Array<!Uint8Array>}
 */
proto.dvote.types.v1.Process.prototype.getResultssignaturesList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getResultssignaturesList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.dvote.types.v1.Process} returns this
 */
proto.dvote.types.v1.Process.prototype.setResultssignaturesList = function(value) {
  return jspb.Message.setField(this, 22, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.dvote.types.v1.Process} returns this
 */
proto.dvote.types.v1.Process.prototype.addResultssignatures = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 22, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.dvote.types.v1.Process} returns this
 */
proto.dvote.types.v1.Process.prototype.clearResultssignaturesList = function() {
  return this.setResultssignaturesList([]);
};


/**
 * optional uint32 ethIndexSlot = 23;
 * @return {number}
 */
proto.dvote.types.v1.Process.prototype.getEthindexslot = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 23, 0));
};


/**
 * @param {number} value
 * @return {!proto.dvote.types.v1.Process} returns this
 */
proto.dvote.types.v1.Process.prototype.setEthindexslot = function(value) {
  return jspb.Message.setField(this, 23, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.dvote.types.v1.Process} returns this
 */
proto.dvote.types.v1.Process.prototype.clearEthindexslot = function() {
  return jspb.Message.setField(this, 23, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dvote.types.v1.Process.prototype.hasEthindexslot = function() {
  return jspb.Message.getField(this, 23) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dvote.types.v1.EnvelopeType.prototype.toObject = function(opt_includeInstance) {
  return proto.dvote.types.v1.EnvelopeType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dvote.types.v1.EnvelopeType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dvote.types.v1.EnvelopeType.toObject = function(includeInstance, msg) {
  var f, obj = {
    serial: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    anonymous: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    encryptedvotes: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    uniquevalues: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dvote.types.v1.EnvelopeType}
 */
proto.dvote.types.v1.EnvelopeType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dvote.types.v1.EnvelopeType;
  return proto.dvote.types.v1.EnvelopeType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dvote.types.v1.EnvelopeType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dvote.types.v1.EnvelopeType}
 */
proto.dvote.types.v1.EnvelopeType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSerial(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAnonymous(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEncryptedvotes(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUniquevalues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.EnvelopeType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dvote.types.v1.EnvelopeType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dvote.types.v1.EnvelopeType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dvote.types.v1.EnvelopeType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSerial();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getAnonymous();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getEncryptedvotes();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getUniquevalues();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional bool serial = 1;
 * @return {boolean}
 */
proto.dvote.types.v1.EnvelopeType.prototype.getSerial = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.dvote.types.v1.EnvelopeType} returns this
 */
proto.dvote.types.v1.EnvelopeType.prototype.setSerial = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool anonymous = 2;
 * @return {boolean}
 */
proto.dvote.types.v1.EnvelopeType.prototype.getAnonymous = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.dvote.types.v1.EnvelopeType} returns this
 */
proto.dvote.types.v1.EnvelopeType.prototype.setAnonymous = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool encryptedVotes = 3;
 * @return {boolean}
 */
proto.dvote.types.v1.EnvelopeType.prototype.getEncryptedvotes = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.dvote.types.v1.EnvelopeType} returns this
 */
proto.dvote.types.v1.EnvelopeType.prototype.setEncryptedvotes = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool uniqueValues = 4;
 * @return {boolean}
 */
proto.dvote.types.v1.EnvelopeType.prototype.getUniquevalues = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.dvote.types.v1.EnvelopeType} returns this
 */
proto.dvote.types.v1.EnvelopeType.prototype.setUniquevalues = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dvote.types.v1.ProcessMode.prototype.toObject = function(opt_includeInstance) {
  return proto.dvote.types.v1.ProcessMode.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dvote.types.v1.ProcessMode} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dvote.types.v1.ProcessMode.toObject = function(includeInstance, msg) {
  var f, obj = {
    autostart: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    interruptible: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    dynamiccensus: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    encryptedmetadata: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dvote.types.v1.ProcessMode}
 */
proto.dvote.types.v1.ProcessMode.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dvote.types.v1.ProcessMode;
  return proto.dvote.types.v1.ProcessMode.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dvote.types.v1.ProcessMode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dvote.types.v1.ProcessMode}
 */
proto.dvote.types.v1.ProcessMode.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAutostart(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setInterruptible(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDynamiccensus(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEncryptedmetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.ProcessMode.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dvote.types.v1.ProcessMode.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dvote.types.v1.ProcessMode} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dvote.types.v1.ProcessMode.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAutostart();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getInterruptible();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getDynamiccensus();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getEncryptedmetadata();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional bool autoStart = 1;
 * @return {boolean}
 */
proto.dvote.types.v1.ProcessMode.prototype.getAutostart = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.dvote.types.v1.ProcessMode} returns this
 */
proto.dvote.types.v1.ProcessMode.prototype.setAutostart = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool interruptible = 2;
 * @return {boolean}
 */
proto.dvote.types.v1.ProcessMode.prototype.getInterruptible = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.dvote.types.v1.ProcessMode} returns this
 */
proto.dvote.types.v1.ProcessMode.prototype.setInterruptible = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool dynamicCensus = 3;
 * @return {boolean}
 */
proto.dvote.types.v1.ProcessMode.prototype.getDynamiccensus = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.dvote.types.v1.ProcessMode} returns this
 */
proto.dvote.types.v1.ProcessMode.prototype.setDynamiccensus = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool encryptedMetaData = 4;
 * @return {boolean}
 */
proto.dvote.types.v1.ProcessMode.prototype.getEncryptedmetadata = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.dvote.types.v1.ProcessMode} returns this
 */
proto.dvote.types.v1.ProcessMode.prototype.setEncryptedmetadata = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dvote.types.v1.ProcessVoteOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.dvote.types.v1.ProcessVoteOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dvote.types.v1.ProcessVoteOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dvote.types.v1.ProcessVoteOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    maxcount: jspb.Message.getFieldWithDefault(msg, 1, 0),
    maxvalue: jspb.Message.getFieldWithDefault(msg, 2, 0),
    maxvoteoverwrites: jspb.Message.getFieldWithDefault(msg, 3, 0),
    maxtotalcost: jspb.Message.getFieldWithDefault(msg, 4, 0),
    costexponent: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dvote.types.v1.ProcessVoteOptions}
 */
proto.dvote.types.v1.ProcessVoteOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dvote.types.v1.ProcessVoteOptions;
  return proto.dvote.types.v1.ProcessVoteOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dvote.types.v1.ProcessVoteOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dvote.types.v1.ProcessVoteOptions}
 */
proto.dvote.types.v1.ProcessVoteOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxcount(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxvalue(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxvoteoverwrites(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxtotalcost(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCostexponent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.ProcessVoteOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dvote.types.v1.ProcessVoteOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dvote.types.v1.ProcessVoteOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dvote.types.v1.ProcessVoteOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMaxcount();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getMaxvalue();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getMaxvoteoverwrites();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getMaxtotalcost();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getCostexponent();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * optional uint32 maxCount = 1;
 * @return {number}
 */
proto.dvote.types.v1.ProcessVoteOptions.prototype.getMaxcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.dvote.types.v1.ProcessVoteOptions} returns this
 */
proto.dvote.types.v1.ProcessVoteOptions.prototype.setMaxcount = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 maxValue = 2;
 * @return {number}
 */
proto.dvote.types.v1.ProcessVoteOptions.prototype.getMaxvalue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.dvote.types.v1.ProcessVoteOptions} returns this
 */
proto.dvote.types.v1.ProcessVoteOptions.prototype.setMaxvalue = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 maxVoteOverwrites = 3;
 * @return {number}
 */
proto.dvote.types.v1.ProcessVoteOptions.prototype.getMaxvoteoverwrites = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.dvote.types.v1.ProcessVoteOptions} returns this
 */
proto.dvote.types.v1.ProcessVoteOptions.prototype.setMaxvoteoverwrites = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 maxTotalCost = 4;
 * @return {number}
 */
proto.dvote.types.v1.ProcessVoteOptions.prototype.getMaxtotalcost = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.dvote.types.v1.ProcessVoteOptions} returns this
 */
proto.dvote.types.v1.ProcessVoteOptions.prototype.setMaxtotalcost = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 costExponent = 5;
 * @return {number}
 */
proto.dvote.types.v1.ProcessVoteOptions.prototype.getCostexponent = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.dvote.types.v1.ProcessVoteOptions} returns this
 */
proto.dvote.types.v1.ProcessVoteOptions.prototype.setCostexponent = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.dvote.types.v1.OracleList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dvote.types.v1.OracleList.prototype.toObject = function(opt_includeInstance) {
  return proto.dvote.types.v1.OracleList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dvote.types.v1.OracleList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dvote.types.v1.OracleList.toObject = function(includeInstance, msg) {
  var f, obj = {
    oraclesList: msg.getOraclesList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dvote.types.v1.OracleList}
 */
proto.dvote.types.v1.OracleList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dvote.types.v1.OracleList;
  return proto.dvote.types.v1.OracleList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dvote.types.v1.OracleList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dvote.types.v1.OracleList}
 */
proto.dvote.types.v1.OracleList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addOracles(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.OracleList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dvote.types.v1.OracleList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dvote.types.v1.OracleList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dvote.types.v1.OracleList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOraclesList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      1,
      f
    );
  }
};


/**
 * repeated bytes oracles = 1;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.dvote.types.v1.OracleList.prototype.getOraclesList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * repeated bytes oracles = 1;
 * This is a type-conversion wrapper around `getOraclesList()`
 * @return {!Array<string>}
 */
proto.dvote.types.v1.OracleList.prototype.getOraclesList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getOraclesList()));
};


/**
 * repeated bytes oracles = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOraclesList()`
 * @return {!Array<!Uint8Array>}
 */
proto.dvote.types.v1.OracleList.prototype.getOraclesList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getOraclesList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.dvote.types.v1.OracleList} returns this
 */
proto.dvote.types.v1.OracleList.prototype.setOraclesList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.dvote.types.v1.OracleList} returns this
 */
proto.dvote.types.v1.OracleList.prototype.addOracles = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.dvote.types.v1.OracleList} returns this
 */
proto.dvote.types.v1.OracleList.prototype.clearOraclesList = function() {
  return this.setOraclesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.dvote.types.v1.ValidatorList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dvote.types.v1.ValidatorList.prototype.toObject = function(opt_includeInstance) {
  return proto.dvote.types.v1.ValidatorList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dvote.types.v1.ValidatorList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dvote.types.v1.ValidatorList.toObject = function(includeInstance, msg) {
  var f, obj = {
    validatorsList: jspb.Message.toObjectList(msg.getValidatorsList(),
    proto.dvote.types.v1.Validator.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dvote.types.v1.ValidatorList}
 */
proto.dvote.types.v1.ValidatorList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dvote.types.v1.ValidatorList;
  return proto.dvote.types.v1.ValidatorList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dvote.types.v1.ValidatorList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dvote.types.v1.ValidatorList}
 */
proto.dvote.types.v1.ValidatorList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.dvote.types.v1.Validator;
      reader.readMessage(value,proto.dvote.types.v1.Validator.deserializeBinaryFromReader);
      msg.addValidators(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.ValidatorList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dvote.types.v1.ValidatorList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dvote.types.v1.ValidatorList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dvote.types.v1.ValidatorList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValidatorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.dvote.types.v1.Validator.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Validator validators = 1;
 * @return {!Array<!proto.dvote.types.v1.Validator>}
 */
proto.dvote.types.v1.ValidatorList.prototype.getValidatorsList = function() {
  return /** @type{!Array<!proto.dvote.types.v1.Validator>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.dvote.types.v1.Validator, 1));
};


/**
 * @param {!Array<!proto.dvote.types.v1.Validator>} value
 * @return {!proto.dvote.types.v1.ValidatorList} returns this
*/
proto.dvote.types.v1.ValidatorList.prototype.setValidatorsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.dvote.types.v1.Validator=} opt_value
 * @param {number=} opt_index
 * @return {!proto.dvote.types.v1.Validator}
 */
proto.dvote.types.v1.ValidatorList.prototype.addValidators = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.dvote.types.v1.Validator, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.dvote.types.v1.ValidatorList} returns this
 */
proto.dvote.types.v1.ValidatorList.prototype.clearValidatorsList = function() {
  return this.setValidatorsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dvote.types.v1.Validator.prototype.toObject = function(opt_includeInstance) {
  return proto.dvote.types.v1.Validator.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dvote.types.v1.Validator} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dvote.types.v1.Validator.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: msg.getAddress_asB64(),
    pubkey: msg.getPubkey_asB64(),
    power: jspb.Message.getFieldWithDefault(msg, 3, 0),
    name: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dvote.types.v1.Validator}
 */
proto.dvote.types.v1.Validator.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dvote.types.v1.Validator;
  return proto.dvote.types.v1.Validator.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dvote.types.v1.Validator} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dvote.types.v1.Validator}
 */
proto.dvote.types.v1.Validator.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPubkey(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPower(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.Validator.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dvote.types.v1.Validator.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dvote.types.v1.Validator} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dvote.types.v1.Validator.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getPubkey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getPower();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional bytes address = 1;
 * @return {!(string|Uint8Array)}
 */
proto.dvote.types.v1.Validator.prototype.getAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes address = 1;
 * This is a type-conversion wrapper around `getAddress()`
 * @return {string}
 */
proto.dvote.types.v1.Validator.prototype.getAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAddress()));
};


/**
 * optional bytes address = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddress()`
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.Validator.prototype.getAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.dvote.types.v1.Validator} returns this
 */
proto.dvote.types.v1.Validator.prototype.setAddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes pubKey = 2;
 * @return {!(string|Uint8Array)}
 */
proto.dvote.types.v1.Validator.prototype.getPubkey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes pubKey = 2;
 * This is a type-conversion wrapper around `getPubkey()`
 * @return {string}
 */
proto.dvote.types.v1.Validator.prototype.getPubkey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPubkey()));
};


/**
 * optional bytes pubKey = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPubkey()`
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.Validator.prototype.getPubkey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPubkey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.dvote.types.v1.Validator} returns this
 */
proto.dvote.types.v1.Validator.prototype.setPubkey = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional uint64 power = 3;
 * @return {number}
 */
proto.dvote.types.v1.Validator.prototype.getPower = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.dvote.types.v1.Validator} returns this
 */
proto.dvote.types.v1.Validator.prototype.setPower = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string name = 4;
 * @return {string}
 */
proto.dvote.types.v1.Validator.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.dvote.types.v1.Validator} returns this
 */
proto.dvote.types.v1.Validator.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.dvote.types.v1.Vote.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dvote.types.v1.Vote.prototype.toObject = function(opt_includeInstance) {
  return proto.dvote.types.v1.Vote.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dvote.types.v1.Vote} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dvote.types.v1.Vote.toObject = function(includeInstance, msg) {
  var f, obj = {
    height: jspb.Message.getFieldWithDefault(msg, 1, 0),
    nullifier: msg.getNullifier_asB64(),
    processid: msg.getProcessid_asB64(),
    votepackage: msg.getVotepackage_asB64(),
    encryptionkeyindexesList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
    weight: msg.getWeight_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dvote.types.v1.Vote}
 */
proto.dvote.types.v1.Vote.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dvote.types.v1.Vote;
  return proto.dvote.types.v1.Vote.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dvote.types.v1.Vote} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dvote.types.v1.Vote}
 */
proto.dvote.types.v1.Vote.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHeight(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNullifier(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProcessid(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setVotepackage(value);
      break;
    case 5:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addEncryptionkeyindexes(values[i]);
      }
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setWeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.Vote.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dvote.types.v1.Vote.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dvote.types.v1.Vote} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dvote.types.v1.Vote.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getNullifier_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getProcessid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getVotepackage_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getEncryptionkeyindexesList();
  if (f.length > 0) {
    writer.writePackedUint32(
      5,
      f
    );
  }
  f = message.getWeight_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
};


/**
 * optional uint32 height = 1;
 * @return {number}
 */
proto.dvote.types.v1.Vote.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.dvote.types.v1.Vote} returns this
 */
proto.dvote.types.v1.Vote.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes nullifier = 2;
 * @return {!(string|Uint8Array)}
 */
proto.dvote.types.v1.Vote.prototype.getNullifier = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes nullifier = 2;
 * This is a type-conversion wrapper around `getNullifier()`
 * @return {string}
 */
proto.dvote.types.v1.Vote.prototype.getNullifier_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNullifier()));
};


/**
 * optional bytes nullifier = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNullifier()`
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.Vote.prototype.getNullifier_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNullifier()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.dvote.types.v1.Vote} returns this
 */
proto.dvote.types.v1.Vote.prototype.setNullifier = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes processId = 3;
 * @return {!(string|Uint8Array)}
 */
proto.dvote.types.v1.Vote.prototype.getProcessid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes processId = 3;
 * This is a type-conversion wrapper around `getProcessid()`
 * @return {string}
 */
proto.dvote.types.v1.Vote.prototype.getProcessid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProcessid()));
};


/**
 * optional bytes processId = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProcessid()`
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.Vote.prototype.getProcessid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProcessid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.dvote.types.v1.Vote} returns this
 */
proto.dvote.types.v1.Vote.prototype.setProcessid = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes votePackage = 4;
 * @return {!(string|Uint8Array)}
 */
proto.dvote.types.v1.Vote.prototype.getVotepackage = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes votePackage = 4;
 * This is a type-conversion wrapper around `getVotepackage()`
 * @return {string}
 */
proto.dvote.types.v1.Vote.prototype.getVotepackage_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getVotepackage()));
};


/**
 * optional bytes votePackage = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getVotepackage()`
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.Vote.prototype.getVotepackage_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getVotepackage()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.dvote.types.v1.Vote} returns this
 */
proto.dvote.types.v1.Vote.prototype.setVotepackage = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * repeated uint32 encryptionKeyIndexes = 5;
 * @return {!Array<number>}
 */
proto.dvote.types.v1.Vote.prototype.getEncryptionkeyindexesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.dvote.types.v1.Vote} returns this
 */
proto.dvote.types.v1.Vote.prototype.setEncryptionkeyindexesList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.dvote.types.v1.Vote} returns this
 */
proto.dvote.types.v1.Vote.prototype.addEncryptionkeyindexes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.dvote.types.v1.Vote} returns this
 */
proto.dvote.types.v1.Vote.prototype.clearEncryptionkeyindexesList = function() {
  return this.setEncryptionkeyindexesList([]);
};


/**
 * optional bytes weight = 6;
 * @return {!(string|Uint8Array)}
 */
proto.dvote.types.v1.Vote.prototype.getWeight = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes weight = 6;
 * This is a type-conversion wrapper around `getWeight()`
 * @return {string}
 */
proto.dvote.types.v1.Vote.prototype.getWeight_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getWeight()));
};


/**
 * optional bytes weight = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getWeight()`
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.Vote.prototype.getWeight_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getWeight()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.dvote.types.v1.Vote} returns this
 */
proto.dvote.types.v1.Vote.prototype.setWeight = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dvote.types.v1.TendermintHeader.prototype.toObject = function(opt_includeInstance) {
  return proto.dvote.types.v1.TendermintHeader.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dvote.types.v1.TendermintHeader} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dvote.types.v1.TendermintHeader.toObject = function(includeInstance, msg) {
  var f, obj = {
    chainId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    height: jspb.Message.getFieldWithDefault(msg, 3, 0),
    timestamp: jspb.Message.getFieldWithDefault(msg, 4, 0),
    blockid: msg.getBlockid_asB64(),
    lastCommitHash: msg.getLastCommitHash_asB64(),
    dataHash: msg.getDataHash_asB64(),
    validatorsHash: msg.getValidatorsHash_asB64(),
    nextValidatorsHash: msg.getNextValidatorsHash_asB64(),
    consensusHash: msg.getConsensusHash_asB64(),
    appHash: msg.getAppHash_asB64(),
    lastResultsHash: msg.getLastResultsHash_asB64(),
    evidenceHash: msg.getEvidenceHash_asB64(),
    proposerAddress: msg.getProposerAddress_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dvote.types.v1.TendermintHeader}
 */
proto.dvote.types.v1.TendermintHeader.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dvote.types.v1.TendermintHeader;
  return proto.dvote.types.v1.TendermintHeader.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dvote.types.v1.TendermintHeader} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dvote.types.v1.TendermintHeader}
 */
proto.dvote.types.v1.TendermintHeader.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setChainId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setHeight(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBlockid(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setLastCommitHash(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDataHash(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValidatorsHash(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNextValidatorsHash(value);
      break;
    case 10:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setConsensusHash(value);
      break;
    case 11:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAppHash(value);
      break;
    case 12:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setLastResultsHash(value);
      break;
    case 13:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEvidenceHash(value);
      break;
    case 14:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProposerAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.TendermintHeader.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dvote.types.v1.TendermintHeader.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dvote.types.v1.TendermintHeader} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dvote.types.v1.TendermintHeader.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChainId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getBlockid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getLastCommitHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getDataHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = message.getValidatorsHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
  f = message.getNextValidatorsHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      9,
      f
    );
  }
  f = message.getConsensusHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      10,
      f
    );
  }
  f = message.getAppHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      11,
      f
    );
  }
  f = message.getLastResultsHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      12,
      f
    );
  }
  f = message.getEvidenceHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      13,
      f
    );
  }
  f = message.getProposerAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      14,
      f
    );
  }
};


/**
 * optional string chain_id = 2;
 * @return {string}
 */
proto.dvote.types.v1.TendermintHeader.prototype.getChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.dvote.types.v1.TendermintHeader} returns this
 */
proto.dvote.types.v1.TendermintHeader.prototype.setChainId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 height = 3;
 * @return {number}
 */
proto.dvote.types.v1.TendermintHeader.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.dvote.types.v1.TendermintHeader} returns this
 */
proto.dvote.types.v1.TendermintHeader.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 timestamp = 4;
 * @return {number}
 */
proto.dvote.types.v1.TendermintHeader.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.dvote.types.v1.TendermintHeader} returns this
 */
proto.dvote.types.v1.TendermintHeader.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bytes blockID = 5;
 * @return {!(string|Uint8Array)}
 */
proto.dvote.types.v1.TendermintHeader.prototype.getBlockid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes blockID = 5;
 * This is a type-conversion wrapper around `getBlockid()`
 * @return {string}
 */
proto.dvote.types.v1.TendermintHeader.prototype.getBlockid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBlockid()));
};


/**
 * optional bytes blockID = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlockid()`
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.TendermintHeader.prototype.getBlockid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBlockid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.dvote.types.v1.TendermintHeader} returns this
 */
proto.dvote.types.v1.TendermintHeader.prototype.setBlockid = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional bytes last_commit_hash = 6;
 * @return {!(string|Uint8Array)}
 */
proto.dvote.types.v1.TendermintHeader.prototype.getLastCommitHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes last_commit_hash = 6;
 * This is a type-conversion wrapper around `getLastCommitHash()`
 * @return {string}
 */
proto.dvote.types.v1.TendermintHeader.prototype.getLastCommitHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getLastCommitHash()));
};


/**
 * optional bytes last_commit_hash = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLastCommitHash()`
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.TendermintHeader.prototype.getLastCommitHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getLastCommitHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.dvote.types.v1.TendermintHeader} returns this
 */
proto.dvote.types.v1.TendermintHeader.prototype.setLastCommitHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional bytes data_hash = 7;
 * @return {!(string|Uint8Array)}
 */
proto.dvote.types.v1.TendermintHeader.prototype.getDataHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes data_hash = 7;
 * This is a type-conversion wrapper around `getDataHash()`
 * @return {string}
 */
proto.dvote.types.v1.TendermintHeader.prototype.getDataHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDataHash()));
};


/**
 * optional bytes data_hash = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDataHash()`
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.TendermintHeader.prototype.getDataHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDataHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.dvote.types.v1.TendermintHeader} returns this
 */
proto.dvote.types.v1.TendermintHeader.prototype.setDataHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};


/**
 * optional bytes validators_hash = 8;
 * @return {!(string|Uint8Array)}
 */
proto.dvote.types.v1.TendermintHeader.prototype.getValidatorsHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes validators_hash = 8;
 * This is a type-conversion wrapper around `getValidatorsHash()`
 * @return {string}
 */
proto.dvote.types.v1.TendermintHeader.prototype.getValidatorsHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValidatorsHash()));
};


/**
 * optional bytes validators_hash = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValidatorsHash()`
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.TendermintHeader.prototype.getValidatorsHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValidatorsHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.dvote.types.v1.TendermintHeader} returns this
 */
proto.dvote.types.v1.TendermintHeader.prototype.setValidatorsHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 8, value);
};


/**
 * optional bytes next_validators_hash = 9;
 * @return {!(string|Uint8Array)}
 */
proto.dvote.types.v1.TendermintHeader.prototype.getNextValidatorsHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * optional bytes next_validators_hash = 9;
 * This is a type-conversion wrapper around `getNextValidatorsHash()`
 * @return {string}
 */
proto.dvote.types.v1.TendermintHeader.prototype.getNextValidatorsHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNextValidatorsHash()));
};


/**
 * optional bytes next_validators_hash = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNextValidatorsHash()`
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.TendermintHeader.prototype.getNextValidatorsHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNextValidatorsHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.dvote.types.v1.TendermintHeader} returns this
 */
proto.dvote.types.v1.TendermintHeader.prototype.setNextValidatorsHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 9, value);
};


/**
 * optional bytes consensus_hash = 10;
 * @return {!(string|Uint8Array)}
 */
proto.dvote.types.v1.TendermintHeader.prototype.getConsensusHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * optional bytes consensus_hash = 10;
 * This is a type-conversion wrapper around `getConsensusHash()`
 * @return {string}
 */
proto.dvote.types.v1.TendermintHeader.prototype.getConsensusHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getConsensusHash()));
};


/**
 * optional bytes consensus_hash = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getConsensusHash()`
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.TendermintHeader.prototype.getConsensusHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getConsensusHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.dvote.types.v1.TendermintHeader} returns this
 */
proto.dvote.types.v1.TendermintHeader.prototype.setConsensusHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 10, value);
};


/**
 * optional bytes app_hash = 11;
 * @return {!(string|Uint8Array)}
 */
proto.dvote.types.v1.TendermintHeader.prototype.getAppHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * optional bytes app_hash = 11;
 * This is a type-conversion wrapper around `getAppHash()`
 * @return {string}
 */
proto.dvote.types.v1.TendermintHeader.prototype.getAppHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAppHash()));
};


/**
 * optional bytes app_hash = 11;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAppHash()`
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.TendermintHeader.prototype.getAppHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAppHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.dvote.types.v1.TendermintHeader} returns this
 */
proto.dvote.types.v1.TendermintHeader.prototype.setAppHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 11, value);
};


/**
 * optional bytes last_results_hash = 12;
 * @return {!(string|Uint8Array)}
 */
proto.dvote.types.v1.TendermintHeader.prototype.getLastResultsHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * optional bytes last_results_hash = 12;
 * This is a type-conversion wrapper around `getLastResultsHash()`
 * @return {string}
 */
proto.dvote.types.v1.TendermintHeader.prototype.getLastResultsHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getLastResultsHash()));
};


/**
 * optional bytes last_results_hash = 12;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLastResultsHash()`
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.TendermintHeader.prototype.getLastResultsHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getLastResultsHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.dvote.types.v1.TendermintHeader} returns this
 */
proto.dvote.types.v1.TendermintHeader.prototype.setLastResultsHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 12, value);
};


/**
 * optional bytes evidence_hash = 13;
 * @return {!(string|Uint8Array)}
 */
proto.dvote.types.v1.TendermintHeader.prototype.getEvidenceHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * optional bytes evidence_hash = 13;
 * This is a type-conversion wrapper around `getEvidenceHash()`
 * @return {string}
 */
proto.dvote.types.v1.TendermintHeader.prototype.getEvidenceHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEvidenceHash()));
};


/**
 * optional bytes evidence_hash = 13;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEvidenceHash()`
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.TendermintHeader.prototype.getEvidenceHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEvidenceHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.dvote.types.v1.TendermintHeader} returns this
 */
proto.dvote.types.v1.TendermintHeader.prototype.setEvidenceHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 13, value);
};


/**
 * optional bytes proposer_address = 14;
 * @return {!(string|Uint8Array)}
 */
proto.dvote.types.v1.TendermintHeader.prototype.getProposerAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * optional bytes proposer_address = 14;
 * This is a type-conversion wrapper around `getProposerAddress()`
 * @return {string}
 */
proto.dvote.types.v1.TendermintHeader.prototype.getProposerAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProposerAddress()));
};


/**
 * optional bytes proposer_address = 14;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProposerAddress()`
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.TendermintHeader.prototype.getProposerAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProposerAddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.dvote.types.v1.TendermintHeader} returns this
 */
proto.dvote.types.v1.TendermintHeader.prototype.setProposerAddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 14, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.dvote.types.v1.ProcessResult.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dvote.types.v1.ProcessResult.prototype.toObject = function(opt_includeInstance) {
  return proto.dvote.types.v1.ProcessResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dvote.types.v1.ProcessResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dvote.types.v1.ProcessResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    votesList: jspb.Message.toObjectList(msg.getVotesList(),
    proto.dvote.types.v1.QuestionResult.toObject, includeInstance),
    processid: msg.getProcessid_asB64(),
    entityid: msg.getEntityid_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dvote.types.v1.ProcessResult}
 */
proto.dvote.types.v1.ProcessResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dvote.types.v1.ProcessResult;
  return proto.dvote.types.v1.ProcessResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dvote.types.v1.ProcessResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dvote.types.v1.ProcessResult}
 */
proto.dvote.types.v1.ProcessResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.dvote.types.v1.QuestionResult;
      reader.readMessage(value,proto.dvote.types.v1.QuestionResult.deserializeBinaryFromReader);
      msg.addVotes(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProcessid(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEntityid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.ProcessResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dvote.types.v1.ProcessResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dvote.types.v1.ProcessResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dvote.types.v1.ProcessResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVotesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.dvote.types.v1.QuestionResult.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * repeated QuestionResult votes = 1;
 * @return {!Array<!proto.dvote.types.v1.QuestionResult>}
 */
proto.dvote.types.v1.ProcessResult.prototype.getVotesList = function() {
  return /** @type{!Array<!proto.dvote.types.v1.QuestionResult>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.dvote.types.v1.QuestionResult, 1));
};


/**
 * @param {!Array<!proto.dvote.types.v1.QuestionResult>} value
 * @return {!proto.dvote.types.v1.ProcessResult} returns this
*/
proto.dvote.types.v1.ProcessResult.prototype.setVotesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.dvote.types.v1.QuestionResult=} opt_value
 * @param {number=} opt_index
 * @return {!proto.dvote.types.v1.QuestionResult}
 */
proto.dvote.types.v1.ProcessResult.prototype.addVotes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.dvote.types.v1.QuestionResult, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.dvote.types.v1.ProcessResult} returns this
 */
proto.dvote.types.v1.ProcessResult.prototype.clearVotesList = function() {
  return this.setVotesList([]);
};


/**
 * optional bytes processId = 2;
 * @return {!(string|Uint8Array)}
 */
proto.dvote.types.v1.ProcessResult.prototype.getProcessid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes processId = 2;
 * This is a type-conversion wrapper around `getProcessid()`
 * @return {string}
 */
proto.dvote.types.v1.ProcessResult.prototype.getProcessid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProcessid()));
};


/**
 * optional bytes processId = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProcessid()`
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.ProcessResult.prototype.getProcessid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProcessid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.dvote.types.v1.ProcessResult} returns this
 */
proto.dvote.types.v1.ProcessResult.prototype.setProcessid = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.dvote.types.v1.ProcessResult} returns this
 */
proto.dvote.types.v1.ProcessResult.prototype.clearProcessid = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dvote.types.v1.ProcessResult.prototype.hasProcessid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes entityId = 3;
 * @return {!(string|Uint8Array)}
 */
proto.dvote.types.v1.ProcessResult.prototype.getEntityid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes entityId = 3;
 * This is a type-conversion wrapper around `getEntityid()`
 * @return {string}
 */
proto.dvote.types.v1.ProcessResult.prototype.getEntityid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEntityid()));
};


/**
 * optional bytes entityId = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEntityid()`
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.ProcessResult.prototype.getEntityid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEntityid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.dvote.types.v1.ProcessResult} returns this
 */
proto.dvote.types.v1.ProcessResult.prototype.setEntityid = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.dvote.types.v1.ProcessResult} returns this
 */
proto.dvote.types.v1.ProcessResult.prototype.clearEntityid = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dvote.types.v1.ProcessResult.prototype.hasEntityid = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.dvote.types.v1.QuestionResult.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dvote.types.v1.QuestionResult.prototype.toObject = function(opt_includeInstance) {
  return proto.dvote.types.v1.QuestionResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dvote.types.v1.QuestionResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dvote.types.v1.QuestionResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    questionList: msg.getQuestionList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dvote.types.v1.QuestionResult}
 */
proto.dvote.types.v1.QuestionResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dvote.types.v1.QuestionResult;
  return proto.dvote.types.v1.QuestionResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dvote.types.v1.QuestionResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dvote.types.v1.QuestionResult}
 */
proto.dvote.types.v1.QuestionResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addQuestion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.QuestionResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dvote.types.v1.QuestionResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dvote.types.v1.QuestionResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dvote.types.v1.QuestionResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuestionList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      1,
      f
    );
  }
};


/**
 * repeated bytes question = 1;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.dvote.types.v1.QuestionResult.prototype.getQuestionList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * repeated bytes question = 1;
 * This is a type-conversion wrapper around `getQuestionList()`
 * @return {!Array<string>}
 */
proto.dvote.types.v1.QuestionResult.prototype.getQuestionList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getQuestionList()));
};


/**
 * repeated bytes question = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getQuestionList()`
 * @return {!Array<!Uint8Array>}
 */
proto.dvote.types.v1.QuestionResult.prototype.getQuestionList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getQuestionList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.dvote.types.v1.QuestionResult} returns this
 */
proto.dvote.types.v1.QuestionResult.prototype.setQuestionList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.dvote.types.v1.QuestionResult} returns this
 */
proto.dvote.types.v1.QuestionResult.prototype.addQuestion = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.dvote.types.v1.QuestionResult} returns this
 */
proto.dvote.types.v1.QuestionResult.prototype.clearQuestionList = function() {
  return this.setQuestionList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.dvote.types.v1.ProcessEndingList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dvote.types.v1.ProcessEndingList.prototype.toObject = function(opt_includeInstance) {
  return proto.dvote.types.v1.ProcessEndingList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dvote.types.v1.ProcessEndingList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dvote.types.v1.ProcessEndingList.toObject = function(includeInstance, msg) {
  var f, obj = {
    processlistList: msg.getProcesslistList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dvote.types.v1.ProcessEndingList}
 */
proto.dvote.types.v1.ProcessEndingList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dvote.types.v1.ProcessEndingList;
  return proto.dvote.types.v1.ProcessEndingList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dvote.types.v1.ProcessEndingList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dvote.types.v1.ProcessEndingList}
 */
proto.dvote.types.v1.ProcessEndingList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addProcesslist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.ProcessEndingList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dvote.types.v1.ProcessEndingList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dvote.types.v1.ProcessEndingList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dvote.types.v1.ProcessEndingList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProcesslistList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      1,
      f
    );
  }
};


/**
 * repeated bytes processList = 1;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.dvote.types.v1.ProcessEndingList.prototype.getProcesslistList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * repeated bytes processList = 1;
 * This is a type-conversion wrapper around `getProcesslistList()`
 * @return {!Array<string>}
 */
proto.dvote.types.v1.ProcessEndingList.prototype.getProcesslistList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getProcesslistList()));
};


/**
 * repeated bytes processList = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProcesslistList()`
 * @return {!Array<!Uint8Array>}
 */
proto.dvote.types.v1.ProcessEndingList.prototype.getProcesslistList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getProcesslistList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.dvote.types.v1.ProcessEndingList} returns this
 */
proto.dvote.types.v1.ProcessEndingList.prototype.setProcesslistList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.dvote.types.v1.ProcessEndingList} returns this
 */
proto.dvote.types.v1.ProcessEndingList.prototype.addProcesslist = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.dvote.types.v1.ProcessEndingList} returns this
 */
proto.dvote.types.v1.ProcessEndingList.prototype.clearProcesslistList = function() {
  return this.setProcesslistList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.dvote.types.v1.StoredKeys.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dvote.types.v1.StoredKeys.prototype.toObject = function(opt_includeInstance) {
  return proto.dvote.types.v1.StoredKeys.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dvote.types.v1.StoredKeys} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dvote.types.v1.StoredKeys.toObject = function(includeInstance, msg) {
  var f, obj = {
    pidsList: msg.getPidsList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dvote.types.v1.StoredKeys}
 */
proto.dvote.types.v1.StoredKeys.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dvote.types.v1.StoredKeys;
  return proto.dvote.types.v1.StoredKeys.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dvote.types.v1.StoredKeys} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dvote.types.v1.StoredKeys}
 */
proto.dvote.types.v1.StoredKeys.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addPids(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dvote.types.v1.StoredKeys.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dvote.types.v1.StoredKeys.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dvote.types.v1.StoredKeys} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dvote.types.v1.StoredKeys.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPidsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      1,
      f
    );
  }
};


/**
 * repeated bytes pids = 1;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.dvote.types.v1.StoredKeys.prototype.getPidsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * repeated bytes pids = 1;
 * This is a type-conversion wrapper around `getPidsList()`
 * @return {!Array<string>}
 */
proto.dvote.types.v1.StoredKeys.prototype.getPidsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getPidsList()));
};


/**
 * repeated bytes pids = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPidsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.dvote.types.v1.StoredKeys.prototype.getPidsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getPidsList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.dvote.types.v1.StoredKeys} returns this
 */
proto.dvote.types.v1.StoredKeys.prototype.setPidsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.dvote.types.v1.StoredKeys} returns this
 */
proto.dvote.types.v1.StoredKeys.prototype.addPids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.dvote.types.v1.StoredKeys} returns this
 */
proto.dvote.types.v1.StoredKeys.prototype.clearPidsList = function() {
  return this.setPidsList([]);
};


/**
 * @enum {number}
 */
proto.dvote.types.v1.SignatureType = {
  UNKNOWN: 0,
  ECDSA: 1,
  ECDSA_PIDSALTED: 2,
  ECDSA_BLIND: 3,
  ECDSA_BLIND_PIDSALTED: 4
};

/**
 * @enum {number}
 */
proto.dvote.types.v1.TxType = {
  TX_UNKNOWN: 0,
  NEW_PROCESS: 1,
  SET_PROCESS_STATUS: 2,
  SET_PROCESS_CENSUS: 3,
  SET_PROCESS_QUESTION_INDEX: 4,
  ADD_PROCESS_KEYS: 5,
  REVEAL_PROCESS_KEYS: 6,
  ADD_ORACLE: 7,
  REMOVE_ORACLE: 8,
  ADD_VALIDATOR: 9,
  REMOVE_VALIDATOR: 10,
  VOTE: 11,
  SET_PROCESS_RESULTS: 12
};

/**
 * @enum {number}
 */
proto.dvote.types.v1.ProcessStatus = {
  PROCESS_UNKNOWN: 0,
  READY: 1,
  ENDED: 2,
  CANCELED: 3,
  PAUSED: 4,
  RESULTS: 5
};

/**
 * @enum {number}
 */
proto.dvote.types.v1.CensusOrigin = {
  CENSUS_UNKNOWN: 0,
  OFF_CHAIN_TREE: 1,
  OFF_CHAIN_TREE_WEIGHTED: 2,
  OFF_CHAIN_CA: 3,
  ERC20: 11,
  ERC721: 12,
  ERC1155: 13,
  ERC777: 14,
  MINI_ME: 15
};

goog.object.extend(exports, proto.dvote.types.v1);
