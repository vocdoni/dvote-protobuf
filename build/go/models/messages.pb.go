// Type: Protocol layer definitions

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.15.8
// source: protocol/messages.proto

package v2

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Remote calls between components are a message, optionally signed
type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The bytes of the {Body} model being signed
	Body []byte `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
	// Optionally signed. Not expected when:
	// - Submitting a vote
	// - Performing a read-only operation
	//
	Signature     []byte        `protobuf:"bytes,2,opt,name=signature,proto3,oneof" json:"signature,omitempty"`
	SignatureType SignatureType `protobuf:"varint,3,opt,name=signatureType,proto3,enum=dvote.types.v2.SignatureType" json:"signatureType,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_messages_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_messages_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_protocol_messages_proto_rawDescGZIP(), []int{0}
}

func (x *Message) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *Message) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *Message) GetSignatureType() SignatureType {
	if x != nil {
		return x.SignatureType
	}
	return SignatureType_NONE
}

// The body contains the serialized bytes from a `Body`, which can host three types of interactions.
type Body struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// UNIX timestamp
	Timestamp int32 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Types that are assignable to Body:
	//	*Body_Transaction
	//	*Body_Receipt
	//	*Body_Request
	//	*Body_Response
	Body isBody_Body `protobuf_oneof:"body"`
}

func (x *Body) Reset() {
	*x = Body{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_messages_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Body) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Body) ProtoMessage() {}

func (x *Body) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_messages_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Body.ProtoReflect.Descriptor instead.
func (*Body) Descriptor() ([]byte, []int) {
	return file_protocol_messages_proto_rawDescGZIP(), []int{1}
}

func (x *Body) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Body) GetTimestamp() int32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (m *Body) GetBody() isBody_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (x *Body) GetTransaction() *Transaction {
	if x, ok := x.GetBody().(*Body_Transaction); ok {
		return x.Transaction
	}
	return nil
}

func (x *Body) GetReceipt() *TransactionReceipt {
	if x, ok := x.GetBody().(*Body_Receipt); ok {
		return x.Receipt
	}
	return nil
}

func (x *Body) GetRequest() *Request {
	if x, ok := x.GetBody().(*Body_Request); ok {
		return x.Request
	}
	return nil
}

func (x *Body) GetResponse() *Response {
	if x, ok := x.GetBody().(*Body_Response); ok {
		return x.Response
	}
	return nil
}

type isBody_Body interface {
	isBody_Body()
}

type Body_Transaction struct {
	// Vochain, VocOne, ...
	Transaction *Transaction `protobuf:"bytes,11,opt,name=transaction,proto3,oneof"`
}

type Body_Receipt struct {
	Receipt *TransactionReceipt `protobuf:"bytes,12,opt,name=receipt,proto3,oneof"`
}

type Body_Request struct {
	// To remote services
	Request *Request `protobuf:"bytes,13,opt,name=request,proto3,oneof"`
}

type Body_Response struct {
	Response *Response `protobuf:"bytes,14,opt,name=response,proto3,oneof"`
}

func (*Body_Transaction) isBody_Body() {}

func (*Body_Receipt) isBody_Body() {}

func (*Body_Request) isBody_Body() {}

func (*Body_Response) isBody_Body() {}

// Vochain or VocOne transactions, all wrapped within a `Message > Body`.
type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Body:
	//	*Transaction_SetOrganization
	//	*Transaction_Transfer
	//	*Transaction_Mint
	//	*Transaction_ClaimTokens
	//	*Transaction_NewElection
	//	*Transaction_RegisterElectionKey
	//	*Transaction_SubmitBallot
	//	*Transaction_SetElectionStatus
	//	*Transaction_SetProposalStatus
	Body isTransaction_Body `protobuf_oneof:"body"`
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_messages_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_messages_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_protocol_messages_proto_rawDescGZIP(), []int{2}
}

func (m *Transaction) GetBody() isTransaction_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (x *Transaction) GetSetOrganization() *SetOrganization {
	if x, ok := x.GetBody().(*Transaction_SetOrganization); ok {
		return x.SetOrganization
	}
	return nil
}

func (x *Transaction) GetTransfer() *Transfer {
	if x, ok := x.GetBody().(*Transaction_Transfer); ok {
		return x.Transfer
	}
	return nil
}

func (x *Transaction) GetMint() *Mint {
	if x, ok := x.GetBody().(*Transaction_Mint); ok {
		return x.Mint
	}
	return nil
}

func (x *Transaction) GetClaimTokens() *ClaimTokens {
	if x, ok := x.GetBody().(*Transaction_ClaimTokens); ok {
		return x.ClaimTokens
	}
	return nil
}

func (x *Transaction) GetNewElection() *NewElection {
	if x, ok := x.GetBody().(*Transaction_NewElection); ok {
		return x.NewElection
	}
	return nil
}

func (x *Transaction) GetRegisterElectionKey() *RegisterElectionKey {
	if x, ok := x.GetBody().(*Transaction_RegisterElectionKey); ok {
		return x.RegisterElectionKey
	}
	return nil
}

func (x *Transaction) GetSubmitBallot() *SubmitBallot {
	if x, ok := x.GetBody().(*Transaction_SubmitBallot); ok {
		return x.SubmitBallot
	}
	return nil
}

func (x *Transaction) GetSetElectionStatus() *SetElectionStatus {
	if x, ok := x.GetBody().(*Transaction_SetElectionStatus); ok {
		return x.SetElectionStatus
	}
	return nil
}

func (x *Transaction) GetSetProposalStatus() *SetProposalStatus {
	if x, ok := x.GetBody().(*Transaction_SetProposalStatus); ok {
		return x.SetProposalStatus
	}
	return nil
}

type isTransaction_Body interface {
	isTransaction_Body()
}

type Transaction_SetOrganization struct {
	// ACCOUNTS
	SetOrganization *SetOrganization `protobuf:"bytes,1,opt,name=setOrganization,proto3,oneof"`
}

type Transaction_Transfer struct {
	Transfer *Transfer `protobuf:"bytes,2,opt,name=transfer,proto3,oneof"`
}

type Transaction_Mint struct {
	Mint *Mint `protobuf:"bytes,3,opt,name=mint,proto3,oneof"`
}

type Transaction_ClaimTokens struct {
	ClaimTokens *ClaimTokens `protobuf:"bytes,4,opt,name=claimTokens,proto3,oneof"`
}

type Transaction_NewElection struct {
	// ELECTIONS
	NewElection *NewElection `protobuf:"bytes,11,opt,name=newElection,proto3,oneof"`
}

type Transaction_RegisterElectionKey struct {
	RegisterElectionKey *RegisterElectionKey `protobuf:"bytes,12,opt,name=registerElectionKey,proto3,oneof"`
}

type Transaction_SubmitBallot struct {
	SubmitBallot *SubmitBallot `protobuf:"bytes,13,opt,name=submitBallot,proto3,oneof"`
}

type Transaction_SetElectionStatus struct {
	SetElectionStatus *SetElectionStatus `protobuf:"bytes,14,opt,name=setElectionStatus,proto3,oneof"`
}

type Transaction_SetProposalStatus struct {
	SetProposalStatus *SetProposalStatus `protobuf:"bytes,15,opt,name=setProposalStatus,proto3,oneof"`
}

func (*Transaction_SetOrganization) isTransaction_Body() {}

func (*Transaction_Transfer) isTransaction_Body() {}

func (*Transaction_Mint) isTransaction_Body() {}

func (*Transaction_ClaimTokens) isTransaction_Body() {}

func (*Transaction_NewElection) isTransaction_Body() {}

func (*Transaction_RegisterElectionKey) isTransaction_Body() {}

func (*Transaction_SubmitBallot) isTransaction_Body() {}

func (*Transaction_SetElectionStatus) isTransaction_Body() {}

func (*Transaction_SetProposalStatus) isTransaction_Body() {}

// The response given to the transaction submitter:
type TransactionReceipt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Body:
	//	*TransactionReceipt_Success
	//	*TransactionReceipt_Error
	Body isTransactionReceipt_Body `protobuf_oneof:"body"`
}

func (x *TransactionReceipt) Reset() {
	*x = TransactionReceipt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_messages_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionReceipt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionReceipt) ProtoMessage() {}

func (x *TransactionReceipt) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_messages_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionReceipt.ProtoReflect.Descriptor instead.
func (*TransactionReceipt) Descriptor() ([]byte, []int) {
	return file_protocol_messages_proto_rawDescGZIP(), []int{3}
}

func (m *TransactionReceipt) GetBody() isTransactionReceipt_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (x *TransactionReceipt) GetSuccess() *TransactionSuccess {
	if x, ok := x.GetBody().(*TransactionReceipt_Success); ok {
		return x.Success
	}
	return nil
}

func (x *TransactionReceipt) GetError() *TransactionError {
	if x, ok := x.GetBody().(*TransactionReceipt_Error); ok {
		return x.Error
	}
	return nil
}

type isTransactionReceipt_Body interface {
	isTransactionReceipt_Body()
}

type TransactionReceipt_Success struct {
	Success *TransactionSuccess `protobuf:"bytes,1,opt,name=success,proto3,oneof"`
}

type TransactionReceipt_Error struct {
	Error *TransactionError `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

func (*TransactionReceipt_Success) isTransactionReceipt_Body() {}

func (*TransactionReceipt_Error) isTransactionReceipt_Body() {}

type TransactionSuccess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *TransactionSuccess) Reset() {
	*x = TransactionSuccess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_messages_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionSuccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionSuccess) ProtoMessage() {}

func (x *TransactionSuccess) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_messages_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionSuccess.ProtoReflect.Descriptor instead.
func (*TransactionSuccess) Descriptor() ([]byte, []int) {
	return file_protocol_messages_proto_rawDescGZIP(), []int{4}
}

func (x *TransactionSuccess) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

type TransactionError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Code    int32  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *TransactionError) Reset() {
	*x = TransactionError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_messages_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionError) ProtoMessage() {}

func (x *TransactionError) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_messages_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionError.ProtoReflect.Descriptor instead.
func (*TransactionError) Descriptor() ([]byte, []int) {
	return file_protocol_messages_proto_rawDescGZIP(), []int{5}
}

func (x *TransactionError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TransactionError) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

// Census Service, File gateways, and similar nodes expect `Request` models, and return `Response` models, all wrapped within a `Message > Body`.
type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Body:
	//	*Request_GetElection
	//	*Request_GetElectionList
	//	*Request_GetOrganization
	//	*Request_GetBallot
	//	*Request_GetElectionBallots
	//	*Request_GetElectionKeys
	//	*Request_GetElectionCircuitInfo
	//	*Request_GetElectionResults
	//	*Request_GetElectionWeight
	//	*Request_NewCensus
	//	*Request_AddCensusKeys
	//	*Request_GetCensusRoot
	//	*Request_GetCensusSize
	//	*Request_PublishCensus
	//	*Request_GetCensusProof
	//	*Request_DumpCensus
	//	*Request_PinFile
	//	*Request_FetchFile
	//	*Request_GetBlockStatus
	//	*Request_GetBlockCount
	//	*Request_EstimateElectionPrice
	//	*Request_GetTransaction
	//	*Request_WaitTransaction
	Body isRequest_Body `protobuf_oneof:"body"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_messages_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_messages_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_protocol_messages_proto_rawDescGZIP(), []int{6}
}

func (m *Request) GetBody() isRequest_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (x *Request) GetGetElection() *GetElection {
	if x, ok := x.GetBody().(*Request_GetElection); ok {
		return x.GetElection
	}
	return nil
}

func (x *Request) GetGetElectionList() *GetElectionList {
	if x, ok := x.GetBody().(*Request_GetElectionList); ok {
		return x.GetElectionList
	}
	return nil
}

func (x *Request) GetGetOrganization() *GetOrganization {
	if x, ok := x.GetBody().(*Request_GetOrganization); ok {
		return x.GetOrganization
	}
	return nil
}

func (x *Request) GetGetBallot() *GetBallot {
	if x, ok := x.GetBody().(*Request_GetBallot); ok {
		return x.GetBallot
	}
	return nil
}

func (x *Request) GetGetElectionBallots() *GetElectionBallots {
	if x, ok := x.GetBody().(*Request_GetElectionBallots); ok {
		return x.GetElectionBallots
	}
	return nil
}

func (x *Request) GetGetElectionKeys() *GetElectionKeys {
	if x, ok := x.GetBody().(*Request_GetElectionKeys); ok {
		return x.GetElectionKeys
	}
	return nil
}

func (x *Request) GetGetElectionCircuitInfo() *GetElectionCircuitInfo {
	if x, ok := x.GetBody().(*Request_GetElectionCircuitInfo); ok {
		return x.GetElectionCircuitInfo
	}
	return nil
}

func (x *Request) GetGetElectionResults() *GetElectionResults {
	if x, ok := x.GetBody().(*Request_GetElectionResults); ok {
		return x.GetElectionResults
	}
	return nil
}

func (x *Request) GetGetElectionWeight() *GetElectionWeight {
	if x, ok := x.GetBody().(*Request_GetElectionWeight); ok {
		return x.GetElectionWeight
	}
	return nil
}

func (x *Request) GetNewCensus() *NewCensus {
	if x, ok := x.GetBody().(*Request_NewCensus); ok {
		return x.NewCensus
	}
	return nil
}

func (x *Request) GetAddCensusKeys() *AddCensusKeys {
	if x, ok := x.GetBody().(*Request_AddCensusKeys); ok {
		return x.AddCensusKeys
	}
	return nil
}

func (x *Request) GetGetCensusRoot() *GetCensusRoot {
	if x, ok := x.GetBody().(*Request_GetCensusRoot); ok {
		return x.GetCensusRoot
	}
	return nil
}

func (x *Request) GetGetCensusSize() *GetCensusSize {
	if x, ok := x.GetBody().(*Request_GetCensusSize); ok {
		return x.GetCensusSize
	}
	return nil
}

func (x *Request) GetPublishCensus() *PublishCensus {
	if x, ok := x.GetBody().(*Request_PublishCensus); ok {
		return x.PublishCensus
	}
	return nil
}

func (x *Request) GetGetCensusProof() *GetCensusProof {
	if x, ok := x.GetBody().(*Request_GetCensusProof); ok {
		return x.GetCensusProof
	}
	return nil
}

func (x *Request) GetDumpCensus() *DumpCensus {
	if x, ok := x.GetBody().(*Request_DumpCensus); ok {
		return x.DumpCensus
	}
	return nil
}

func (x *Request) GetPinFile() *PinFile {
	if x, ok := x.GetBody().(*Request_PinFile); ok {
		return x.PinFile
	}
	return nil
}

func (x *Request) GetFetchFile() *FetchFile {
	if x, ok := x.GetBody().(*Request_FetchFile); ok {
		return x.FetchFile
	}
	return nil
}

func (x *Request) GetGetBlockStatus() *GetBlockStatus {
	if x, ok := x.GetBody().(*Request_GetBlockStatus); ok {
		return x.GetBlockStatus
	}
	return nil
}

func (x *Request) GetGetBlockCount() *GetBlockCount {
	if x, ok := x.GetBody().(*Request_GetBlockCount); ok {
		return x.GetBlockCount
	}
	return nil
}

func (x *Request) GetEstimateElectionPrice() *EstimateElectionPrice {
	if x, ok := x.GetBody().(*Request_EstimateElectionPrice); ok {
		return x.EstimateElectionPrice
	}
	return nil
}

func (x *Request) GetGetTransaction() *GetTransaction {
	if x, ok := x.GetBody().(*Request_GetTransaction); ok {
		return x.GetTransaction
	}
	return nil
}

func (x *Request) GetWaitTransaction() *WaitTransaction {
	if x, ok := x.GetBody().(*Request_WaitTransaction); ok {
		return x.WaitTransaction
	}
	return nil
}

type isRequest_Body interface {
	isRequest_Body()
}

type Request_GetElection struct {
	// ELECTION
	GetElection *GetElection `protobuf:"bytes,1,opt,name=getElection,proto3,oneof"`
}

type Request_GetElectionList struct {
	GetElectionList *GetElectionList `protobuf:"bytes,2,opt,name=getElectionList,proto3,oneof"`
}

type Request_GetOrganization struct {
	GetOrganization *GetOrganization `protobuf:"bytes,3,opt,name=getOrganization,proto3,oneof"`
}

type Request_GetBallot struct {
	GetBallot *GetBallot `protobuf:"bytes,4,opt,name=getBallot,proto3,oneof"`
}

type Request_GetElectionBallots struct {
	GetElectionBallots *GetElectionBallots `protobuf:"bytes,5,opt,name=getElectionBallots,proto3,oneof"`
}

type Request_GetElectionKeys struct {
	GetElectionKeys *GetElectionKeys `protobuf:"bytes,6,opt,name=getElectionKeys,proto3,oneof"`
}

type Request_GetElectionCircuitInfo struct {
	GetElectionCircuitInfo *GetElectionCircuitInfo `protobuf:"bytes,7,opt,name=getElectionCircuitInfo,proto3,oneof"`
}

type Request_GetElectionResults struct {
	GetElectionResults *GetElectionResults `protobuf:"bytes,8,opt,name=getElectionResults,proto3,oneof"`
}

type Request_GetElectionWeight struct {
	GetElectionWeight *GetElectionWeight `protobuf:"bytes,9,opt,name=getElectionWeight,proto3,oneof"`
}

type Request_NewCensus struct {
	// CENSUS
	NewCensus *NewCensus `protobuf:"bytes,31,opt,name=newCensus,proto3,oneof"`
}

type Request_AddCensusKeys struct {
	AddCensusKeys *AddCensusKeys `protobuf:"bytes,32,opt,name=addCensusKeys,proto3,oneof"`
}

type Request_GetCensusRoot struct {
	GetCensusRoot *GetCensusRoot `protobuf:"bytes,33,opt,name=getCensusRoot,proto3,oneof"`
}

type Request_GetCensusSize struct {
	GetCensusSize *GetCensusSize `protobuf:"bytes,34,opt,name=getCensusSize,proto3,oneof"`
}

type Request_PublishCensus struct {
	PublishCensus *PublishCensus `protobuf:"bytes,35,opt,name=publishCensus,proto3,oneof"`
}

type Request_GetCensusProof struct {
	GetCensusProof *GetCensusProof `protobuf:"bytes,36,opt,name=getCensusProof,proto3,oneof"`
}

type Request_DumpCensus struct {
	DumpCensus *DumpCensus `protobuf:"bytes,37,opt,name=dumpCensus,proto3,oneof"`
}

type Request_PinFile struct {
	// FILE STORAGE
	PinFile *PinFile `protobuf:"bytes,51,opt,name=pinFile,proto3,oneof"`
}

type Request_FetchFile struct {
	FetchFile *FetchFile `protobuf:"bytes,52,opt,name=fetchFile,proto3,oneof"`
}

type Request_GetBlockStatus struct {
	// NETWORK
	GetBlockStatus *GetBlockStatus `protobuf:"bytes,61,opt,name=getBlockStatus,proto3,oneof"`
}

type Request_GetBlockCount struct {
	GetBlockCount *GetBlockCount `protobuf:"bytes,62,opt,name=getBlockCount,proto3,oneof"`
}

type Request_EstimateElectionPrice struct {
	EstimateElectionPrice *EstimateElectionPrice `protobuf:"bytes,63,opt,name=estimateElectionPrice,proto3,oneof"`
}

type Request_GetTransaction struct {
	// TRANSACTIONS
	GetTransaction *GetTransaction `protobuf:"bytes,81,opt,name=getTransaction,proto3,oneof"`
}

type Request_WaitTransaction struct {
	WaitTransaction *WaitTransaction `protobuf:"bytes,82,opt,name=waitTransaction,proto3,oneof"`
}

func (*Request_GetElection) isRequest_Body() {}

func (*Request_GetElectionList) isRequest_Body() {}

func (*Request_GetOrganization) isRequest_Body() {}

func (*Request_GetBallot) isRequest_Body() {}

func (*Request_GetElectionBallots) isRequest_Body() {}

func (*Request_GetElectionKeys) isRequest_Body() {}

func (*Request_GetElectionCircuitInfo) isRequest_Body() {}

func (*Request_GetElectionResults) isRequest_Body() {}

func (*Request_GetElectionWeight) isRequest_Body() {}

func (*Request_NewCensus) isRequest_Body() {}

func (*Request_AddCensusKeys) isRequest_Body() {}

func (*Request_GetCensusRoot) isRequest_Body() {}

func (*Request_GetCensusSize) isRequest_Body() {}

func (*Request_PublishCensus) isRequest_Body() {}

func (*Request_GetCensusProof) isRequest_Body() {}

func (*Request_DumpCensus) isRequest_Body() {}

func (*Request_PinFile) isRequest_Body() {}

func (*Request_FetchFile) isRequest_Body() {}

func (*Request_GetBlockStatus) isRequest_Body() {}

func (*Request_GetBlockCount) isRequest_Body() {}

func (*Request_EstimateElectionPrice) isRequest_Body() {}

func (*Request_GetTransaction) isRequest_Body() {}

func (*Request_WaitTransaction) isRequest_Body() {}

// Responses can either be successful or fail. The `Response` body depends on the type of request made originally, and the caller is responsible for deserializing the bytes into the according model, if any.
type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Body:
	//	*Response_Success
	//	*Response_Error
	Body isResponse_Body `protobuf_oneof:"body"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_messages_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_messages_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_protocol_messages_proto_rawDescGZIP(), []int{7}
}

func (m *Response) GetBody() isResponse_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (x *Response) GetSuccess() *ResponseSuccess {
	if x, ok := x.GetBody().(*Response_Success); ok {
		return x.Success
	}
	return nil
}

func (x *Response) GetError() *ResponseError {
	if x, ok := x.GetBody().(*Response_Error); ok {
		return x.Error
	}
	return nil
}

type isResponse_Body interface {
	isResponse_Body()
}

type Response_Success struct {
	Success *ResponseSuccess `protobuf:"bytes,1,opt,name=success,proto3,oneof"`
}

type Response_Error struct {
	Error *ResponseError `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

func (*Response_Success) isResponse_Body() {}

func (*Response_Error) isResponse_Body() {}

type ResponseSuccess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Serialized response, related to the request model
	Body []byte `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *ResponseSuccess) Reset() {
	*x = ResponseSuccess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_messages_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseSuccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseSuccess) ProtoMessage() {}

func (x *ResponseSuccess) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_messages_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseSuccess.ProtoReflect.Descriptor instead.
func (*ResponseSuccess) Descriptor() ([]byte, []int) {
	return file_protocol_messages_proto_rawDescGZIP(), []int{8}
}

func (x *ResponseSuccess) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

type ResponseError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	// Serialized response, related to the request model
	Body []byte `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *ResponseError) Reset() {
	*x = ResponseError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocol_messages_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseError) ProtoMessage() {}

func (x *ResponseError) ProtoReflect() protoreflect.Message {
	mi := &file_protocol_messages_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseError.ProtoReflect.Descriptor instead.
func (*ResponseError) Descriptor() ([]byte, []int) {
	return file_protocol_messages_proto_rawDescGZIP(), []int{9}
}

func (x *ResponseError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ResponseError) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

var File_protocol_messages_proto protoreflect.FileDescriptor

var file_protocol_messages_proto_rawDesc = []byte{
	0x0a, 0x17, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x64, 0x76, 0x6f, 0x74, 0x65,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x32, 0x1a, 0x14, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x93, 0x01, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x62, 0x6f, 0x64, 0x79, 0x12, 0x21, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x0d, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d,
	0x2e, 0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x32, 0x2e,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xaa, 0x02, 0x0a, 0x04, 0x42,
	0x6f, 0x64, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x3f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x48, 0x00, 0x52, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x70, 0x74, 0x12, 0x33, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x07,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x76, 0x6f, 0x74,
	0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x06, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x8b, 0x05, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x0f, 0x73, 0x65, 0x74, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76,
	0x32, 0x2e, 0x53, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x48, 0x00, 0x52, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x04,
	0x6d, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x76, 0x6f,
	0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x69, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x04, 0x6d, 0x69, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x0b, 0x63, 0x6c, 0x61, 0x69,
	0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43,
	0x6c, 0x61, 0x69, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x6c,
	0x61, 0x69, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x3f, 0x0a, 0x0b, 0x6e, 0x65, 0x77,
	0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x32, 0x2e,
	0x4e, 0x65, 0x77, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x6e,
	0x65, 0x77, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x57, 0x0a, 0x13, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65,
	0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x13,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4b, 0x65, 0x79, 0x12, 0x42, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x42, 0x61, 0x6c,
	0x6c, 0x6f, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x76, 0x6f, 0x74,
	0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x12, 0x51, 0x0a, 0x11, 0x73, 0x65, 0x74, 0x45, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x74, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x11, 0x73, 0x65, 0x74, 0x45, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x51, 0x0a, 0x11, 0x73, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x11, 0x73, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x06, 0x0a,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x96, 0x01, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x3e, 0x0a, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x48, 0x00, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x38, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x76,
	0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x06, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x28,
	0x0a, 0x12, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x40, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xab, 0x0d, 0x0a, 0x07, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0b, 0x67, 0x65, 0x74, 0x45, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x76,
	0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74,
	0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x67, 0x65, 0x74, 0x45,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x0f, 0x67, 0x65, 0x74, 0x45, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76,
	0x32, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x0f, 0x67, 0x65, 0x74, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x0f, 0x67, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x47,
	0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x0f, 0x67, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x39, 0x0a, 0x09, 0x67, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x48,
	0x00, 0x52, 0x09, 0x67, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x12, 0x54, 0x0a, 0x12,
	0x67, 0x65, 0x74, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x6c, 0x6c, 0x6f,
	0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x76, 0x6f, 0x74, 0x65,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x73, 0x48, 0x00, 0x52, 0x12,
	0x67, 0x65, 0x74, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x6c, 0x6c, 0x6f,
	0x74, 0x73, 0x12, 0x4b, 0x0a, 0x0f, 0x67, 0x65, 0x74, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x76,
	0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74,
	0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x73, 0x48, 0x00, 0x52, 0x0f,
	0x67, 0x65, 0x74, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x73, 0x12,
	0x60, 0x0a, 0x16, 0x67, 0x65, 0x74, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x69,
	0x72, 0x63, 0x75, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x32,
	0x2e, 0x47, 0x65, 0x74, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x69, 0x72, 0x63,
	0x75, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x16, 0x67, 0x65, 0x74, 0x45, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x54, 0x0a, 0x12, 0x67, 0x65, 0x74, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x47,
	0x65, 0x74, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x48, 0x00, 0x52, 0x12, 0x67, 0x65, 0x74, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x51, 0x0a, 0x11, 0x67, 0x65, 0x74, 0x45, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x57,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x48, 0x00, 0x52, 0x11, 0x67, 0x65, 0x74, 0x45, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x39, 0x0a, 0x09, 0x6e, 0x65,
	0x77, 0x43, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x4e,
	0x65, 0x77, 0x43, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x48, 0x00, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x43,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x12, 0x45, 0x0a, 0x0d, 0x61, 0x64, 0x64, 0x43, 0x65, 0x6e, 0x73,
	0x75, 0x73, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64,
	0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x64,
	0x64, 0x43, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x4b, 0x65, 0x79, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x61,
	0x64, 0x64, 0x43, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x45, 0x0a, 0x0d,
	0x67, 0x65, 0x74, 0x43, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x52, 0x6f,
	0x6f, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x67, 0x65, 0x74, 0x43, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x52,
	0x6f, 0x6f, 0x74, 0x12, 0x45, 0x0a, 0x0d, 0x67, 0x65, 0x74, 0x43, 0x65, 0x6e, 0x73, 0x75, 0x73,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x76, 0x6f,
	0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x53, 0x69, 0x7a, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x67, 0x65, 0x74,
	0x43, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x45, 0x0a, 0x0d, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x43, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x76, 0x32, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x43, 0x65, 0x6e, 0x73, 0x75, 0x73,
	0x48, 0x00, 0x52, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x43, 0x65, 0x6e, 0x73, 0x75,
	0x73, 0x12, 0x48, 0x0a, 0x0e, 0x67, 0x65, 0x74, 0x43, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x50, 0x72,
	0x6f, 0x6f, 0x66, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x76, 0x6f, 0x74,
	0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x48, 0x00, 0x52, 0x0e, 0x67, 0x65, 0x74,
	0x43, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x3c, 0x0a, 0x0a, 0x64,
	0x75, 0x6d, 0x70, 0x43, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x32,
	0x2e, 0x44, 0x75, 0x6d, 0x70, 0x43, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x64,
	0x75, 0x6d, 0x70, 0x43, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x12, 0x33, 0x0a, 0x07, 0x70, 0x69, 0x6e,
	0x46, 0x69, 0x6c, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x76, 0x6f,
	0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x69, 0x6e, 0x46,
	0x69, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x07, 0x70, 0x69, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x39,
	0x0a, 0x09, 0x66, 0x65, 0x74, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x76, 0x32, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x09,
	0x66, 0x65, 0x74, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x48, 0x0a, 0x0e, 0x67, 0x65, 0x74,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x3d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x48, 0x00, 0x52, 0x0e, 0x67, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x45, 0x0a, 0x0d, 0x67, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x76, 0x6f,
	0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x67, 0x65, 0x74,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x5d, 0x0a, 0x15, 0x65, 0x73,
	0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64, 0x76, 0x6f, 0x74,
	0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x73, 0x74, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x48, 0x00, 0x52, 0x15, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x45, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x0e, 0x67, 0x65, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x51, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x0e, 0x67, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x0f, 0x77, 0x61, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x52, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64,
	0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x57, 0x61,
	0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x0f, 0x77, 0x61, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x06, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x86, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x76, 0x32, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x06, 0x0a, 0x04, 0x62, 0x6f, 0x64,
	0x79, 0x22, 0x25, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x3d, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x42, 0x28, 0x5a, 0x26, 0x67, 0x6f, 0x2e, 0x76, 0x6f,
	0x63, 0x64, 0x6f, 0x6e, 0x69, 0x2e, 0x69, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x2f, 0x67, 0x6f, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x76,
	0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protocol_messages_proto_rawDescOnce sync.Once
	file_protocol_messages_proto_rawDescData = file_protocol_messages_proto_rawDesc
)

func file_protocol_messages_proto_rawDescGZIP() []byte {
	file_protocol_messages_proto_rawDescOnce.Do(func() {
		file_protocol_messages_proto_rawDescData = protoimpl.X.CompressGZIP(file_protocol_messages_proto_rawDescData)
	})
	return file_protocol_messages_proto_rawDescData
}

var file_protocol_messages_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_protocol_messages_proto_goTypes = []interface{}{
	(*Message)(nil),                // 0: dvote.types.v2.Message
	(*Body)(nil),                   // 1: dvote.types.v2.Body
	(*Transaction)(nil),            // 2: dvote.types.v2.Transaction
	(*TransactionReceipt)(nil),     // 3: dvote.types.v2.TransactionReceipt
	(*TransactionSuccess)(nil),     // 4: dvote.types.v2.TransactionSuccess
	(*TransactionError)(nil),       // 5: dvote.types.v2.TransactionError
	(*Request)(nil),                // 6: dvote.types.v2.Request
	(*Response)(nil),               // 7: dvote.types.v2.Response
	(*ResponseSuccess)(nil),        // 8: dvote.types.v2.ResponseSuccess
	(*ResponseError)(nil),          // 9: dvote.types.v2.ResponseError
	(SignatureType)(0),             // 10: dvote.types.v2.SignatureType
	(*SetOrganization)(nil),        // 11: dvote.types.v2.SetOrganization
	(*Transfer)(nil),               // 12: dvote.types.v2.Transfer
	(*Mint)(nil),                   // 13: dvote.types.v2.Mint
	(*ClaimTokens)(nil),            // 14: dvote.types.v2.ClaimTokens
	(*NewElection)(nil),            // 15: dvote.types.v2.NewElection
	(*RegisterElectionKey)(nil),    // 16: dvote.types.v2.RegisterElectionKey
	(*SubmitBallot)(nil),           // 17: dvote.types.v2.SubmitBallot
	(*SetElectionStatus)(nil),      // 18: dvote.types.v2.SetElectionStatus
	(*SetProposalStatus)(nil),      // 19: dvote.types.v2.SetProposalStatus
	(*GetElection)(nil),            // 20: dvote.types.v2.GetElection
	(*GetElectionList)(nil),        // 21: dvote.types.v2.GetElectionList
	(*GetOrganization)(nil),        // 22: dvote.types.v2.GetOrganization
	(*GetBallot)(nil),              // 23: dvote.types.v2.GetBallot
	(*GetElectionBallots)(nil),     // 24: dvote.types.v2.GetElectionBallots
	(*GetElectionKeys)(nil),        // 25: dvote.types.v2.GetElectionKeys
	(*GetElectionCircuitInfo)(nil), // 26: dvote.types.v2.GetElectionCircuitInfo
	(*GetElectionResults)(nil),     // 27: dvote.types.v2.GetElectionResults
	(*GetElectionWeight)(nil),      // 28: dvote.types.v2.GetElectionWeight
	(*NewCensus)(nil),              // 29: dvote.types.v2.NewCensus
	(*AddCensusKeys)(nil),          // 30: dvote.types.v2.AddCensusKeys
	(*GetCensusRoot)(nil),          // 31: dvote.types.v2.GetCensusRoot
	(*GetCensusSize)(nil),          // 32: dvote.types.v2.GetCensusSize
	(*PublishCensus)(nil),          // 33: dvote.types.v2.PublishCensus
	(*GetCensusProof)(nil),         // 34: dvote.types.v2.GetCensusProof
	(*DumpCensus)(nil),             // 35: dvote.types.v2.DumpCensus
	(*PinFile)(nil),                // 36: dvote.types.v2.PinFile
	(*FetchFile)(nil),              // 37: dvote.types.v2.FetchFile
	(*GetBlockStatus)(nil),         // 38: dvote.types.v2.GetBlockStatus
	(*GetBlockCount)(nil),          // 39: dvote.types.v2.GetBlockCount
	(*EstimateElectionPrice)(nil),  // 40: dvote.types.v2.EstimateElectionPrice
	(*GetTransaction)(nil),         // 41: dvote.types.v2.GetTransaction
	(*WaitTransaction)(nil),        // 42: dvote.types.v2.WaitTransaction
}
var file_protocol_messages_proto_depIdxs = []int32{
	10, // 0: dvote.types.v2.Message.signatureType:type_name -> dvote.types.v2.SignatureType
	2,  // 1: dvote.types.v2.Body.transaction:type_name -> dvote.types.v2.Transaction
	3,  // 2: dvote.types.v2.Body.receipt:type_name -> dvote.types.v2.TransactionReceipt
	6,  // 3: dvote.types.v2.Body.request:type_name -> dvote.types.v2.Request
	7,  // 4: dvote.types.v2.Body.response:type_name -> dvote.types.v2.Response
	11, // 5: dvote.types.v2.Transaction.setOrganization:type_name -> dvote.types.v2.SetOrganization
	12, // 6: dvote.types.v2.Transaction.transfer:type_name -> dvote.types.v2.Transfer
	13, // 7: dvote.types.v2.Transaction.mint:type_name -> dvote.types.v2.Mint
	14, // 8: dvote.types.v2.Transaction.claimTokens:type_name -> dvote.types.v2.ClaimTokens
	15, // 9: dvote.types.v2.Transaction.newElection:type_name -> dvote.types.v2.NewElection
	16, // 10: dvote.types.v2.Transaction.registerElectionKey:type_name -> dvote.types.v2.RegisterElectionKey
	17, // 11: dvote.types.v2.Transaction.submitBallot:type_name -> dvote.types.v2.SubmitBallot
	18, // 12: dvote.types.v2.Transaction.setElectionStatus:type_name -> dvote.types.v2.SetElectionStatus
	19, // 13: dvote.types.v2.Transaction.setProposalStatus:type_name -> dvote.types.v2.SetProposalStatus
	4,  // 14: dvote.types.v2.TransactionReceipt.success:type_name -> dvote.types.v2.TransactionSuccess
	5,  // 15: dvote.types.v2.TransactionReceipt.error:type_name -> dvote.types.v2.TransactionError
	20, // 16: dvote.types.v2.Request.getElection:type_name -> dvote.types.v2.GetElection
	21, // 17: dvote.types.v2.Request.getElectionList:type_name -> dvote.types.v2.GetElectionList
	22, // 18: dvote.types.v2.Request.getOrganization:type_name -> dvote.types.v2.GetOrganization
	23, // 19: dvote.types.v2.Request.getBallot:type_name -> dvote.types.v2.GetBallot
	24, // 20: dvote.types.v2.Request.getElectionBallots:type_name -> dvote.types.v2.GetElectionBallots
	25, // 21: dvote.types.v2.Request.getElectionKeys:type_name -> dvote.types.v2.GetElectionKeys
	26, // 22: dvote.types.v2.Request.getElectionCircuitInfo:type_name -> dvote.types.v2.GetElectionCircuitInfo
	27, // 23: dvote.types.v2.Request.getElectionResults:type_name -> dvote.types.v2.GetElectionResults
	28, // 24: dvote.types.v2.Request.getElectionWeight:type_name -> dvote.types.v2.GetElectionWeight
	29, // 25: dvote.types.v2.Request.newCensus:type_name -> dvote.types.v2.NewCensus
	30, // 26: dvote.types.v2.Request.addCensusKeys:type_name -> dvote.types.v2.AddCensusKeys
	31, // 27: dvote.types.v2.Request.getCensusRoot:type_name -> dvote.types.v2.GetCensusRoot
	32, // 28: dvote.types.v2.Request.getCensusSize:type_name -> dvote.types.v2.GetCensusSize
	33, // 29: dvote.types.v2.Request.publishCensus:type_name -> dvote.types.v2.PublishCensus
	34, // 30: dvote.types.v2.Request.getCensusProof:type_name -> dvote.types.v2.GetCensusProof
	35, // 31: dvote.types.v2.Request.dumpCensus:type_name -> dvote.types.v2.DumpCensus
	36, // 32: dvote.types.v2.Request.pinFile:type_name -> dvote.types.v2.PinFile
	37, // 33: dvote.types.v2.Request.fetchFile:type_name -> dvote.types.v2.FetchFile
	38, // 34: dvote.types.v2.Request.getBlockStatus:type_name -> dvote.types.v2.GetBlockStatus
	39, // 35: dvote.types.v2.Request.getBlockCount:type_name -> dvote.types.v2.GetBlockCount
	40, // 36: dvote.types.v2.Request.estimateElectionPrice:type_name -> dvote.types.v2.EstimateElectionPrice
	41, // 37: dvote.types.v2.Request.getTransaction:type_name -> dvote.types.v2.GetTransaction
	42, // 38: dvote.types.v2.Request.waitTransaction:type_name -> dvote.types.v2.WaitTransaction
	8,  // 39: dvote.types.v2.Response.success:type_name -> dvote.types.v2.ResponseSuccess
	9,  // 40: dvote.types.v2.Response.error:type_name -> dvote.types.v2.ResponseError
	41, // [41:41] is the sub-list for method output_type
	41, // [41:41] is the sub-list for method input_type
	41, // [41:41] is the sub-list for extension type_name
	41, // [41:41] is the sub-list for extension extendee
	0,  // [0:41] is the sub-list for field type_name
}

func init() { file_protocol_messages_proto_init() }
func file_protocol_messages_proto_init() {
	if File_protocol_messages_proto != nil {
		return
	}
	file_protocol_enums_proto_init()
	file_protocol_transactions_proto_init()
	file_protocol_service_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_protocol_messages_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_messages_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Body); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_messages_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_messages_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionReceipt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_messages_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionSuccess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_messages_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_messages_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_messages_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_messages_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseSuccess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocol_messages_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_protocol_messages_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_protocol_messages_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Body_Transaction)(nil),
		(*Body_Receipt)(nil),
		(*Body_Request)(nil),
		(*Body_Response)(nil),
	}
	file_protocol_messages_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Transaction_SetOrganization)(nil),
		(*Transaction_Transfer)(nil),
		(*Transaction_Mint)(nil),
		(*Transaction_ClaimTokens)(nil),
		(*Transaction_NewElection)(nil),
		(*Transaction_RegisterElectionKey)(nil),
		(*Transaction_SubmitBallot)(nil),
		(*Transaction_SetElectionStatus)(nil),
		(*Transaction_SetProposalStatus)(nil),
	}
	file_protocol_messages_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*TransactionReceipt_Success)(nil),
		(*TransactionReceipt_Error)(nil),
	}
	file_protocol_messages_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*Request_GetElection)(nil),
		(*Request_GetElectionList)(nil),
		(*Request_GetOrganization)(nil),
		(*Request_GetBallot)(nil),
		(*Request_GetElectionBallots)(nil),
		(*Request_GetElectionKeys)(nil),
		(*Request_GetElectionCircuitInfo)(nil),
		(*Request_GetElectionResults)(nil),
		(*Request_GetElectionWeight)(nil),
		(*Request_NewCensus)(nil),
		(*Request_AddCensusKeys)(nil),
		(*Request_GetCensusRoot)(nil),
		(*Request_GetCensusSize)(nil),
		(*Request_PublishCensus)(nil),
		(*Request_GetCensusProof)(nil),
		(*Request_DumpCensus)(nil),
		(*Request_PinFile)(nil),
		(*Request_FetchFile)(nil),
		(*Request_GetBlockStatus)(nil),
		(*Request_GetBlockCount)(nil),
		(*Request_EstimateElectionPrice)(nil),
		(*Request_GetTransaction)(nil),
		(*Request_WaitTransaction)(nil),
	}
	file_protocol_messages_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*Response_Success)(nil),
		(*Response_Error)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protocol_messages_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protocol_messages_proto_goTypes,
		DependencyIndexes: file_protocol_messages_proto_depIdxs,
		MessageInfos:      file_protocol_messages_proto_msgTypes,
	}.Build()
	File_protocol_messages_proto = out.File
	file_protocol_messages_proto_rawDesc = nil
	file_protocol_messages_proto_goTypes = nil
	file_protocol_messages_proto_depIdxs = nil
}
