// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.15.8
// source: vochain/vochain.proto

package models

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TxType int32

const (
	TxType_TX_UNKNOWN                 TxType = 0
	TxType_NEW_PROCESS                TxType = 1
	TxType_SET_PROCESS_STATUS         TxType = 2
	TxType_SET_PROCESS_CENSUS         TxType = 3
	TxType_SET_PROCESS_QUESTION_INDEX TxType = 4
	TxType_ADD_PROCESS_KEYS           TxType = 5
	TxType_REVEAL_PROCESS_KEYS        TxType = 6
	TxType_ADD_ORACLE                 TxType = 7
	TxType_REMOVE_ORACLE              TxType = 8
	TxType_ADD_VALIDATOR              TxType = 9
	TxType_REMOVE_VALIDATOR           TxType = 10
	TxType_VOTE                       TxType = 11
	TxType_SET_PROCESS_RESULTS        TxType = 12
	TxType_REGISTER_VOTER_KEY         TxType = 13
	TxType_MINT_TOKENS                TxType = 14
	TxType_SEND_TOKENS                TxType = 15
	TxType_SET_TRANSACTION_COSTS      TxType = 16
	TxType_SET_ACCOUNT_INFO_URI       TxType = 17
	TxType_ADD_DELEGATE_FOR_ACCOUNT   TxType = 18
	TxType_DEL_DELEGATE_FOR_ACCOUNT   TxType = 19
	TxType_COLLECT_FAUCET             TxType = 20
	TxType_ADD_KEYKEEPER              TxType = 21
	TxType_DELETE_KEYKEEPER           TxType = 22
	TxType_CREATE_ACCOUNT             TxType = 23
	TxType_SET_ACCOUNT_SIK            TxType = 24
	TxType_DEL_ACCOUNT_SIK            TxType = 25
)

// Enum value maps for TxType.
var (
	TxType_name = map[int32]string{
		0:  "TX_UNKNOWN",
		1:  "NEW_PROCESS",
		2:  "SET_PROCESS_STATUS",
		3:  "SET_PROCESS_CENSUS",
		4:  "SET_PROCESS_QUESTION_INDEX",
		5:  "ADD_PROCESS_KEYS",
		6:  "REVEAL_PROCESS_KEYS",
		7:  "ADD_ORACLE",
		8:  "REMOVE_ORACLE",
		9:  "ADD_VALIDATOR",
		10: "REMOVE_VALIDATOR",
		11: "VOTE",
		12: "SET_PROCESS_RESULTS",
		13: "REGISTER_VOTER_KEY",
		14: "MINT_TOKENS",
		15: "SEND_TOKENS",
		16: "SET_TRANSACTION_COSTS",
		17: "SET_ACCOUNT_INFO_URI",
		18: "ADD_DELEGATE_FOR_ACCOUNT",
		19: "DEL_DELEGATE_FOR_ACCOUNT",
		20: "COLLECT_FAUCET",
		21: "ADD_KEYKEEPER",
		22: "DELETE_KEYKEEPER",
		23: "CREATE_ACCOUNT",
		24: "SET_ACCOUNT_SIK",
		25: "DEL_ACCOUNT_SIK",
	}
	TxType_value = map[string]int32{
		"TX_UNKNOWN":                 0,
		"NEW_PROCESS":                1,
		"SET_PROCESS_STATUS":         2,
		"SET_PROCESS_CENSUS":         3,
		"SET_PROCESS_QUESTION_INDEX": 4,
		"ADD_PROCESS_KEYS":           5,
		"REVEAL_PROCESS_KEYS":        6,
		"ADD_ORACLE":                 7,
		"REMOVE_ORACLE":              8,
		"ADD_VALIDATOR":              9,
		"REMOVE_VALIDATOR":           10,
		"VOTE":                       11,
		"SET_PROCESS_RESULTS":        12,
		"REGISTER_VOTER_KEY":         13,
		"MINT_TOKENS":                14,
		"SEND_TOKENS":                15,
		"SET_TRANSACTION_COSTS":      16,
		"SET_ACCOUNT_INFO_URI":       17,
		"ADD_DELEGATE_FOR_ACCOUNT":   18,
		"DEL_DELEGATE_FOR_ACCOUNT":   19,
		"COLLECT_FAUCET":             20,
		"ADD_KEYKEEPER":              21,
		"DELETE_KEYKEEPER":           22,
		"CREATE_ACCOUNT":             23,
		"SET_ACCOUNT_SIK":            24,
		"DEL_ACCOUNT_SIK":            25,
	}
)

func (x TxType) Enum() *TxType {
	p := new(TxType)
	*p = x
	return p
}

func (x TxType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TxType) Descriptor() protoreflect.EnumDescriptor {
	return file_vochain_vochain_proto_enumTypes[0].Descriptor()
}

func (TxType) Type() protoreflect.EnumType {
	return &file_vochain_vochain_proto_enumTypes[0]
}

func (x TxType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TxType.Descriptor instead.
func (TxType) EnumDescriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{0}
}

type ProcessStatus int32

const (
	ProcessStatus_PROCESS_UNKNOWN ProcessStatus = 0
	ProcessStatus_READY           ProcessStatus = 1
	ProcessStatus_ENDED           ProcessStatus = 2
	ProcessStatus_CANCELED        ProcessStatus = 3
	ProcessStatus_PAUSED          ProcessStatus = 4
	ProcessStatus_RESULTS         ProcessStatus = 5
)

// Enum value maps for ProcessStatus.
var (
	ProcessStatus_name = map[int32]string{
		0: "PROCESS_UNKNOWN",
		1: "READY",
		2: "ENDED",
		3: "CANCELED",
		4: "PAUSED",
		5: "RESULTS",
	}
	ProcessStatus_value = map[string]int32{
		"PROCESS_UNKNOWN": 0,
		"READY":           1,
		"ENDED":           2,
		"CANCELED":        3,
		"PAUSED":          4,
		"RESULTS":         5,
	}
)

func (x ProcessStatus) Enum() *ProcessStatus {
	p := new(ProcessStatus)
	*p = x
	return p
}

func (x ProcessStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProcessStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_vochain_vochain_proto_enumTypes[1].Descriptor()
}

func (ProcessStatus) Type() protoreflect.EnumType {
	return &file_vochain_vochain_proto_enumTypes[1]
}

func (x ProcessStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProcessStatus.Descriptor instead.
func (ProcessStatus) EnumDescriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{1}
}

type SourceNetworkId int32

const (
	SourceNetworkId_UNKNOWN               SourceNetworkId = 0
	SourceNetworkId_ETH_MAINNET           SourceNetworkId = 1
	SourceNetworkId_ETH_RINKEBY           SourceNetworkId = 2
	SourceNetworkId_ETH_GOERLI            SourceNetworkId = 3
	SourceNetworkId_POA_XDAI              SourceNetworkId = 4
	SourceNetworkId_POA_SOKOL             SourceNetworkId = 5
	SourceNetworkId_POLYGON               SourceNetworkId = 6
	SourceNetworkId_BSC                   SourceNetworkId = 7
	SourceNetworkId_ETH_MAINNET_SIGNALING SourceNetworkId = 8
	SourceNetworkId_ETH_RINKEBY_SIGNALING SourceNetworkId = 9
	SourceNetworkId_AVAX_FUJI             SourceNetworkId = 10
	SourceNetworkId_AVAX                  SourceNetworkId = 11
	SourceNetworkId_POLYGON_MUMBAI        SourceNetworkId = 12
	SourceNetworkId_OPTIMISM              SourceNetworkId = 13
	SourceNetworkId_ARBITRUM              SourceNetworkId = 14
)

// Enum value maps for SourceNetworkId.
var (
	SourceNetworkId_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "ETH_MAINNET",
		2:  "ETH_RINKEBY",
		3:  "ETH_GOERLI",
		4:  "POA_XDAI",
		5:  "POA_SOKOL",
		6:  "POLYGON",
		7:  "BSC",
		8:  "ETH_MAINNET_SIGNALING",
		9:  "ETH_RINKEBY_SIGNALING",
		10: "AVAX_FUJI",
		11: "AVAX",
		12: "POLYGON_MUMBAI",
		13: "OPTIMISM",
		14: "ARBITRUM",
	}
	SourceNetworkId_value = map[string]int32{
		"UNKNOWN":               0,
		"ETH_MAINNET":           1,
		"ETH_RINKEBY":           2,
		"ETH_GOERLI":            3,
		"POA_XDAI":              4,
		"POA_SOKOL":             5,
		"POLYGON":               6,
		"BSC":                   7,
		"ETH_MAINNET_SIGNALING": 8,
		"ETH_RINKEBY_SIGNALING": 9,
		"AVAX_FUJI":             10,
		"AVAX":                  11,
		"POLYGON_MUMBAI":        12,
		"OPTIMISM":              13,
		"ARBITRUM":              14,
	}
)

func (x SourceNetworkId) Enum() *SourceNetworkId {
	p := new(SourceNetworkId)
	*p = x
	return p
}

func (x SourceNetworkId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SourceNetworkId) Descriptor() protoreflect.EnumDescriptor {
	return file_vochain_vochain_proto_enumTypes[2].Descriptor()
}

func (SourceNetworkId) Type() protoreflect.EnumType {
	return &file_vochain_vochain_proto_enumTypes[2]
}

func (x SourceNetworkId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SourceNetworkId.Descriptor instead.
func (SourceNetworkId) EnumDescriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{2}
}

type CensusOrigin int32

const (
	CensusOrigin_CENSUS_UNKNOWN          CensusOrigin = 0
	CensusOrigin_OFF_CHAIN_TREE          CensusOrigin = 1
	CensusOrigin_OFF_CHAIN_TREE_WEIGHTED CensusOrigin = 2
	CensusOrigin_OFF_CHAIN_CA            CensusOrigin = 3
	CensusOrigin_ERC20                   CensusOrigin = 11
	CensusOrigin_ERC721                  CensusOrigin = 12
	CensusOrigin_ERC1155                 CensusOrigin = 13
	CensusOrigin_ERC777                  CensusOrigin = 14
	CensusOrigin_MINI_ME                 CensusOrigin = 15
)

// Enum value maps for CensusOrigin.
var (
	CensusOrigin_name = map[int32]string{
		0:  "CENSUS_UNKNOWN",
		1:  "OFF_CHAIN_TREE",
		2:  "OFF_CHAIN_TREE_WEIGHTED",
		3:  "OFF_CHAIN_CA",
		11: "ERC20",
		12: "ERC721",
		13: "ERC1155",
		14: "ERC777",
		15: "MINI_ME",
	}
	CensusOrigin_value = map[string]int32{
		"CENSUS_UNKNOWN":          0,
		"OFF_CHAIN_TREE":          1,
		"OFF_CHAIN_TREE_WEIGHTED": 2,
		"OFF_CHAIN_CA":            3,
		"ERC20":                   11,
		"ERC721":                  12,
		"ERC1155":                 13,
		"ERC777":                  14,
		"MINI_ME":                 15,
	}
)

func (x CensusOrigin) Enum() *CensusOrigin {
	p := new(CensusOrigin)
	*p = x
	return p
}

func (x CensusOrigin) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CensusOrigin) Descriptor() protoreflect.EnumDescriptor {
	return file_vochain_vochain_proto_enumTypes[3].Descriptor()
}

func (CensusOrigin) Type() protoreflect.EnumType {
	return &file_vochain_vochain_proto_enumTypes[3]
}

func (x CensusOrigin) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CensusOrigin.Descriptor instead.
func (CensusOrigin) EnumDescriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{3}
}

type Census_Type int32

const (
	Census_UNKNOWN         Census_Type = 0
	Census_ARBO_BLAKE2B    Census_Type = 1
	Census_ARBO_POSEIDON   Census_Type = 2
	Census_ETHEREUMSTORAGE Census_Type = 3
	Census_ETHEREUMACCOUNT Census_Type = 4
	Census_CA              Census_Type = 5
	Census_GRAVITON        Census_Type = 1001
	Census_IDEN3           Census_Type = 1002
)

// Enum value maps for Census_Type.
var (
	Census_Type_name = map[int32]string{
		0:    "UNKNOWN",
		1:    "ARBO_BLAKE2B",
		2:    "ARBO_POSEIDON",
		3:    "ETHEREUMSTORAGE",
		4:    "ETHEREUMACCOUNT",
		5:    "CA",
		1001: "GRAVITON",
		1002: "IDEN3",
	}
	Census_Type_value = map[string]int32{
		"UNKNOWN":         0,
		"ARBO_BLAKE2B":    1,
		"ARBO_POSEIDON":   2,
		"ETHEREUMSTORAGE": 3,
		"ETHEREUMACCOUNT": 4,
		"CA":              5,
		"GRAVITON":        1001,
		"IDEN3":           1002,
	}
)

func (x Census_Type) Enum() *Census_Type {
	p := new(Census_Type)
	*p = x
	return p
}

func (x Census_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Census_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_vochain_vochain_proto_enumTypes[4].Descriptor()
}

func (Census_Type) Type() protoreflect.EnumType {
	return &file_vochain_vochain_proto_enumTypes[4]
}

func (x Census_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Census_Type.Descriptor instead.
func (Census_Type) EnumDescriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{1, 0}
}

type ProofCA_Type int32

const (
	ProofCA_UNKNOWN               ProofCA_Type = 0
	ProofCA_ECDSA                 ProofCA_Type = 1
	ProofCA_ECDSA_PIDSALTED       ProofCA_Type = 2
	ProofCA_ECDSA_BLIND           ProofCA_Type = 3
	ProofCA_ECDSA_BLIND_PIDSALTED ProofCA_Type = 4
)

// Enum value maps for ProofCA_Type.
var (
	ProofCA_Type_name = map[int32]string{
		0: "UNKNOWN",
		1: "ECDSA",
		2: "ECDSA_PIDSALTED",
		3: "ECDSA_BLIND",
		4: "ECDSA_BLIND_PIDSALTED",
	}
	ProofCA_Type_value = map[string]int32{
		"UNKNOWN":               0,
		"ECDSA":                 1,
		"ECDSA_PIDSALTED":       2,
		"ECDSA_BLIND":           3,
		"ECDSA_BLIND_PIDSALTED": 4,
	}
)

func (x ProofCA_Type) Enum() *ProofCA_Type {
	p := new(ProofCA_Type)
	*p = x
	return p
}

func (x ProofCA_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProofCA_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_vochain_vochain_proto_enumTypes[5].Descriptor()
}

func (ProofCA_Type) Type() protoreflect.EnumType {
	return &file_vochain_vochain_proto_enumTypes[5]
}

func (x ProofCA_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProofCA_Type.Descriptor instead.
func (ProofCA_Type) EnumDescriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{8, 0}
}

type ProofArbo_Type int32

const (
	ProofArbo_BLAKE2B  ProofArbo_Type = 0
	ProofArbo_POSEIDON ProofArbo_Type = 1
)

// Enum value maps for ProofArbo_Type.
var (
	ProofArbo_Type_name = map[int32]string{
		0: "BLAKE2B",
		1: "POSEIDON",
	}
	ProofArbo_Type_value = map[string]int32{
		"BLAKE2B":  0,
		"POSEIDON": 1,
	}
)

func (x ProofArbo_Type) Enum() *ProofArbo_Type {
	p := new(ProofArbo_Type)
	*p = x
	return p
}

func (x ProofArbo_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProofArbo_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_vochain_vochain_proto_enumTypes[6].Descriptor()
}

func (ProofArbo_Type) Type() protoreflect.EnumType {
	return &file_vochain_vochain_proto_enumTypes[6]
}

func (x ProofArbo_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProofArbo_Type.Descriptor instead.
func (ProofArbo_Type) EnumDescriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{10, 0}
}

type ProofArbo_KeyType int32

const (
	ProofArbo_PUBKEY  ProofArbo_KeyType = 0
	ProofArbo_ADDRESS ProofArbo_KeyType = 1
)

// Enum value maps for ProofArbo_KeyType.
var (
	ProofArbo_KeyType_name = map[int32]string{
		0: "PUBKEY",
		1: "ADDRESS",
	}
	ProofArbo_KeyType_value = map[string]int32{
		"PUBKEY":  0,
		"ADDRESS": 1,
	}
)

func (x ProofArbo_KeyType) Enum() *ProofArbo_KeyType {
	p := new(ProofArbo_KeyType)
	*p = x
	return p
}

func (x ProofArbo_KeyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProofArbo_KeyType) Descriptor() protoreflect.EnumDescriptor {
	return file_vochain_vochain_proto_enumTypes[7].Descriptor()
}

func (ProofArbo_KeyType) Type() protoreflect.EnumType {
	return &file_vochain_vochain_proto_enumTypes[7]
}

func (x ProofArbo_KeyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProofArbo_KeyType.Descriptor instead.
func (ProofArbo_KeyType) EnumDescriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{10, 1}
}

type VoteEnvelope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique number per vote attempt, so that replay attacks can't reuse this payload
	Nonce []byte `protobuf:"bytes,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// The process for which the vote is casted
	ProcessId []byte `protobuf:"bytes,2,opt,name=processId,proto3" json:"processId,omitempty"`
	// Franchise proof
	Proof *Proof `protobuf:"bytes,3,opt,name=proof,proto3" json:"proof,omitempty"`
	// JSON string of the Vote Package (potentially encrypted), encoded as bytes.
	VotePackage []byte `protobuf:"bytes,4,opt,name=votePackage,proto3" json:"votePackage,omitempty"`
	// Hash of the private key + processId
	Nullifier []byte `protobuf:"bytes,5,opt,name=nullifier,proto3" json:"nullifier,omitempty"`
	// On encrypted votes, contains the (sorted) indexes of the keys used to encrypt
	EncryptionKeyIndexes []uint32 `protobuf:"varint,6,rep,packed,name=encryptionKeyIndexes,proto3" json:"encryptionKeyIndexes,omitempty"`
}

func (x *VoteEnvelope) Reset() {
	*x = VoteEnvelope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vochain_vochain_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoteEnvelope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoteEnvelope) ProtoMessage() {}

func (x *VoteEnvelope) ProtoReflect() protoreflect.Message {
	mi := &file_vochain_vochain_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoteEnvelope.ProtoReflect.Descriptor instead.
func (*VoteEnvelope) Descriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{0}
}

func (x *VoteEnvelope) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *VoteEnvelope) GetProcessId() []byte {
	if x != nil {
		return x.ProcessId
	}
	return nil
}

func (x *VoteEnvelope) GetProof() *Proof {
	if x != nil {
		return x.Proof
	}
	return nil
}

func (x *VoteEnvelope) GetVotePackage() []byte {
	if x != nil {
		return x.VotePackage
	}
	return nil
}

func (x *VoteEnvelope) GetNullifier() []byte {
	if x != nil {
		return x.Nullifier
	}
	return nil
}

func (x *VoteEnvelope) GetEncryptionKeyIndexes() []uint32 {
	if x != nil {
		return x.EncryptionKeyIndexes
	}
	return nil
}

type Census struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Census) Reset() {
	*x = Census{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vochain_vochain_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Census) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Census) ProtoMessage() {}

func (x *Census) ProtoReflect() protoreflect.Message {
	mi := &file_vochain_vochain_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Census.ProtoReflect.Descriptor instead.
func (*Census) Descriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{1}
}

type Proof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//
	//	*Proof_Graviton
	//	*Proof_Iden3
	//	*Proof_EthereumStorage
	//	*Proof_EthereumAccount
	//	*Proof_Ca
	//	*Proof_Arbo
	//	*Proof_ZkSnark
	//	*Proof_MinimeStorage
	Payload isProof_Payload `protobuf_oneof:"payload"`
}

func (x *Proof) Reset() {
	*x = Proof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vochain_vochain_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Proof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proof) ProtoMessage() {}

func (x *Proof) ProtoReflect() protoreflect.Message {
	mi := &file_vochain_vochain_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proof.ProtoReflect.Descriptor instead.
func (*Proof) Descriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{2}
}

func (m *Proof) GetPayload() isProof_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *Proof) GetGraviton() *ProofGraviton {
	if x, ok := x.GetPayload().(*Proof_Graviton); ok {
		return x.Graviton
	}
	return nil
}

func (x *Proof) GetIden3() *ProofIden3 {
	if x, ok := x.GetPayload().(*Proof_Iden3); ok {
		return x.Iden3
	}
	return nil
}

func (x *Proof) GetEthereumStorage() *ProofEthereumStorage {
	if x, ok := x.GetPayload().(*Proof_EthereumStorage); ok {
		return x.EthereumStorage
	}
	return nil
}

func (x *Proof) GetEthereumAccount() *ProofEthereumAccount {
	if x, ok := x.GetPayload().(*Proof_EthereumAccount); ok {
		return x.EthereumAccount
	}
	return nil
}

func (x *Proof) GetCa() *ProofCA {
	if x, ok := x.GetPayload().(*Proof_Ca); ok {
		return x.Ca
	}
	return nil
}

func (x *Proof) GetArbo() *ProofArbo {
	if x, ok := x.GetPayload().(*Proof_Arbo); ok {
		return x.Arbo
	}
	return nil
}

func (x *Proof) GetZkSnark() *ProofZkSNARK {
	if x, ok := x.GetPayload().(*Proof_ZkSnark); ok {
		return x.ZkSnark
	}
	return nil
}

func (x *Proof) GetMinimeStorage() *ProofMinime {
	if x, ok := x.GetPayload().(*Proof_MinimeStorage); ok {
		return x.MinimeStorage
	}
	return nil
}

type isProof_Payload interface {
	isProof_Payload()
}

type Proof_Graviton struct {
	// Proof used for signed envelopes
	Graviton *ProofGraviton `protobuf:"bytes,1,opt,name=graviton,proto3,oneof"`
}

type Proof_Iden3 struct {
	// Proof used for anonymous votes
	Iden3 *ProofIden3 `protobuf:"bytes,2,opt,name=iden3,proto3,oneof"`
}

type Proof_EthereumStorage struct {
	// Proof used on EVM census based processes
	EthereumStorage *ProofEthereumStorage `protobuf:"bytes,3,opt,name=ethereumStorage,proto3,oneof"`
}

type Proof_EthereumAccount struct {
	// Proof used by oracles to update the census of EVM processes
	EthereumAccount *ProofEthereumAccount `protobuf:"bytes,4,opt,name=ethereumAccount,proto3,oneof"`
}

type Proof_Ca struct {
	// Proof Certification Authority
	Ca *ProofCA `protobuf:"bytes,5,opt,name=ca,proto3,oneof"`
}

type Proof_Arbo struct {
	// Proof used for census using arbo
	Arbo *ProofArbo `protobuf:"bytes,6,opt,name=arbo,proto3,oneof"`
}

type Proof_ZkSnark struct {
	// zkSnark proof
	ZkSnark *ProofZkSNARK `protobuf:"bytes,7,opt,name=zkSnark,proto3,oneof"`
}

type Proof_MinimeStorage struct {
	// Proof used in Minime token based census
	MinimeStorage *ProofMinime `protobuf:"bytes,8,opt,name=minimeStorage,proto3,oneof"`
}

func (*Proof_Graviton) isProof_Payload() {}

func (*Proof_Iden3) isProof_Payload() {}

func (*Proof_EthereumStorage) isProof_Payload() {}

func (*Proof_EthereumAccount) isProof_Payload() {}

func (*Proof_Ca) isProof_Payload() {}

func (*Proof_Arbo) isProof_Payload() {}

func (*Proof_ZkSnark) isProof_Payload() {}

func (*Proof_MinimeStorage) isProof_Payload() {}

type ProofGraviton struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Siblings []byte `protobuf:"bytes,1,opt,name=siblings,proto3" json:"siblings,omitempty"`
}

func (x *ProofGraviton) Reset() {
	*x = ProofGraviton{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vochain_vochain_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProofGraviton) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProofGraviton) ProtoMessage() {}

func (x *ProofGraviton) ProtoReflect() protoreflect.Message {
	mi := &file_vochain_vochain_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProofGraviton.ProtoReflect.Descriptor instead.
func (*ProofGraviton) Descriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{3}
}

func (x *ProofGraviton) GetSiblings() []byte {
	if x != nil {
		return x.Siblings
	}
	return nil
}

type ProofIden3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Siblings []byte `protobuf:"bytes,1,opt,name=siblings,proto3" json:"siblings,omitempty"`
}

func (x *ProofIden3) Reset() {
	*x = ProofIden3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vochain_vochain_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProofIden3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProofIden3) ProtoMessage() {}

func (x *ProofIden3) ProtoReflect() protoreflect.Message {
	mi := &file_vochain_vochain_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProofIden3.ProtoReflect.Descriptor instead.
func (*ProofIden3) Descriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{4}
}

func (x *ProofIden3) GetSiblings() []byte {
	if x != nil {
		return x.Siblings
	}
	return nil
}

type ProofEthereumStorage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key      []byte   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value    []byte   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Siblings [][]byte `protobuf:"bytes,3,rep,name=siblings,proto3" json:"siblings,omitempty"`
}

func (x *ProofEthereumStorage) Reset() {
	*x = ProofEthereumStorage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vochain_vochain_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProofEthereumStorage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProofEthereumStorage) ProtoMessage() {}

func (x *ProofEthereumStorage) ProtoReflect() protoreflect.Message {
	mi := &file_vochain_vochain_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProofEthereumStorage.ProtoReflect.Descriptor instead.
func (*ProofEthereumStorage) Descriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{5}
}

func (x *ProofEthereumStorage) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *ProofEthereumStorage) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *ProofEthereumStorage) GetSiblings() [][]byte {
	if x != nil {
		return x.Siblings
	}
	return nil
}

type ProofEthereumAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nonce       []byte   `protobuf:"bytes,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Balance     []byte   `protobuf:"bytes,2,opt,name=balance,proto3" json:"balance,omitempty"` // Big Int encoded as bytes
	StorageHash []byte   `protobuf:"bytes,3,opt,name=storageHash,proto3" json:"storageHash,omitempty"`
	CodeHash    []byte   `protobuf:"bytes,4,opt,name=codeHash,proto3" json:"codeHash,omitempty"`
	Siblings    [][]byte `protobuf:"bytes,5,rep,name=siblings,proto3" json:"siblings,omitempty"`
}

func (x *ProofEthereumAccount) Reset() {
	*x = ProofEthereumAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vochain_vochain_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProofEthereumAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProofEthereumAccount) ProtoMessage() {}

func (x *ProofEthereumAccount) ProtoReflect() protoreflect.Message {
	mi := &file_vochain_vochain_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProofEthereumAccount.ProtoReflect.Descriptor instead.
func (*ProofEthereumAccount) Descriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{6}
}

func (x *ProofEthereumAccount) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *ProofEthereumAccount) GetBalance() []byte {
	if x != nil {
		return x.Balance
	}
	return nil
}

func (x *ProofEthereumAccount) GetStorageHash() []byte {
	if x != nil {
		return x.StorageHash
	}
	return nil
}

func (x *ProofEthereumAccount) GetCodeHash() []byte {
	if x != nil {
		return x.CodeHash
	}
	return nil
}

func (x *ProofEthereumAccount) GetSiblings() [][]byte {
	if x != nil {
		return x.Siblings
	}
	return nil
}

type ProofMinime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProofPrevBlock *ProofEthereumStorage `protobuf:"bytes,1,opt,name=proofPrevBlock,proto3" json:"proofPrevBlock,omitempty"`
	ProofNextBlock *ProofEthereumStorage `protobuf:"bytes,2,opt,name=proofNextBlock,proto3" json:"proofNextBlock,omitempty"`
}

func (x *ProofMinime) Reset() {
	*x = ProofMinime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vochain_vochain_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProofMinime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProofMinime) ProtoMessage() {}

func (x *ProofMinime) ProtoReflect() protoreflect.Message {
	mi := &file_vochain_vochain_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProofMinime.ProtoReflect.Descriptor instead.
func (*ProofMinime) Descriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{7}
}

func (x *ProofMinime) GetProofPrevBlock() *ProofEthereumStorage {
	if x != nil {
		return x.ProofPrevBlock
	}
	return nil
}

func (x *ProofMinime) GetProofNextBlock() *ProofEthereumStorage {
	if x != nil {
		return x.ProofNextBlock
	}
	return nil
}

type ProofCA struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      ProofCA_Type `protobuf:"varint,1,opt,name=type,proto3,enum=dvote.types.v1.ProofCA_Type" json:"type,omitempty"`
	Bundle    *CAbundle    `protobuf:"bytes,2,opt,name=bundle,proto3" json:"bundle,omitempty"`
	Signature []byte       `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *ProofCA) Reset() {
	*x = ProofCA{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vochain_vochain_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProofCA) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProofCA) ProtoMessage() {}

func (x *ProofCA) ProtoReflect() protoreflect.Message {
	mi := &file_vochain_vochain_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProofCA.ProtoReflect.Descriptor instead.
func (*ProofCA) Descriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{8}
}

func (x *ProofCA) GetType() ProofCA_Type {
	if x != nil {
		return x.Type
	}
	return ProofCA_UNKNOWN
}

func (x *ProofCA) GetBundle() *CAbundle {
	if x != nil {
		return x.Bundle
	}
	return nil
}

func (x *ProofCA) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type CAbundle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcessId []byte `protobuf:"bytes,1,opt,name=processId,proto3" json:"processId,omitempty"`
	Address   []byte `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *CAbundle) Reset() {
	*x = CAbundle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vochain_vochain_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAbundle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAbundle) ProtoMessage() {}

func (x *CAbundle) ProtoReflect() protoreflect.Message {
	mi := &file_vochain_vochain_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAbundle.ProtoReflect.Descriptor instead.
func (*CAbundle) Descriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{9}
}

func (x *CAbundle) GetProcessId() []byte {
	if x != nil {
		return x.ProcessId
	}
	return nil
}

func (x *CAbundle) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

type ProofArbo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type            ProofArbo_Type    `protobuf:"varint,1,opt,name=type,proto3,enum=dvote.types.v1.ProofArbo_Type" json:"type,omitempty"`
	Siblings        []byte            `protobuf:"bytes,2,opt,name=siblings,proto3" json:"siblings,omitempty"`
	AvalaibleWeight []byte            `protobuf:"bytes,3,opt,name=avalaibleWeight,proto3" json:"avalaibleWeight,omitempty"`
	KeyType         ProofArbo_KeyType `protobuf:"varint,4,opt,name=keyType,proto3,enum=dvote.types.v1.ProofArbo_KeyType" json:"keyType,omitempty"`
	VoteWeight      []byte            `protobuf:"bytes,5,opt,name=voteWeight,proto3" json:"voteWeight,omitempty"`
}

func (x *ProofArbo) Reset() {
	*x = ProofArbo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vochain_vochain_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProofArbo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProofArbo) ProtoMessage() {}

func (x *ProofArbo) ProtoReflect() protoreflect.Message {
	mi := &file_vochain_vochain_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProofArbo.ProtoReflect.Descriptor instead.
func (*ProofArbo) Descriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{10}
}

func (x *ProofArbo) GetType() ProofArbo_Type {
	if x != nil {
		return x.Type
	}
	return ProofArbo_BLAKE2B
}

func (x *ProofArbo) GetSiblings() []byte {
	if x != nil {
		return x.Siblings
	}
	return nil
}

func (x *ProofArbo) GetAvalaibleWeight() []byte {
	if x != nil {
		return x.AvalaibleWeight
	}
	return nil
}

func (x *ProofArbo) GetKeyType() ProofArbo_KeyType {
	if x != nil {
		return x.KeyType
	}
	return ProofArbo_PUBKEY
}

func (x *ProofArbo) GetVoteWeight() []byte {
	if x != nil {
		return x.VoteWeight
	}
	return nil
}

// Groth16 zkSNARK proof + public inputs
type ProofZkSNARK struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// circuitParametersIndex defines the index of the parameter set of the
	// circuit. Each process has defined a set of available parameters for
	// the same circuit, the 'parametersIndex' defines the index of the set
	// for which the ProofZkSNARK belongs for the circuit used in that
	// process.
	CircuitParametersIndex int32 `protobuf:"varint,1,opt,name=circuitParametersIndex,proto3" json:"circuitParametersIndex,omitempty"`
	// a represents a G1 point in Affine coordinates
	A []string `protobuf:"bytes,2,rep,name=a,proto3" json:"a,omitempty"`
	// b represents a G2 point in Affine coordinates, represented by an
	// array of arrays: []string => [2][2]bigint).
	// [w, x, y, z] => [[w, x], [y, z]]
	B []string `protobuf:"bytes,3,rep,name=b,proto3" json:"b,omitempty"`
	// c represents a G1 point in Affine coordinates
	C            []string `protobuf:"bytes,4,rep,name=c,proto3" json:"c,omitempty"`
	PublicInputs []string `protobuf:"bytes,5,rep,name=publicInputs,proto3" json:"publicInputs,omitempty"`
}

func (x *ProofZkSNARK) Reset() {
	*x = ProofZkSNARK{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vochain_vochain_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProofZkSNARK) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProofZkSNARK) ProtoMessage() {}

func (x *ProofZkSNARK) ProtoReflect() protoreflect.Message {
	mi := &file_vochain_vochain_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProofZkSNARK.ProtoReflect.Descriptor instead.
func (*ProofZkSNARK) Descriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{11}
}

func (x *ProofZkSNARK) GetCircuitParametersIndex() int32 {
	if x != nil {
		return x.CircuitParametersIndex
	}
	return 0
}

func (x *ProofZkSNARK) GetA() []string {
	if x != nil {
		return x.A
	}
	return nil
}

func (x *ProofZkSNARK) GetB() []string {
	if x != nil {
		return x.B
	}
	return nil
}

func (x *ProofZkSNARK) GetC() []string {
	if x != nil {
		return x.C
	}
	return nil
}

func (x *ProofZkSNARK) GetPublicInputs() []string {
	if x != nil {
		return x.PublicInputs
	}
	return nil
}

// Account represents an entity with an amount of tokens, usually attached to an address.
type Account struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Balance       uint64   `protobuf:"varint,1,opt,name=balance,proto3" json:"balance,omitempty"`
	Nonce         uint32   `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	InfoURI       string   `protobuf:"bytes,3,opt,name=infoURI,proto3" json:"infoURI,omitempty"`
	DelegateAddrs [][]byte `protobuf:"bytes,4,rep,name=delegateAddrs,proto3" json:"delegateAddrs,omitempty"`
	ProcessIndex  uint32   `protobuf:"varint,5,opt,name=processIndex,proto3" json:"processIndex,omitempty"`
}

func (x *Account) Reset() {
	*x = Account{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vochain_vochain_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Account) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Account) ProtoMessage() {}

func (x *Account) ProtoReflect() protoreflect.Message {
	mi := &file_vochain_vochain_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Account.ProtoReflect.Descriptor instead.
func (*Account) Descriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{12}
}

func (x *Account) GetBalance() uint64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *Account) GetNonce() uint32 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *Account) GetInfoURI() string {
	if x != nil {
		return x.InfoURI
	}
	return ""
}

func (x *Account) GetDelegateAddrs() [][]byte {
	if x != nil {
		return x.DelegateAddrs
	}
	return nil
}

func (x *Account) GetProcessIndex() uint32 {
	if x != nil {
		return x.ProcessIndex
	}
	return 0
}

type Treasurer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address []byte `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Nonce   uint32 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *Treasurer) Reset() {
	*x = Treasurer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vochain_vochain_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Treasurer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Treasurer) ProtoMessage() {}

func (x *Treasurer) ProtoReflect() protoreflect.Message {
	mi := &file_vochain_vochain_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Treasurer.ProtoReflect.Descriptor instead.
func (*Treasurer) Descriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{13}
}

func (x *Treasurer) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *Treasurer) GetNonce() uint32 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

type Tx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//
	//	*Tx_Vote
	//	*Tx_NewProcess
	//	*Tx_Admin
	//	*Tx_SetProcess
	//	*Tx_RegisterKey
	//	*Tx_MintTokens
	//	*Tx_SendTokens
	//	*Tx_SetTransactionCosts
	//	*Tx_SetAccount
	//	*Tx_CollectFaucet
	//	*Tx_SetKeykeeper
	//	*Tx_SetSik
	Payload isTx_Payload `protobuf_oneof:"payload"`
}

func (x *Tx) Reset() {
	*x = Tx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vochain_vochain_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tx) ProtoMessage() {}

func (x *Tx) ProtoReflect() protoreflect.Message {
	mi := &file_vochain_vochain_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tx.ProtoReflect.Descriptor instead.
func (*Tx) Descriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{14}
}

func (m *Tx) GetPayload() isTx_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *Tx) GetVote() *VoteEnvelope {
	if x, ok := x.GetPayload().(*Tx_Vote); ok {
		return x.Vote
	}
	return nil
}

func (x *Tx) GetNewProcess() *NewProcessTx {
	if x, ok := x.GetPayload().(*Tx_NewProcess); ok {
		return x.NewProcess
	}
	return nil
}

func (x *Tx) GetAdmin() *AdminTx {
	if x, ok := x.GetPayload().(*Tx_Admin); ok {
		return x.Admin
	}
	return nil
}

func (x *Tx) GetSetProcess() *SetProcessTx {
	if x, ok := x.GetPayload().(*Tx_SetProcess); ok {
		return x.SetProcess
	}
	return nil
}

func (x *Tx) GetRegisterKey() *RegisterKeyTx {
	if x, ok := x.GetPayload().(*Tx_RegisterKey); ok {
		return x.RegisterKey
	}
	return nil
}

func (x *Tx) GetMintTokens() *MintTokensTx {
	if x, ok := x.GetPayload().(*Tx_MintTokens); ok {
		return x.MintTokens
	}
	return nil
}

func (x *Tx) GetSendTokens() *SendTokensTx {
	if x, ok := x.GetPayload().(*Tx_SendTokens); ok {
		return x.SendTokens
	}
	return nil
}

func (x *Tx) GetSetTransactionCosts() *SetTransactionCostsTx {
	if x, ok := x.GetPayload().(*Tx_SetTransactionCosts); ok {
		return x.SetTransactionCosts
	}
	return nil
}

func (x *Tx) GetSetAccount() *SetAccountTx {
	if x, ok := x.GetPayload().(*Tx_SetAccount); ok {
		return x.SetAccount
	}
	return nil
}

func (x *Tx) GetCollectFaucet() *CollectFaucetTx {
	if x, ok := x.GetPayload().(*Tx_CollectFaucet); ok {
		return x.CollectFaucet
	}
	return nil
}

func (x *Tx) GetSetKeykeeper() *SetKeykeeperTx {
	if x, ok := x.GetPayload().(*Tx_SetKeykeeper); ok {
		return x.SetKeykeeper
	}
	return nil
}

func (x *Tx) GetSetSik() *SetSikTx {
	if x, ok := x.GetPayload().(*Tx_SetSik); ok {
		return x.SetSik
	}
	return nil
}

type isTx_Payload interface {
	isTx_Payload()
}

type Tx_Vote struct {
	Vote *VoteEnvelope `protobuf:"bytes,1,opt,name=vote,proto3,oneof"`
}

type Tx_NewProcess struct {
	NewProcess *NewProcessTx `protobuf:"bytes,2,opt,name=newProcess,proto3,oneof"`
}

type Tx_Admin struct {
	Admin *AdminTx `protobuf:"bytes,3,opt,name=admin,proto3,oneof"`
}

type Tx_SetProcess struct {
	SetProcess *SetProcessTx `protobuf:"bytes,4,opt,name=setProcess,proto3,oneof"`
}

type Tx_RegisterKey struct {
	RegisterKey *RegisterKeyTx `protobuf:"bytes,5,opt,name=registerKey,proto3,oneof"`
}

type Tx_MintTokens struct {
	MintTokens *MintTokensTx `protobuf:"bytes,6,opt,name=mintTokens,proto3,oneof"`
}

type Tx_SendTokens struct {
	SendTokens *SendTokensTx `protobuf:"bytes,7,opt,name=sendTokens,proto3,oneof"`
}

type Tx_SetTransactionCosts struct {
	SetTransactionCosts *SetTransactionCostsTx `protobuf:"bytes,8,opt,name=setTransactionCosts,proto3,oneof"`
}

type Tx_SetAccount struct {
	SetAccount *SetAccountTx `protobuf:"bytes,9,opt,name=setAccount,proto3,oneof"`
}

type Tx_CollectFaucet struct {
	CollectFaucet *CollectFaucetTx `protobuf:"bytes,10,opt,name=collectFaucet,proto3,oneof"`
}

type Tx_SetKeykeeper struct {
	SetKeykeeper *SetKeykeeperTx `protobuf:"bytes,11,opt,name=setKeykeeper,proto3,oneof"`
}

type Tx_SetSik struct {
	SetSik *SetSikTx `protobuf:"bytes,12,opt,name=setSik,proto3,oneof"`
}

func (*Tx_Vote) isTx_Payload() {}

func (*Tx_NewProcess) isTx_Payload() {}

func (*Tx_Admin) isTx_Payload() {}

func (*Tx_SetProcess) isTx_Payload() {}

func (*Tx_RegisterKey) isTx_Payload() {}

func (*Tx_MintTokens) isTx_Payload() {}

func (*Tx_SendTokens) isTx_Payload() {}

func (*Tx_SetTransactionCosts) isTx_Payload() {}

func (*Tx_SetAccount) isTx_Payload() {}

func (*Tx_CollectFaucet) isTx_Payload() {}

func (*Tx_SetKeykeeper) isTx_Payload() {}

func (*Tx_SetSik) isTx_Payload() {}

type SignedTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The bytes produced by Marshaling a Tx{} message
	Tx []byte `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
	// The signature for the tx bytes.
	// signature is only required in those transactions that actually need signature.
	// I.e zk-Snarks based transactions won't needed, however the transaction should use
	// this message type in order to preserve consistency on the Vochain
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3,oneof" json:"signature,omitempty"`
}

func (x *SignedTx) Reset() {
	*x = SignedTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vochain_vochain_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignedTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedTx) ProtoMessage() {}

func (x *SignedTx) ProtoReflect() protoreflect.Message {
	mi := &file_vochain_vochain_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedTx.ProtoReflect.Descriptor instead.
func (*SignedTx) Descriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{15}
}

func (x *SignedTx) GetTx() []byte {
	if x != nil {
		return x.Tx
	}
	return nil
}

func (x *SignedTx) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type NewProcessTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txtype  TxType   `protobuf:"varint,1,opt,name=txtype,proto3,enum=dvote.types.v1.TxType" json:"txtype,omitempty"`
	Nonce   uint32   `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Process *Process `protobuf:"bytes,3,opt,name=process,proto3" json:"process,omitempty"`
}

func (x *NewProcessTx) Reset() {
	*x = NewProcessTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vochain_vochain_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewProcessTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewProcessTx) ProtoMessage() {}

func (x *NewProcessTx) ProtoReflect() protoreflect.Message {
	mi := &file_vochain_vochain_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewProcessTx.ProtoReflect.Descriptor instead.
func (*NewProcessTx) Descriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{16}
}

func (x *NewProcessTx) GetTxtype() TxType {
	if x != nil {
		return x.Txtype
	}
	return TxType_TX_UNKNOWN
}

func (x *NewProcessTx) GetNonce() uint32 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *NewProcessTx) GetProcess() *Process {
	if x != nil {
		return x.Process
	}
	return nil
}

type SetProcessTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txtype        TxType         `protobuf:"varint,1,opt,name=txtype,proto3,enum=dvote.types.v1.TxType" json:"txtype,omitempty"`
	Nonce         uint32         `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	ProcessId     []byte         `protobuf:"bytes,3,opt,name=processId,proto3" json:"processId,omitempty"`
	Status        *ProcessStatus `protobuf:"varint,4,opt,name=status,proto3,enum=dvote.types.v1.ProcessStatus,oneof" json:"status,omitempty"`
	QuestionIndex *uint32        `protobuf:"varint,5,opt,name=questionIndex,proto3,oneof" json:"questionIndex,omitempty"`
	CensusRoot    []byte         `protobuf:"bytes,6,opt,name=censusRoot,proto3,oneof" json:"censusRoot,omitempty"`
	CensusURI     *string        `protobuf:"bytes,7,opt,name=censusURI,proto3,oneof" json:"censusURI,omitempty"`
	Proof         *Proof         `protobuf:"bytes,8,opt,name=proof,proto3,oneof" json:"proof,omitempty"`
	Results       *ProcessResult `protobuf:"bytes,9,opt,name=results,proto3,oneof" json:"results,omitempty"`
}

func (x *SetProcessTx) Reset() {
	*x = SetProcessTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vochain_vochain_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetProcessTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetProcessTx) ProtoMessage() {}

func (x *SetProcessTx) ProtoReflect() protoreflect.Message {
	mi := &file_vochain_vochain_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetProcessTx.ProtoReflect.Descriptor instead.
func (*SetProcessTx) Descriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{17}
}

func (x *SetProcessTx) GetTxtype() TxType {
	if x != nil {
		return x.Txtype
	}
	return TxType_TX_UNKNOWN
}

func (x *SetProcessTx) GetNonce() uint32 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *SetProcessTx) GetProcessId() []byte {
	if x != nil {
		return x.ProcessId
	}
	return nil
}

func (x *SetProcessTx) GetStatus() ProcessStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ProcessStatus_PROCESS_UNKNOWN
}

func (x *SetProcessTx) GetQuestionIndex() uint32 {
	if x != nil && x.QuestionIndex != nil {
		return *x.QuestionIndex
	}
	return 0
}

func (x *SetProcessTx) GetCensusRoot() []byte {
	if x != nil {
		return x.CensusRoot
	}
	return nil
}

func (x *SetProcessTx) GetCensusURI() string {
	if x != nil && x.CensusURI != nil {
		return *x.CensusURI
	}
	return ""
}

func (x *SetProcessTx) GetProof() *Proof {
	if x != nil {
		return x.Proof
	}
	return nil
}

func (x *SetProcessTx) GetResults() *ProcessResult {
	if x != nil {
		return x.Results
	}
	return nil
}

type AdminTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txtype               TxType  `protobuf:"varint,1,opt,name=txtype,proto3,enum=dvote.types.v1.TxType" json:"txtype,omitempty"`
	ProcessId            []byte  `protobuf:"bytes,2,opt,name=processId,proto3" json:"processId,omitempty"`
	Address              []byte  `protobuf:"bytes,3,opt,name=address,proto3,oneof" json:"address,omitempty"`
	EncryptionPrivateKey []byte  `protobuf:"bytes,5,opt,name=encryptionPrivateKey,proto3,oneof" json:"encryptionPrivateKey,omitempty"`
	EncryptionPublicKey  []byte  `protobuf:"bytes,6,opt,name=encryptionPublicKey,proto3,oneof" json:"encryptionPublicKey,omitempty"`
	KeyIndex             *uint32 `protobuf:"varint,7,opt,name=keyIndex,proto3,oneof" json:"keyIndex,omitempty"`
	Power                *uint64 `protobuf:"varint,8,opt,name=power,proto3,oneof" json:"power,omitempty"`
	PublicKey            []byte  `protobuf:"bytes,9,opt,name=publicKey,proto3,oneof" json:"publicKey,omitempty"`
	Nonce                uint32  `protobuf:"varint,11,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *AdminTx) Reset() {
	*x = AdminTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vochain_vochain_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminTx) ProtoMessage() {}

func (x *AdminTx) ProtoReflect() protoreflect.Message {
	mi := &file_vochain_vochain_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminTx.ProtoReflect.Descriptor instead.
func (*AdminTx) Descriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{18}
}

func (x *AdminTx) GetTxtype() TxType {
	if x != nil {
		return x.Txtype
	}
	return TxType_TX_UNKNOWN
}

func (x *AdminTx) GetProcessId() []byte {
	if x != nil {
		return x.ProcessId
	}
	return nil
}

func (x *AdminTx) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *AdminTx) GetEncryptionPrivateKey() []byte {
	if x != nil {
		return x.EncryptionPrivateKey
	}
	return nil
}

func (x *AdminTx) GetEncryptionPublicKey() []byte {
	if x != nil {
		return x.EncryptionPublicKey
	}
	return nil
}

func (x *AdminTx) GetKeyIndex() uint32 {
	if x != nil && x.KeyIndex != nil {
		return *x.KeyIndex
	}
	return 0
}

func (x *AdminTx) GetPower() uint64 {
	if x != nil && x.Power != nil {
		return *x.Power
	}
	return 0
}

func (x *AdminTx) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *AdminTx) GetNonce() uint32 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

type RegisterKeyTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nonce     uint32 `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`        // Unique number per vote attempt, so that replay attacks can't reuse this payload
	ProcessId []byte `protobuf:"bytes,2,opt,name=processId,proto3" json:"processId,omitempty"` // The process for which the vote is casted
	Proof     *Proof `protobuf:"bytes,3,opt,name=proof,proto3" json:"proof,omitempty"`         // Franchise proof
	NewKey    []byte `protobuf:"bytes,4,opt,name=newKey,proto3" json:"newKey,omitempty"`       // New key to register
	Weight    string `protobuf:"bytes,5,opt,name=weight,proto3" json:"weight,omitempty"`       // Weight to delegate to newKey
}

func (x *RegisterKeyTx) Reset() {
	*x = RegisterKeyTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vochain_vochain_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterKeyTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterKeyTx) ProtoMessage() {}

func (x *RegisterKeyTx) ProtoReflect() protoreflect.Message {
	mi := &file_vochain_vochain_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterKeyTx.ProtoReflect.Descriptor instead.
func (*RegisterKeyTx) Descriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{19}
}

func (x *RegisterKeyTx) GetNonce() uint32 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *RegisterKeyTx) GetProcessId() []byte {
	if x != nil {
		return x.ProcessId
	}
	return nil
}

func (x *RegisterKeyTx) GetProof() *Proof {
	if x != nil {
		return x.Proof
	}
	return nil
}

func (x *RegisterKeyTx) GetNewKey() []byte {
	if x != nil {
		return x.NewKey
	}
	return nil
}

func (x *RegisterKeyTx) GetWeight() string {
	if x != nil {
		return x.Weight
	}
	return ""
}

type MintTokensTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txtype TxType `protobuf:"varint,1,opt,name=txtype,proto3,enum=dvote.types.v1.TxType" json:"txtype,omitempty"`
	Nonce  uint32 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	To     []byte `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	Value  uint64 `protobuf:"varint,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *MintTokensTx) Reset() {
	*x = MintTokensTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vochain_vochain_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MintTokensTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MintTokensTx) ProtoMessage() {}

func (x *MintTokensTx) ProtoReflect() protoreflect.Message {
	mi := &file_vochain_vochain_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MintTokensTx.ProtoReflect.Descriptor instead.
func (*MintTokensTx) Descriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{20}
}

func (x *MintTokensTx) GetTxtype() TxType {
	if x != nil {
		return x.Txtype
	}
	return TxType_TX_UNKNOWN
}

func (x *MintTokensTx) GetNonce() uint32 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *MintTokensTx) GetTo() []byte {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *MintTokensTx) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type SendTokensTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txtype TxType `protobuf:"varint,1,opt,name=txtype,proto3,enum=dvote.types.v1.TxType" json:"txtype,omitempty"`
	Nonce  uint32 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	From   []byte `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	To     []byte `protobuf:"bytes,4,opt,name=to,proto3" json:"to,omitempty"`
	Value  uint64 `protobuf:"varint,5,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SendTokensTx) Reset() {
	*x = SendTokensTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vochain_vochain_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendTokensTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendTokensTx) ProtoMessage() {}

func (x *SendTokensTx) ProtoReflect() protoreflect.Message {
	mi := &file_vochain_vochain_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendTokensTx.ProtoReflect.Descriptor instead.
func (*SendTokensTx) Descriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{21}
}

func (x *SendTokensTx) GetTxtype() TxType {
	if x != nil {
		return x.Txtype
	}
	return TxType_TX_UNKNOWN
}

func (x *SendTokensTx) GetNonce() uint32 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *SendTokensTx) GetFrom() []byte {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *SendTokensTx) GetTo() []byte {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *SendTokensTx) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type SetTransactionCostsTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txtype TxType `protobuf:"varint,1,opt,name=txtype,proto3,enum=dvote.types.v1.TxType" json:"txtype,omitempty"`
	Nonce  uint32 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Value  uint64 `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SetTransactionCostsTx) Reset() {
	*x = SetTransactionCostsTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vochain_vochain_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTransactionCostsTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTransactionCostsTx) ProtoMessage() {}

func (x *SetTransactionCostsTx) ProtoReflect() protoreflect.Message {
	mi := &file_vochain_vochain_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTransactionCostsTx.ProtoReflect.Descriptor instead.
func (*SetTransactionCostsTx) Descriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{22}
}

func (x *SetTransactionCostsTx) GetTxtype() TxType {
	if x != nil {
		return x.Txtype
	}
	return TxType_TX_UNKNOWN
}

func (x *SetTransactionCostsTx) GetNonce() uint32 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *SetTransactionCostsTx) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type SetAccountTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txtype        TxType         `protobuf:"varint,1,opt,name=txtype,proto3,enum=dvote.types.v1.TxType" json:"txtype,omitempty"`
	Nonce         *uint32        `protobuf:"varint,2,opt,name=nonce,proto3,oneof" json:"nonce,omitempty"`
	InfoURI       *string        `protobuf:"bytes,3,opt,name=infoURI,proto3,oneof" json:"infoURI,omitempty"`
	Account       []byte         `protobuf:"bytes,4,opt,name=account,proto3,oneof" json:"account,omitempty"`
	FaucetPackage *FaucetPackage `protobuf:"bytes,5,opt,name=faucetPackage,proto3,oneof" json:"faucetPackage,omitempty"`
	Delegates     [][]byte       `protobuf:"bytes,6,rep,name=delegates,proto3" json:"delegates,omitempty"`
	Sik           []byte         `protobuf:"bytes,7,opt,name=sik,proto3,oneof" json:"sik,omitempty"`
}

func (x *SetAccountTx) Reset() {
	*x = SetAccountTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vochain_vochain_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetAccountTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAccountTx) ProtoMessage() {}

func (x *SetAccountTx) ProtoReflect() protoreflect.Message {
	mi := &file_vochain_vochain_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAccountTx.ProtoReflect.Descriptor instead.
func (*SetAccountTx) Descriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{23}
}

func (x *SetAccountTx) GetTxtype() TxType {
	if x != nil {
		return x.Txtype
	}
	return TxType_TX_UNKNOWN
}

func (x *SetAccountTx) GetNonce() uint32 {
	if x != nil && x.Nonce != nil {
		return *x.Nonce
	}
	return 0
}

func (x *SetAccountTx) GetInfoURI() string {
	if x != nil && x.InfoURI != nil {
		return *x.InfoURI
	}
	return ""
}

func (x *SetAccountTx) GetAccount() []byte {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *SetAccountTx) GetFaucetPackage() *FaucetPackage {
	if x != nil {
		return x.FaucetPackage
	}
	return nil
}

func (x *SetAccountTx) GetDelegates() [][]byte {
	if x != nil {
		return x.Delegates
	}
	return nil
}

func (x *SetAccountTx) GetSik() []byte {
	if x != nil {
		return x.Sik
	}
	return nil
}

type SetSikTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txtype  TxType `protobuf:"varint,1,opt,name=txtype,proto3,enum=dvote.types.v1.TxType" json:"txtype,omitempty"`
	Address []byte `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Sik     []byte `protobuf:"bytes,3,opt,name=sik,proto3,oneof" json:"sik,omitempty"`
}

func (x *SetSikTx) Reset() {
	*x = SetSikTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vochain_vochain_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSikTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSikTx) ProtoMessage() {}

func (x *SetSikTx) ProtoReflect() protoreflect.Message {
	mi := &file_vochain_vochain_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSikTx.ProtoReflect.Descriptor instead.
func (*SetSikTx) Descriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{24}
}

func (x *SetSikTx) GetTxtype() TxType {
	if x != nil {
		return x.Txtype
	}
	return TxType_TX_UNKNOWN
}

func (x *SetSikTx) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *SetSikTx) GetSik() []byte {
	if x != nil {
		return x.Sik
	}
	return nil
}

type CollectFaucetTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxType        TxType         `protobuf:"varint,1,opt,name=txType,proto3,enum=dvote.types.v1.TxType" json:"txType,omitempty"`
	FaucetPackage *FaucetPackage `protobuf:"bytes,2,opt,name=faucetPackage,proto3" json:"faucetPackage,omitempty"`
	Nonce         uint32         `protobuf:"varint,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *CollectFaucetTx) Reset() {
	*x = CollectFaucetTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vochain_vochain_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectFaucetTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectFaucetTx) ProtoMessage() {}

func (x *CollectFaucetTx) ProtoReflect() protoreflect.Message {
	mi := &file_vochain_vochain_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectFaucetTx.ProtoReflect.Descriptor instead.
func (*CollectFaucetTx) Descriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{25}
}

func (x *CollectFaucetTx) GetTxType() TxType {
	if x != nil {
		return x.TxType
	}
	return TxType_TX_UNKNOWN
}

func (x *CollectFaucetTx) GetFaucetPackage() *FaucetPackage {
	if x != nil {
		return x.FaucetPackage
	}
	return nil
}

func (x *CollectFaucetTx) GetNonce() uint32 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

type FaucetPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identifier uint64 `protobuf:"varint,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	To         []byte `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	Amount     uint64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *FaucetPayload) Reset() {
	*x = FaucetPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vochain_vochain_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FaucetPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FaucetPayload) ProtoMessage() {}

func (x *FaucetPayload) ProtoReflect() protoreflect.Message {
	mi := &file_vochain_vochain_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FaucetPayload.ProtoReflect.Descriptor instead.
func (*FaucetPayload) Descriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{26}
}

func (x *FaucetPayload) GetIdentifier() uint64 {
	if x != nil {
		return x.Identifier
	}
	return 0
}

func (x *FaucetPayload) GetTo() []byte {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *FaucetPayload) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type FaucetPackage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload   []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *FaucetPackage) Reset() {
	*x = FaucetPackage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vochain_vochain_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FaucetPackage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FaucetPackage) ProtoMessage() {}

func (x *FaucetPackage) ProtoReflect() protoreflect.Message {
	mi := &file_vochain_vochain_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FaucetPackage.ProtoReflect.Descriptor instead.
func (*FaucetPackage) Descriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{27}
}

func (x *FaucetPackage) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *FaucetPackage) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type SetKeykeeperTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txtype    TxType `protobuf:"varint,1,opt,name=txtype,proto3,enum=dvote.types.v1.TxType" json:"txtype,omitempty"`
	Nonce     uint32 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Keykeeper []byte `protobuf:"bytes,3,opt,name=keykeeper,proto3" json:"keykeeper,omitempty"`
}

func (x *SetKeykeeperTx) Reset() {
	*x = SetKeykeeperTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vochain_vochain_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetKeykeeperTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetKeykeeperTx) ProtoMessage() {}

func (x *SetKeykeeperTx) ProtoReflect() protoreflect.Message {
	mi := &file_vochain_vochain_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetKeykeeperTx.ProtoReflect.Descriptor instead.
func (*SetKeykeeperTx) Descriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{28}
}

func (x *SetKeykeeperTx) GetTxtype() TxType {
	if x != nil {
		return x.Txtype
	}
	return TxType_TX_UNKNOWN
}

func (x *SetKeykeeperTx) GetNonce() uint32 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *SetKeykeeperTx) GetKeykeeper() []byte {
	if x != nil {
		return x.Keykeeper
	}
	return nil
}

type Process struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcessId []byte `protobuf:"bytes,1,opt,name=processId,proto3" json:"processId,omitempty"`
	// EntityId identifies unequivocally an entity
	EntityId []byte `protobuf:"bytes,2,opt,name=entityId,proto3" json:"entityId,omitempty"`
	// StartBlock represents the tendermint block where the process goes from scheduled to active
	StartBlock uint32 `protobuf:"varint,3,opt,name=startBlock,proto3" json:"startBlock,omitempty"`
	// BlockCount represents the amount of tendermint blocks that the process will last
	BlockCount uint32 `protobuf:"varint,4,opt,name=blockCount,proto3" json:"blockCount,omitempty"`
	// CensusRoot merkle root of all the census in the process
	CensusRoot []byte `protobuf:"bytes,5,opt,name=censusRoot,proto3" json:"censusRoot,omitempty"`
	// CensusURI where to find the census
	CensusURI *string `protobuf:"bytes,6,opt,name=censusURI,proto3,oneof" json:"censusURI,omitempty"`
	// EncryptionPrivateKeys are the keys required to decrypt the votes
	EncryptionPrivateKeys []string `protobuf:"bytes,8,rep,name=encryptionPrivateKeys,proto3" json:"encryptionPrivateKeys,omitempty"`
	// EncryptionPublicKeys are the keys required to encrypt the votes
	EncryptionPublicKeys []string            `protobuf:"bytes,9,rep,name=encryptionPublicKeys,proto3" json:"encryptionPublicKeys,omitempty"`
	KeyIndex             *uint32             `protobuf:"varint,11,opt,name=keyIndex,proto3,oneof" json:"keyIndex,omitempty"`
	Status               ProcessStatus       `protobuf:"varint,12,opt,name=status,proto3,enum=dvote.types.v1.ProcessStatus" json:"status,omitempty"`
	ParamsSignature      []byte              `protobuf:"bytes,13,opt,name=paramsSignature,proto3,oneof" json:"paramsSignature,omitempty"`
	Namespace            uint32              `protobuf:"varint,14,opt,name=namespace,proto3" json:"namespace,omitempty"`
	EnvelopeType         *EnvelopeType       `protobuf:"bytes,15,opt,name=envelopeType,proto3" json:"envelopeType,omitempty"`
	Mode                 *ProcessMode        `protobuf:"bytes,16,opt,name=mode,proto3" json:"mode,omitempty"`
	QuestionIndex        *uint32             `protobuf:"varint,17,opt,name=questionIndex,proto3,oneof" json:"questionIndex,omitempty"`
	QuestionCount        *uint32             `protobuf:"varint,18,opt,name=questionCount,proto3,oneof" json:"questionCount,omitempty"`
	VoteOptions          *ProcessVoteOptions `protobuf:"bytes,19,opt,name=voteOptions,proto3" json:"voteOptions,omitempty"`
	CensusOrigin         CensusOrigin        `protobuf:"varint,20,opt,name=censusOrigin,proto3,enum=dvote.types.v1.CensusOrigin" json:"censusOrigin,omitempty"`
	Results              *ProcessResult      `protobuf:"bytes,21,opt,name=results,proto3" json:"results,omitempty"`
	EthIndexSlot         *uint32             `protobuf:"varint,23,opt,name=ethIndexSlot,proto3,oneof" json:"ethIndexSlot,omitempty"`
	// SourceBlockHeight is the block height of the origin blockchain (if any)
	SourceBlockHeight *uint64 `protobuf:"varint,24,opt,name=sourceBlockHeight,proto3,oneof" json:"sourceBlockHeight,omitempty"`
	// Owner is the creator of a process (if any) otherwise is assumed the creator is the entityId
	Owner []byte `protobuf:"bytes,25,opt,name=owner,proto3,oneof" json:"owner,omitempty"`
	// Metadata is the content hashed URI of the JSON meta data (See Data Origins)
	Metadata *string `protobuf:"bytes,26,opt,name=metadata,proto3,oneof" json:"metadata,omitempty"`
	// SourceNetworkId is the identifier of the network origin (where the process have been created)
	SourceNetworkId SourceNetworkId `protobuf:"varint,27,opt,name=sourceNetworkId,proto3,enum=dvote.types.v1.SourceNetworkId" json:"sourceNetworkId,omitempty"`
	// MaxCensusSize is set by the Process creator, indicates the maximum number of votes that will be allowed.
	MaxCensusSize uint64 `protobuf:"varint,28,opt,name=maxCensusSize,proto3" json:"maxCensusSize,omitempty"`
	// RollingCensusRoot merkle root of the rolling census.  Set by the
	// vocdoni-node when Mode.Process = true
	RollingCensusRoot []byte `protobuf:"bytes,29,opt,name=rollingCensusRoot,proto3,oneof" json:"rollingCensusRoot,omitempty"`
	// RollingCensusSize is set by the vocdoni-node when Mode.PreRegister =
	// true and the StartBlock has been reached.
	RollingCensusSize *uint64 `protobuf:"varint,30,opt,name=rollingCensusSize,proto3,oneof" json:"rollingCensusSize,omitempty"`
	// NullifiersRoot is the root of the pre-census nullifiers merkle tree.
	// Used when Mode.PreRegister = true.
	NullifiersRoot []byte `protobuf:"bytes,31,opt,name=nullifiersRoot,proto3,oneof" json:"nullifiersRoot,omitempty"`
	// sourceNetworkContractAddr is used for EVM token based voting and it is
	// the contract address of the token that is going to define the census
	SourceNetworkContractAddr []byte `protobuf:"bytes,32,opt,name=sourceNetworkContractAddr,proto3,oneof" json:"sourceNetworkContractAddr,omitempty"`
	// tokenDecimals represents the number of decimals of the token (i.e ERC20) used for voting.
	// It is normally used for processes with on-chain census
	TokenDecimals *uint32 `protobuf:"varint,33,opt,name=tokenDecimals,proto3,oneof" json:"tokenDecimals,omitempty"`
}

func (x *Process) Reset() {
	*x = Process{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vochain_vochain_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Process) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Process) ProtoMessage() {}

func (x *Process) ProtoReflect() protoreflect.Message {
	mi := &file_vochain_vochain_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Process.ProtoReflect.Descriptor instead.
func (*Process) Descriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{29}
}

func (x *Process) GetProcessId() []byte {
	if x != nil {
		return x.ProcessId
	}
	return nil
}

func (x *Process) GetEntityId() []byte {
	if x != nil {
		return x.EntityId
	}
	return nil
}

func (x *Process) GetStartBlock() uint32 {
	if x != nil {
		return x.StartBlock
	}
	return 0
}

func (x *Process) GetBlockCount() uint32 {
	if x != nil {
		return x.BlockCount
	}
	return 0
}

func (x *Process) GetCensusRoot() []byte {
	if x != nil {
		return x.CensusRoot
	}
	return nil
}

func (x *Process) GetCensusURI() string {
	if x != nil && x.CensusURI != nil {
		return *x.CensusURI
	}
	return ""
}

func (x *Process) GetEncryptionPrivateKeys() []string {
	if x != nil {
		return x.EncryptionPrivateKeys
	}
	return nil
}

func (x *Process) GetEncryptionPublicKeys() []string {
	if x != nil {
		return x.EncryptionPublicKeys
	}
	return nil
}

func (x *Process) GetKeyIndex() uint32 {
	if x != nil && x.KeyIndex != nil {
		return *x.KeyIndex
	}
	return 0
}

func (x *Process) GetStatus() ProcessStatus {
	if x != nil {
		return x.Status
	}
	return ProcessStatus_PROCESS_UNKNOWN
}

func (x *Process) GetParamsSignature() []byte {
	if x != nil {
		return x.ParamsSignature
	}
	return nil
}

func (x *Process) GetNamespace() uint32 {
	if x != nil {
		return x.Namespace
	}
	return 0
}

func (x *Process) GetEnvelopeType() *EnvelopeType {
	if x != nil {
		return x.EnvelopeType
	}
	return nil
}

func (x *Process) GetMode() *ProcessMode {
	if x != nil {
		return x.Mode
	}
	return nil
}

func (x *Process) GetQuestionIndex() uint32 {
	if x != nil && x.QuestionIndex != nil {
		return *x.QuestionIndex
	}
	return 0
}

func (x *Process) GetQuestionCount() uint32 {
	if x != nil && x.QuestionCount != nil {
		return *x.QuestionCount
	}
	return 0
}

func (x *Process) GetVoteOptions() *ProcessVoteOptions {
	if x != nil {
		return x.VoteOptions
	}
	return nil
}

func (x *Process) GetCensusOrigin() CensusOrigin {
	if x != nil {
		return x.CensusOrigin
	}
	return CensusOrigin_CENSUS_UNKNOWN
}

func (x *Process) GetResults() *ProcessResult {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *Process) GetEthIndexSlot() uint32 {
	if x != nil && x.EthIndexSlot != nil {
		return *x.EthIndexSlot
	}
	return 0
}

func (x *Process) GetSourceBlockHeight() uint64 {
	if x != nil && x.SourceBlockHeight != nil {
		return *x.SourceBlockHeight
	}
	return 0
}

func (x *Process) GetOwner() []byte {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *Process) GetMetadata() string {
	if x != nil && x.Metadata != nil {
		return *x.Metadata
	}
	return ""
}

func (x *Process) GetSourceNetworkId() SourceNetworkId {
	if x != nil {
		return x.SourceNetworkId
	}
	return SourceNetworkId_UNKNOWN
}

func (x *Process) GetMaxCensusSize() uint64 {
	if x != nil {
		return x.MaxCensusSize
	}
	return 0
}

func (x *Process) GetRollingCensusRoot() []byte {
	if x != nil {
		return x.RollingCensusRoot
	}
	return nil
}

func (x *Process) GetRollingCensusSize() uint64 {
	if x != nil && x.RollingCensusSize != nil {
		return *x.RollingCensusSize
	}
	return 0
}

func (x *Process) GetNullifiersRoot() []byte {
	if x != nil {
		return x.NullifiersRoot
	}
	return nil
}

func (x *Process) GetSourceNetworkContractAddr() []byte {
	if x != nil {
		return x.SourceNetworkContractAddr
	}
	return nil
}

func (x *Process) GetTokenDecimals() uint32 {
	if x != nil && x.TokenDecimals != nil {
		return *x.TokenDecimals
	}
	return 0
}

type EnvelopeType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Serial         bool `protobuf:"varint,1,opt,name=serial,proto3" json:"serial,omitempty"`
	Anonymous      bool `protobuf:"varint,2,opt,name=anonymous,proto3" json:"anonymous,omitempty"`
	EncryptedVotes bool `protobuf:"varint,3,opt,name=encryptedVotes,proto3" json:"encryptedVotes,omitempty"`
	UniqueValues   bool `protobuf:"varint,4,opt,name=uniqueValues,proto3" json:"uniqueValues,omitempty"`
	CostFromWeight bool `protobuf:"varint,5,opt,name=costFromWeight,proto3" json:"costFromWeight,omitempty"`
}

func (x *EnvelopeType) Reset() {
	*x = EnvelopeType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vochain_vochain_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnvelopeType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvelopeType) ProtoMessage() {}

func (x *EnvelopeType) ProtoReflect() protoreflect.Message {
	mi := &file_vochain_vochain_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvelopeType.ProtoReflect.Descriptor instead.
func (*EnvelopeType) Descriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{30}
}

func (x *EnvelopeType) GetSerial() bool {
	if x != nil {
		return x.Serial
	}
	return false
}

func (x *EnvelopeType) GetAnonymous() bool {
	if x != nil {
		return x.Anonymous
	}
	return false
}

func (x *EnvelopeType) GetEncryptedVotes() bool {
	if x != nil {
		return x.EncryptedVotes
	}
	return false
}

func (x *EnvelopeType) GetUniqueValues() bool {
	if x != nil {
		return x.UniqueValues
	}
	return false
}

func (x *EnvelopeType) GetCostFromWeight() bool {
	if x != nil {
		return x.CostFromWeight
	}
	return false
}

type ProcessMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AutoStart         bool `protobuf:"varint,1,opt,name=autoStart,proto3" json:"autoStart,omitempty"`
	Interruptible     bool `protobuf:"varint,2,opt,name=interruptible,proto3" json:"interruptible,omitempty"`
	DynamicCensus     bool `protobuf:"varint,3,opt,name=dynamicCensus,proto3" json:"dynamicCensus,omitempty"`
	EncryptedMetaData bool `protobuf:"varint,4,opt,name=encryptedMetaData,proto3" json:"encryptedMetaData,omitempty"`
	PreRegister       bool `protobuf:"varint,5,opt,name=preRegister,proto3" json:"preRegister,omitempty"`
}

func (x *ProcessMode) Reset() {
	*x = ProcessMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vochain_vochain_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessMode) ProtoMessage() {}

func (x *ProcessMode) ProtoReflect() protoreflect.Message {
	mi := &file_vochain_vochain_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessMode.ProtoReflect.Descriptor instead.
func (*ProcessMode) Descriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{31}
}

func (x *ProcessMode) GetAutoStart() bool {
	if x != nil {
		return x.AutoStart
	}
	return false
}

func (x *ProcessMode) GetInterruptible() bool {
	if x != nil {
		return x.Interruptible
	}
	return false
}

func (x *ProcessMode) GetDynamicCensus() bool {
	if x != nil {
		return x.DynamicCensus
	}
	return false
}

func (x *ProcessMode) GetEncryptedMetaData() bool {
	if x != nil {
		return x.EncryptedMetaData
	}
	return false
}

func (x *ProcessMode) GetPreRegister() bool {
	if x != nil {
		return x.PreRegister
	}
	return false
}

type ProcessVoteOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxCount          uint32 `protobuf:"varint,1,opt,name=maxCount,proto3" json:"maxCount,omitempty"`
	MaxValue          uint32 `protobuf:"varint,2,opt,name=maxValue,proto3" json:"maxValue,omitempty"`
	MaxVoteOverwrites uint32 `protobuf:"varint,3,opt,name=maxVoteOverwrites,proto3" json:"maxVoteOverwrites,omitempty"`
	MaxTotalCost      uint32 `protobuf:"varint,4,opt,name=maxTotalCost,proto3" json:"maxTotalCost,omitempty"`
	CostExponent      uint32 `protobuf:"varint,5,opt,name=costExponent,proto3" json:"costExponent,omitempty"`
}

func (x *ProcessVoteOptions) Reset() {
	*x = ProcessVoteOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vochain_vochain_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessVoteOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessVoteOptions) ProtoMessage() {}

func (x *ProcessVoteOptions) ProtoReflect() protoreflect.Message {
	mi := &file_vochain_vochain_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessVoteOptions.ProtoReflect.Descriptor instead.
func (*ProcessVoteOptions) Descriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{32}
}

func (x *ProcessVoteOptions) GetMaxCount() uint32 {
	if x != nil {
		return x.MaxCount
	}
	return 0
}

func (x *ProcessVoteOptions) GetMaxValue() uint32 {
	if x != nil {
		return x.MaxValue
	}
	return 0
}

func (x *ProcessVoteOptions) GetMaxVoteOverwrites() uint32 {
	if x != nil {
		return x.MaxVoteOverwrites
	}
	return 0
}

func (x *ProcessVoteOptions) GetMaxTotalCost() uint32 {
	if x != nil {
		return x.MaxTotalCost
	}
	return 0
}

func (x *ProcessVoteOptions) GetCostExponent() uint32 {
	if x != nil {
		return x.CostExponent
	}
	return 0
}

type OracleList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oracles [][]byte `protobuf:"bytes,1,rep,name=oracles,proto3" json:"oracles,omitempty"`
}

func (x *OracleList) Reset() {
	*x = OracleList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vochain_vochain_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OracleList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OracleList) ProtoMessage() {}

func (x *OracleList) ProtoReflect() protoreflect.Message {
	mi := &file_vochain_vochain_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OracleList.ProtoReflect.Descriptor instead.
func (*OracleList) Descriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{33}
}

func (x *OracleList) GetOracles() [][]byte {
	if x != nil {
		return x.Oracles
	}
	return nil
}

type ValidatorList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Validators []*Validator `protobuf:"bytes,1,rep,name=validators,proto3" json:"validators,omitempty"`
}

func (x *ValidatorList) Reset() {
	*x = ValidatorList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vochain_vochain_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidatorList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatorList) ProtoMessage() {}

func (x *ValidatorList) ProtoReflect() protoreflect.Message {
	mi := &file_vochain_vochain_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidatorList.ProtoReflect.Descriptor instead.
func (*ValidatorList) Descriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{34}
}

func (x *ValidatorList) GetValidators() []*Validator {
	if x != nil {
		return x.Validators
	}
	return nil
}

type Validator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address  []byte `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	PubKey   []byte `protobuf:"bytes,2,opt,name=pubKey,proto3" json:"pubKey,omitempty"`
	Power    uint64 `protobuf:"varint,3,opt,name=power,proto3" json:"power,omitempty"`
	Name     string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	KeyIndex uint32 `protobuf:"varint,5,opt,name=keyIndex,proto3" json:"keyIndex,omitempty"`
}

func (x *Validator) Reset() {
	*x = Validator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vochain_vochain_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Validator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Validator) ProtoMessage() {}

func (x *Validator) ProtoReflect() protoreflect.Message {
	mi := &file_vochain_vochain_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Validator.ProtoReflect.Descriptor instead.
func (*Validator) Descriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{35}
}

func (x *Validator) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *Validator) GetPubKey() []byte {
	if x != nil {
		return x.PubKey
	}
	return nil
}

func (x *Validator) GetPower() uint64 {
	if x != nil {
		return x.Power
	}
	return 0
}

func (x *Validator) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Validator) GetKeyIndex() uint32 {
	if x != nil {
		return x.KeyIndex
	}
	return 0
}

type TendermintHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// basic block info
	ChainId   string `protobuf:"bytes,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Height    int64  `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	Timestamp int64  `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// prev block info
	BlockID []byte `protobuf:"bytes,5,opt,name=blockID,proto3" json:"blockID,omitempty"`
	// hashes of block data
	LastCommitHash []byte `protobuf:"bytes,6,opt,name=last_commit_hash,json=lastCommitHash,proto3" json:"last_commit_hash,omitempty"` // commit from validators from the last block
	DataHash       []byte `protobuf:"bytes,7,opt,name=data_hash,json=dataHash,proto3" json:"data_hash,omitempty"`                     // transactions
	// hashes from the app output from the prev block
	ValidatorsHash     []byte `protobuf:"bytes,8,opt,name=validators_hash,json=validatorsHash,proto3" json:"validators_hash,omitempty"`               // validators for the current block
	NextValidatorsHash []byte `protobuf:"bytes,9,opt,name=next_validators_hash,json=nextValidatorsHash,proto3" json:"next_validators_hash,omitempty"` // validators for the next block
	ConsensusHash      []byte `protobuf:"bytes,10,opt,name=consensus_hash,json=consensusHash,proto3" json:"consensus_hash,omitempty"`                 // consensus params for current block
	AppHash            []byte `protobuf:"bytes,11,opt,name=app_hash,json=appHash,proto3" json:"app_hash,omitempty"`                                   // state after txs from the previous block
	LastResultsHash    []byte `protobuf:"bytes,12,opt,name=last_results_hash,json=lastResultsHash,proto3" json:"last_results_hash,omitempty"`         // root hash of all results from the txs from the previous block
	// consensus info
	EvidenceHash    []byte `protobuf:"bytes,13,opt,name=evidence_hash,json=evidenceHash,proto3" json:"evidence_hash,omitempty"`          // evidence included in the block
	ProposerAddress []byte `protobuf:"bytes,14,opt,name=proposer_address,json=proposerAddress,proto3" json:"proposer_address,omitempty"` // original proposer of the block
}

func (x *TendermintHeader) Reset() {
	*x = TendermintHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vochain_vochain_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TendermintHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TendermintHeader) ProtoMessage() {}

func (x *TendermintHeader) ProtoReflect() protoreflect.Message {
	mi := &file_vochain_vochain_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TendermintHeader.ProtoReflect.Descriptor instead.
func (*TendermintHeader) Descriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{36}
}

func (x *TendermintHeader) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *TendermintHeader) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *TendermintHeader) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *TendermintHeader) GetBlockID() []byte {
	if x != nil {
		return x.BlockID
	}
	return nil
}

func (x *TendermintHeader) GetLastCommitHash() []byte {
	if x != nil {
		return x.LastCommitHash
	}
	return nil
}

func (x *TendermintHeader) GetDataHash() []byte {
	if x != nil {
		return x.DataHash
	}
	return nil
}

func (x *TendermintHeader) GetValidatorsHash() []byte {
	if x != nil {
		return x.ValidatorsHash
	}
	return nil
}

func (x *TendermintHeader) GetNextValidatorsHash() []byte {
	if x != nil {
		return x.NextValidatorsHash
	}
	return nil
}

func (x *TendermintHeader) GetConsensusHash() []byte {
	if x != nil {
		return x.ConsensusHash
	}
	return nil
}

func (x *TendermintHeader) GetAppHash() []byte {
	if x != nil {
		return x.AppHash
	}
	return nil
}

func (x *TendermintHeader) GetLastResultsHash() []byte {
	if x != nil {
		return x.LastResultsHash
	}
	return nil
}

func (x *TendermintHeader) GetEvidenceHash() []byte {
	if x != nil {
		return x.EvidenceHash
	}
	return nil
}

func (x *TendermintHeader) GetProposerAddress() []byte {
	if x != nil {
		return x.ProposerAddress
	}
	return nil
}

type ProcessResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Votes []*QuestionResult `protobuf:"bytes,1,rep,name=votes,proto3" json:"votes,omitempty"`
}

func (x *ProcessResult) Reset() {
	*x = ProcessResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vochain_vochain_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessResult) ProtoMessage() {}

func (x *ProcessResult) ProtoReflect() protoreflect.Message {
	mi := &file_vochain_vochain_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessResult.ProtoReflect.Descriptor instead.
func (*ProcessResult) Descriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{37}
}

func (x *ProcessResult) GetVotes() []*QuestionResult {
	if x != nil {
		return x.Votes
	}
	return nil
}

type QuestionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Question [][]byte `protobuf:"bytes,1,rep,name=question,proto3" json:"question,omitempty"`
}

func (x *QuestionResult) Reset() {
	*x = QuestionResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vochain_vochain_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionResult) ProtoMessage() {}

func (x *QuestionResult) ProtoReflect() protoreflect.Message {
	mi := &file_vochain_vochain_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionResult.ProtoReflect.Descriptor instead.
func (*QuestionResult) Descriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{38}
}

func (x *QuestionResult) GetQuestion() [][]byte {
	if x != nil {
		return x.Question
	}
	return nil
}

type ProcessEndingList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcessList [][]byte `protobuf:"bytes,1,rep,name=processList,proto3" json:"processList,omitempty"`
}

func (x *ProcessEndingList) Reset() {
	*x = ProcessEndingList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vochain_vochain_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessEndingList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessEndingList) ProtoMessage() {}

func (x *ProcessEndingList) ProtoReflect() protoreflect.Message {
	mi := &file_vochain_vochain_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessEndingList.ProtoReflect.Descriptor instead.
func (*ProcessEndingList) Descriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{39}
}

func (x *ProcessEndingList) GetProcessList() [][]byte {
	if x != nil {
		return x.ProcessList
	}
	return nil
}

// KeyKeeper
type StoredKeys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pids [][]byte `protobuf:"bytes,1,rep,name=pids,proto3" json:"pids,omitempty"`
}

func (x *StoredKeys) Reset() {
	*x = StoredKeys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vochain_vochain_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoredKeys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoredKeys) ProtoMessage() {}

func (x *StoredKeys) ProtoReflect() protoreflect.Message {
	mi := &file_vochain_vochain_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoredKeys.ProtoReflect.Descriptor instead.
func (*StoredKeys) Descriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{40}
}

func (x *StoredKeys) GetPids() [][]byte {
	if x != nil {
		return x.Pids
	}
	return nil
}

var File_vochain_vochain_proto protoreflect.FileDescriptor

var file_vochain_vochain_proto_rawDesc = []byte{
	0x0a, 0x15, 0x76, 0x6f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x76, 0x6f, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x22, 0xe3, 0x01, 0x0a, 0x0c, 0x56, 0x6f, 0x74, 0x65,
	0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x05,
	0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x76,
	0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f,
	0x6f, 0x66, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x6f, 0x74,
	0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b,
	0x76, 0x6f, 0x74, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e,
	0x75, 0x6c, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x6e, 0x75, 0x6c, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x14, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x14, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x22, 0x90, 0x01,
	0x0a, 0x06, 0x43, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x22, 0x85, 0x01, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x10,
	0x0a, 0x0c, 0x41, 0x52, 0x42, 0x4f, 0x5f, 0x42, 0x4c, 0x41, 0x4b, 0x45, 0x32, 0x42, 0x10, 0x01,
	0x12, 0x11, 0x0a, 0x0d, 0x41, 0x52, 0x42, 0x4f, 0x5f, 0x50, 0x4f, 0x53, 0x45, 0x49, 0x44, 0x4f,
	0x4e, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x54, 0x48, 0x45, 0x52, 0x45, 0x55, 0x4d, 0x53,
	0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x54, 0x48, 0x45,
	0x52, 0x45, 0x55, 0x4d, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x04, 0x12, 0x06, 0x0a,
	0x02, 0x43, 0x41, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x08, 0x47, 0x52, 0x41, 0x56, 0x49, 0x54, 0x4f,
	0x4e, 0x10, 0xe9, 0x07, 0x12, 0x0a, 0x0a, 0x05, 0x49, 0x44, 0x45, 0x4e, 0x33, 0x10, 0xea, 0x07,
	0x22, 0x82, 0x04, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x3b, 0x0a, 0x08, 0x67, 0x72,
	0x61, 0x76, 0x69, 0x74, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64,
	0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x6f, 0x6f, 0x66, 0x47, 0x72, 0x61, 0x76, 0x69, 0x74, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x67,
	0x72, 0x61, 0x76, 0x69, 0x74, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x05, 0x69, 0x64, 0x65, 0x6e, 0x33,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x49, 0x64, 0x65,
	0x6e, 0x33, 0x48, 0x00, 0x52, 0x05, 0x69, 0x64, 0x65, 0x6e, 0x33, 0x12, 0x50, 0x0a, 0x0f, 0x65,
	0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x45, 0x74, 0x68, 0x65, 0x72,
	0x65, 0x75, 0x6d, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x65, 0x74,
	0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x50, 0x0a,
	0x0f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x45, 0x74, 0x68,
	0x65, 0x72, 0x65, 0x75, 0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0f,
	0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x29, 0x0a, 0x02, 0x63, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x76,
	0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f,
	0x6f, 0x66, 0x43, 0x41, 0x48, 0x00, 0x52, 0x02, 0x63, 0x61, 0x12, 0x2f, 0x0a, 0x04, 0x61, 0x72,
	0x62, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64, 0x76, 0x6f, 0x74, 0x65,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x41,
	0x72, 0x62, 0x6f, 0x48, 0x00, 0x52, 0x04, 0x61, 0x72, 0x62, 0x6f, 0x12, 0x38, 0x0a, 0x07, 0x7a,
	0x6b, 0x53, 0x6e, 0x61, 0x72, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64,
	0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x6f, 0x6f, 0x66, 0x5a, 0x6b, 0x53, 0x4e, 0x41, 0x52, 0x4b, 0x48, 0x00, 0x52, 0x07, 0x7a, 0x6b,
	0x53, 0x6e, 0x61, 0x72, 0x6b, 0x12, 0x43, 0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x65, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64,
	0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x6f, 0x6f, 0x66, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x6d, 0x69, 0x6e,
	0x69, 0x6d, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x2b, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x47, 0x72,
	0x61, 0x76, 0x69, 0x74, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x69, 0x62, 0x6c, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x69, 0x62, 0x6c, 0x69, 0x6e,
	0x67, 0x73, 0x22, 0x28, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x49, 0x64, 0x65, 0x6e, 0x33,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x69, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x73, 0x69, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x5a, 0x0a, 0x14,
	0x50, 0x72, 0x6f, 0x6f, 0x66, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x69, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08,
	0x73, 0x69, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xa0, 0x01, 0x0a, 0x14, 0x50, 0x72, 0x6f,
	0x6f, 0x66, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x48, 0x61, 0x73, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x64, 0x65, 0x48, 0x61, 0x73, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x63, 0x6f, 0x64, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x69, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x08, 0x73, 0x69, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xa9, 0x01, 0x0a, 0x0b,
	0x50, 0x72, 0x6f, 0x6f, 0x66, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x0e, 0x70,
	0x72, 0x6f, 0x6f, 0x66, 0x50, 0x72, 0x65, 0x76, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65,
	0x75, 0x6d, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x6f, 0x66,
	0x50, 0x72, 0x65, 0x76, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x4c, 0x0a, 0x0e, 0x70, 0x72, 0x6f,
	0x6f, 0x66, 0x4e, 0x65, 0x78, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x4e, 0x65,
	0x78, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0xec, 0x01, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x6f,
	0x66, 0x43, 0x41, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1c, 0x2e, 0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x43, 0x41, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x41, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52,
	0x06, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x5f, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a,
	0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x43,
	0x44, 0x53, 0x41, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x43, 0x44, 0x53, 0x41, 0x5f, 0x50,
	0x49, 0x44, 0x53, 0x41, 0x4c, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x43,
	0x44, 0x53, 0x41, 0x5f, 0x42, 0x4c, 0x49, 0x4e, 0x44, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x45,
	0x43, 0x44, 0x53, 0x41, 0x5f, 0x42, 0x4c, 0x49, 0x4e, 0x44, 0x5f, 0x50, 0x49, 0x44, 0x53, 0x41,
	0x4c, 0x54, 0x45, 0x44, 0x10, 0x04, 0x22, 0x42, 0x0a, 0x08, 0x43, 0x41, 0x62, 0x75, 0x6e, 0x64,
	0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xa9, 0x02, 0x0a, 0x09, 0x50,
	0x72, 0x6f, 0x6f, 0x66, 0x41, 0x72, 0x62, 0x6f, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x41, 0x72, 0x62,
	0x6f, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x69, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x73, 0x69, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x76, 0x61, 0x6c,
	0x61, 0x69, 0x62, 0x6c, 0x65, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0f, 0x61, 0x76, 0x61, 0x6c, 0x61, 0x69, 0x62, 0x6c, 0x65, 0x57, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x3b, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x41, 0x72, 0x62, 0x6f, 0x2e, 0x4b,
	0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x76, 0x6f, 0x74, 0x65, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0a, 0x76, 0x6f, 0x74, 0x65, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22,
	0x21, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x4c, 0x41, 0x4b, 0x45,
	0x32, 0x42, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x4f, 0x53, 0x45, 0x49, 0x44, 0x4f, 0x4e,
	0x10, 0x01, 0x22, 0x22, 0x0a, 0x07, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a,
	0x06, 0x50, 0x55, 0x42, 0x4b, 0x45, 0x59, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x44, 0x44,
	0x52, 0x45, 0x53, 0x53, 0x10, 0x01, 0x22, 0x94, 0x01, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x6f, 0x66,
	0x5a, 0x6b, 0x53, 0x4e, 0x41, 0x52, 0x4b, 0x12, 0x36, 0x0a, 0x16, 0x63, 0x69, 0x72, 0x63, 0x75,
	0x69, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x0c, 0x0a, 0x01, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x01, 0x61, 0x12, 0x0c, 0x0a,
	0x01, 0x62, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x01, 0x62, 0x12, 0x0c, 0x0a, 0x01, 0x63,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x01, 0x63, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x22, 0x9d, 0x01,
	0x0a, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x66,
	0x6f, 0x55, 0x52, 0x49, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x66, 0x6f,
	0x55, 0x52, 0x49, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x41,
	0x64, 0x64, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0d, 0x64, 0x65, 0x6c, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x3b, 0x0a,
	0x09, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0x95, 0x06, 0x0a, 0x02, 0x54,
	0x78, 0x12, 0x32, 0x0a, 0x04, 0x76, 0x6f, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x6f, 0x74, 0x65, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x48, 0x00, 0x52,
	0x04, 0x76, 0x6f, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x0a, 0x6e, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x76, 0x6f, 0x74,
	0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x77, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x78, 0x48, 0x00, 0x52, 0x0a, 0x6e, 0x65, 0x77, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x2f, 0x0a, 0x05, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x54, 0x78, 0x48, 0x00, 0x52,
	0x05, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x3e, 0x0a, 0x0a, 0x73, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x76, 0x6f,
	0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x78, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x41, 0x0a, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x4b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x76,
	0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x54, 0x78, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x3e, 0x0a, 0x0a, 0x6d, 0x69, 0x6e,
	0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x69, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x54, 0x78, 0x48, 0x00, 0x52, 0x0a, 0x6d,
	0x69, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x3e, 0x0a, 0x0a, 0x73, 0x65, 0x6e,
	0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x6e, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x54, 0x78, 0x48, 0x00, 0x52, 0x0a, 0x73,
	0x65, 0x6e, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x59, 0x0a, 0x13, 0x73, 0x65, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x54, 0x78, 0x48, 0x00, 0x52,
	0x13, 0x73, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x73, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x0a, 0x73, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x76, 0x6f, 0x74, 0x65,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x54, 0x78, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x65, 0x74, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x47, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x46,
	0x61, 0x75, 0x63, 0x65, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x76,
	0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x46, 0x61, 0x75, 0x63, 0x65, 0x74, 0x54, 0x78, 0x48, 0x00, 0x52, 0x0d,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x46, 0x61, 0x75, 0x63, 0x65, 0x74, 0x12, 0x44, 0x0a,
	0x0c, 0x73, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x6b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x6b, 0x65, 0x65, 0x70, 0x65,
	0x72, 0x54, 0x78, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x6b, 0x65, 0x65,
	0x70, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x65, 0x74, 0x53, 0x69, 0x6b, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x69, 0x6b, 0x54, 0x78, 0x48, 0x00, 0x52,
	0x06, 0x73, 0x65, 0x74, 0x53, 0x69, 0x6b, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x22, 0x4b, 0x0a, 0x08, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x78, 0x12, 0x0e,
	0x0a, 0x02, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x74, 0x78, 0x12, 0x21,
	0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x48, 0x00, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22,
	0x87, 0x01, 0x0a, 0x0c, 0x4e, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x78,
	0x12, 0x2e, 0x0a, 0x06, 0x74, 0x78, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x78, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x74, 0x78, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x52, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x22, 0xe1, 0x03, 0x0a, 0x0c, 0x53, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x78, 0x12, 0x2e, 0x0a, 0x06, 0x74, 0x78,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x64, 0x76, 0x6f,
	0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x78, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x06, 0x74, 0x78, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f,
	0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x3a,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d,
	0x2e, 0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x01, 0x52, 0x0d, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x63, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x52,
	0x6f, 0x6f, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x02, 0x52, 0x0a, 0x63, 0x65, 0x6e,
	0x73, 0x75, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x63, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x55, 0x52, 0x49, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52,
	0x09, 0x63, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x55, 0x52, 0x49, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a,
	0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64,
	0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x6f, 0x6f, 0x66, 0x48, 0x04, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x88, 0x01, 0x01, 0x12,
	0x3c, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48,
	0x05, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x55, 0x52, 0x49, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x72, 0x6f, 0x6f,
	0x66, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0xbd, 0x03,
	0x0a, 0x07, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x54, 0x78, 0x12, 0x2e, 0x0a, 0x06, 0x74, 0x78, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x64, 0x76, 0x6f, 0x74,
	0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x78, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x06, 0x74, 0x78, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x14, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x14, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12,
	0x35, 0x0a, 0x13, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x02, 0x52, 0x13,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x03, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x48, 0x04, 0x52, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x05, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79,
	0x42, 0x16, 0x0a, 0x14, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6b, 0x65, 0x79,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x22, 0xa0, 0x01,
	0x0a, 0x0d, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x54, 0x78, 0x12,
	0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66,
	0x12, 0x16, 0x0a, 0x06, 0x6e, 0x65, 0x77, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x6e, 0x65, 0x77, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x22, 0x7a, 0x0a, 0x0c, 0x4d, 0x69, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x54, 0x78,
	0x12, 0x2e, 0x0a, 0x06, 0x74, 0x78, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x78, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x74, 0x78, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x8e, 0x01, 0x0a,
	0x0c, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x54, 0x78, 0x12, 0x2e, 0x0a,
	0x06, 0x74, 0x78, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x78, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x74, 0x78, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6e, 0x6f,
	0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x73, 0x0a,
	0x15, 0x53, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x73, 0x74, 0x73, 0x54, 0x78, 0x12, 0x2e, 0x0a, 0x06, 0x74, 0x78, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x78, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06,
	0x74, 0x78, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0xd2, 0x02, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x54, 0x78, 0x12, 0x2e, 0x0a, 0x06, 0x74, 0x78, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x78, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x74, 0x78, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x00, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d,
	0x0a, 0x07, 0x69, 0x6e, 0x66, 0x6f, 0x55, 0x52, 0x49, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x07, 0x69, 0x6e, 0x66, 0x6f, 0x55, 0x52, 0x49, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a,
	0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x02,
	0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x0d,
	0x66, 0x61, 0x75, 0x63, 0x65, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61, 0x75, 0x63, 0x65, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x48, 0x03, 0x52, 0x0d, 0x66, 0x61, 0x75, 0x63, 0x65, 0x74, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x73, 0x12, 0x15, 0x0a, 0x03, 0x73, 0x69, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0c, 0x48, 0x04, 0x52, 0x03, 0x73, 0x69, 0x6b, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x55, 0x52,
	0x49, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x66, 0x61, 0x75, 0x63, 0x65, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x42,
	0x06, 0x0a, 0x04, 0x5f, 0x73, 0x69, 0x6b, 0x22, 0x73, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x53, 0x69,
	0x6b, 0x54, 0x78, 0x12, 0x2e, 0x0a, 0x06, 0x74, 0x78, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x78, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x74, 0x78, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x15, 0x0a,
	0x03, 0x73, 0x69, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x03, 0x73, 0x69,
	0x6b, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x73, 0x69, 0x6b, 0x22, 0x9c, 0x01, 0x0a,
	0x0f, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x46, 0x61, 0x75, 0x63, 0x65, 0x74, 0x54, 0x78,
	0x12, 0x2e, 0x0a, 0x06, 0x74, 0x78, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x78, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x74, 0x78, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x43, 0x0a, 0x0d, 0x66, 0x61, 0x75, 0x63, 0x65, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61, 0x75, 0x63, 0x65, 0x74, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x0d, 0x66, 0x61, 0x75, 0x63, 0x65, 0x74, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0x57, 0x0a, 0x0d, 0x46,
	0x61, 0x75, 0x63, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02,
	0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x47, 0x0a, 0x0d, 0x46, 0x61, 0x75, 0x63, 0x65, 0x74, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x74, 0x0a,
	0x0e, 0x53, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x6b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x54, 0x78, 0x12,
	0x2e, 0x0a, 0x06, 0x74, 0x78, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x78, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x74, 0x78, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x6b, 0x65, 0x65, 0x70,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x6b, 0x65, 0x79, 0x6b, 0x65, 0x65,
	0x70, 0x65, 0x72, 0x22, 0xe9, 0x0c, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x65, 0x6e,
	0x73, 0x75, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x63,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x21, 0x0a, 0x09, 0x63, 0x65, 0x6e,
	0x73, 0x75, 0x73, 0x55, 0x52, 0x49, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09,
	0x63, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x55, 0x52, 0x49, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x15,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65,
	0x79, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x14, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x1f, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2d,
	0x0a, 0x0f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x02, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x0c, 0x65,
	0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0c, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a,
	0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x76,
	0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x29,
	0x0a, 0x0d, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x03, 0x52, 0x0d, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x04, 0x52, 0x0d, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x0b, 0x76, 0x6f, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x76, 0x6f, 0x74,
	0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x56, 0x6f, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x76,
	0x6f, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x40, 0x0a, 0x0c, 0x63, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1c, 0x2e, 0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x52, 0x0c,
	0x63, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x37, 0x0a, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0c, 0x65, 0x74, 0x68, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x53, 0x6c, 0x6f, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x05, 0x52, 0x0c, 0x65,
	0x74, 0x68, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x6c, 0x6f, 0x74, 0x88, 0x01, 0x01, 0x12, 0x31,
	0x0a, 0x11, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x04, 0x48, 0x06, 0x52, 0x11, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x19, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0c,
	0x48, 0x07, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a,
	0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x52, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x43,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0d, 0x6d, 0x61, 0x78, 0x43, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x31,
	0x0a, 0x11, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x52,
	0x6f, 0x6f, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x09, 0x52, 0x11, 0x72, 0x6f, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x43, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x31, 0x0a, 0x11, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x65, 0x6e, 0x73,
	0x75, 0x73, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x04, 0x48, 0x0a, 0x52, 0x11,
	0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x53, 0x69, 0x7a,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x6e, 0x75, 0x6c, 0x6c, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x0b, 0x52, 0x0e,
	0x6e, 0x75, 0x6c, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x41, 0x0a, 0x19, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x0c, 0x52, 0x19, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0d, 0x52, 0x0d, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x88, 0x01, 0x01, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x55, 0x52, 0x49, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x6b, 0x65, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x65, 0x74, 0x68, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53,
	0x6c, 0x6f, 0x74, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x42, 0x14, 0x0a, 0x12, 0x5f, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x65, 0x6e, 0x73,
	0x75, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x72, 0x6f, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x43, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x42,
	0x1c, 0x0a, 0x1a, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x22,
	0xb8, 0x01, 0x0a, 0x0c, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6e, 0x6f, 0x6e,
	0x79, 0x6d, 0x6f, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x6e, 0x6f,
	0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x64, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x22,
	0x0a, 0x0c, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x73, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x57, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x63, 0x6f, 0x73, 0x74,
	0x46, 0x72, 0x6f, 0x6d, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xc7, 0x01, 0x0a, 0x0b, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x75,
	0x74, 0x6f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61,
	0x75, 0x74, 0x6f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x72, 0x75, 0x70, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x64, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x11, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x22, 0xc2, 0x01, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x56, 0x6f, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6d,
	0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d,
	0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x56, 0x6f, 0x74, 0x65, 0x4f, 0x76,
	0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11,
	0x6d, 0x61, 0x78, 0x56, 0x6f, 0x74, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x73, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x73, 0x74, 0x45, 0x78, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x73,
	0x74, 0x45, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x22, 0x26, 0x0a, 0x0a, 0x4f, 0x72, 0x61,
	0x63, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x61, 0x63, 0x6c,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x07, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65,
	0x73, 0x22, 0x4a, 0x0a, 0x0d, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x22, 0x83, 0x01,
	0x0a, 0x09, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x22, 0xdd, 0x03, 0x0a, 0x10, 0x54, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x6c,
	0x61, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1b, 0x0a,
	0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x48, 0x61, 0x73, 0x68, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x30, 0x0a, 0x14, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x12, 0x6e, 0x65, 0x78, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73,
	0x75, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x63,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x19, 0x0a, 0x08,
	0x61, 0x70, 0x70, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x61, 0x70, 0x70, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x65, 0x76, 0x69, 0x64,
	0x65, 0x6e, 0x63, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x22, 0x45, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x05, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x22, 0x2c, 0x0a, 0x0e, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x35, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x45, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0c, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x20, 0x0a, 0x0a, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x04, 0x70, 0x69, 0x64,
	0x73, 0x2a, 0xbd, 0x04, 0x0a, 0x06, 0x54, 0x78, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a,
	0x54, 0x58, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b,
	0x4e, 0x45, 0x57, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x16, 0x0a,
	0x12, 0x53, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x4f,
	0x43, 0x45, 0x53, 0x53, 0x5f, 0x43, 0x45, 0x4e, 0x53, 0x55, 0x53, 0x10, 0x03, 0x12, 0x1e, 0x0a,
	0x1a, 0x53, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x10, 0x04, 0x12, 0x14, 0x0a,
	0x10, 0x41, 0x44, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x4b, 0x45, 0x59,
	0x53, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x56, 0x45, 0x41, 0x4c, 0x5f, 0x50, 0x52,
	0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x4b, 0x45, 0x59, 0x53, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a,
	0x41, 0x44, 0x44, 0x5f, 0x4f, 0x52, 0x41, 0x43, 0x4c, 0x45, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d,
	0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x4f, 0x52, 0x41, 0x43, 0x4c, 0x45, 0x10, 0x08, 0x12,
	0x11, 0x0a, 0x0d, 0x41, 0x44, 0x44, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x4f, 0x52,
	0x10, 0x09, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x0a, 0x12, 0x08, 0x0a, 0x04, 0x56, 0x4f, 0x54, 0x45,
	0x10, 0x0b, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53,
	0x53, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x53, 0x10, 0x0c, 0x12, 0x16, 0x0a, 0x12, 0x52,
	0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x56, 0x4f, 0x54, 0x45, 0x52, 0x5f, 0x4b, 0x45,
	0x59, 0x10, 0x0d, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x49, 0x4e, 0x54, 0x5f, 0x54, 0x4f, 0x4b, 0x45,
	0x4e, 0x53, 0x10, 0x0e, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x54, 0x4f, 0x4b,
	0x45, 0x4e, 0x53, 0x10, 0x0f, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x53, 0x54, 0x53, 0x10, 0x10,
	0x12, 0x18, 0x0a, 0x14, 0x53, 0x45, 0x54, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f,
	0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x55, 0x52, 0x49, 0x10, 0x11, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x44,
	0x44, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x47, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x41,
	0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x12, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x45, 0x4c, 0x5f,
	0x44, 0x45, 0x4c, 0x45, 0x47, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x41, 0x43, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x10, 0x13, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43,
	0x54, 0x5f, 0x46, 0x41, 0x55, 0x43, 0x45, 0x54, 0x10, 0x14, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x44,
	0x44, 0x5f, 0x4b, 0x45, 0x59, 0x4b, 0x45, 0x45, 0x50, 0x45, 0x52, 0x10, 0x15, 0x12, 0x14, 0x0a,
	0x10, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x4b, 0x45, 0x45, 0x50, 0x45,
	0x52, 0x10, 0x16, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x17, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x45, 0x54, 0x5f, 0x41,
	0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x53, 0x49, 0x4b, 0x10, 0x18, 0x12, 0x13, 0x0a, 0x0f,
	0x44, 0x45, 0x4c, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x53, 0x49, 0x4b, 0x10,
	0x19, 0x2a, 0x61, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x45, 0x41, 0x44, 0x59,
	0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0c, 0x0a,
	0x08, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x50,
	0x41, 0x55, 0x53, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x53, 0x55, 0x4c,
	0x54, 0x53, 0x10, 0x05, 0x2a, 0x82, 0x02, 0x0a, 0x0f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x54, 0x48, 0x5f, 0x4d, 0x41, 0x49,
	0x4e, 0x4e, 0x45, 0x54, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x54, 0x48, 0x5f, 0x52, 0x49,
	0x4e, 0x4b, 0x45, 0x42, 0x59, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x54, 0x48, 0x5f, 0x47,
	0x4f, 0x45, 0x52, 0x4c, 0x49, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x4f, 0x41, 0x5f, 0x58,
	0x44, 0x41, 0x49, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x4f, 0x41, 0x5f, 0x53, 0x4f, 0x4b,
	0x4f, 0x4c, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x4f, 0x4c, 0x59, 0x47, 0x4f, 0x4e, 0x10,
	0x06, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x53, 0x43, 0x10, 0x07, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x54,
	0x48, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x4e, 0x45, 0x54, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x4c,
	0x49, 0x4e, 0x47, 0x10, 0x08, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x54, 0x48, 0x5f, 0x52, 0x49, 0x4e,
	0x4b, 0x45, 0x42, 0x59, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0x09,
	0x12, 0x0d, 0x0a, 0x09, 0x41, 0x56, 0x41, 0x58, 0x5f, 0x46, 0x55, 0x4a, 0x49, 0x10, 0x0a, 0x12,
	0x08, 0x0a, 0x04, 0x41, 0x56, 0x41, 0x58, 0x10, 0x0b, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x4f, 0x4c,
	0x59, 0x47, 0x4f, 0x4e, 0x5f, 0x4d, 0x55, 0x4d, 0x42, 0x41, 0x49, 0x10, 0x0c, 0x12, 0x0c, 0x0a,
	0x08, 0x4f, 0x50, 0x54, 0x49, 0x4d, 0x49, 0x53, 0x4d, 0x10, 0x0d, 0x12, 0x0c, 0x0a, 0x08, 0x41,
	0x52, 0x42, 0x49, 0x54, 0x52, 0x55, 0x4d, 0x10, 0x0e, 0x2a, 0xa2, 0x01, 0x0a, 0x0c, 0x43, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x45,
	0x4e, 0x53, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x12,
	0x0a, 0x0e, 0x4f, 0x46, 0x46, 0x5f, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x54, 0x52, 0x45, 0x45,
	0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x4f, 0x46, 0x46, 0x5f, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f,
	0x54, 0x52, 0x45, 0x45, 0x5f, 0x57, 0x45, 0x49, 0x47, 0x48, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x10, 0x0a, 0x0c, 0x4f, 0x46, 0x46, 0x5f, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x43, 0x41, 0x10,
	0x03, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x43, 0x32, 0x30, 0x10, 0x0b, 0x12, 0x0a, 0x0a, 0x06,
	0x45, 0x52, 0x43, 0x37, 0x32, 0x31, 0x10, 0x0c, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x52, 0x43, 0x31,
	0x31, 0x35, 0x35, 0x10, 0x0d, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x52, 0x43, 0x37, 0x37, 0x37, 0x10,
	0x0e, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x49, 0x4e, 0x49, 0x5f, 0x4d, 0x45, 0x10, 0x0f, 0x42, 0x25,
	0x5a, 0x23, 0x67, 0x6f, 0x2e, 0x76, 0x6f, 0x63, 0x64, 0x6f, 0x6e, 0x69, 0x2e, 0x69, 0x6f, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2f, 0x67, 0x6f, 0x2f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_vochain_vochain_proto_rawDescOnce sync.Once
	file_vochain_vochain_proto_rawDescData = file_vochain_vochain_proto_rawDesc
)

func file_vochain_vochain_proto_rawDescGZIP() []byte {
	file_vochain_vochain_proto_rawDescOnce.Do(func() {
		file_vochain_vochain_proto_rawDescData = protoimpl.X.CompressGZIP(file_vochain_vochain_proto_rawDescData)
	})
	return file_vochain_vochain_proto_rawDescData
}

var file_vochain_vochain_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_vochain_vochain_proto_msgTypes = make([]protoimpl.MessageInfo, 41)
var file_vochain_vochain_proto_goTypes = []interface{}{
	(TxType)(0),                   // 0: dvote.types.v1.TxType
	(ProcessStatus)(0),            // 1: dvote.types.v1.ProcessStatus
	(SourceNetworkId)(0),          // 2: dvote.types.v1.SourceNetworkId
	(CensusOrigin)(0),             // 3: dvote.types.v1.CensusOrigin
	(Census_Type)(0),              // 4: dvote.types.v1.Census.Type
	(ProofCA_Type)(0),             // 5: dvote.types.v1.ProofCA.Type
	(ProofArbo_Type)(0),           // 6: dvote.types.v1.ProofArbo.Type
	(ProofArbo_KeyType)(0),        // 7: dvote.types.v1.ProofArbo.KeyType
	(*VoteEnvelope)(nil),          // 8: dvote.types.v1.VoteEnvelope
	(*Census)(nil),                // 9: dvote.types.v1.Census
	(*Proof)(nil),                 // 10: dvote.types.v1.Proof
	(*ProofGraviton)(nil),         // 11: dvote.types.v1.ProofGraviton
	(*ProofIden3)(nil),            // 12: dvote.types.v1.ProofIden3
	(*ProofEthereumStorage)(nil),  // 13: dvote.types.v1.ProofEthereumStorage
	(*ProofEthereumAccount)(nil),  // 14: dvote.types.v1.ProofEthereumAccount
	(*ProofMinime)(nil),           // 15: dvote.types.v1.ProofMinime
	(*ProofCA)(nil),               // 16: dvote.types.v1.ProofCA
	(*CAbundle)(nil),              // 17: dvote.types.v1.CAbundle
	(*ProofArbo)(nil),             // 18: dvote.types.v1.ProofArbo
	(*ProofZkSNARK)(nil),          // 19: dvote.types.v1.ProofZkSNARK
	(*Account)(nil),               // 20: dvote.types.v1.Account
	(*Treasurer)(nil),             // 21: dvote.types.v1.Treasurer
	(*Tx)(nil),                    // 22: dvote.types.v1.Tx
	(*SignedTx)(nil),              // 23: dvote.types.v1.SignedTx
	(*NewProcessTx)(nil),          // 24: dvote.types.v1.NewProcessTx
	(*SetProcessTx)(nil),          // 25: dvote.types.v1.SetProcessTx
	(*AdminTx)(nil),               // 26: dvote.types.v1.AdminTx
	(*RegisterKeyTx)(nil),         // 27: dvote.types.v1.RegisterKeyTx
	(*MintTokensTx)(nil),          // 28: dvote.types.v1.MintTokensTx
	(*SendTokensTx)(nil),          // 29: dvote.types.v1.SendTokensTx
	(*SetTransactionCostsTx)(nil), // 30: dvote.types.v1.SetTransactionCostsTx
	(*SetAccountTx)(nil),          // 31: dvote.types.v1.SetAccountTx
	(*SetSikTx)(nil),              // 32: dvote.types.v1.SetSikTx
	(*CollectFaucetTx)(nil),       // 33: dvote.types.v1.CollectFaucetTx
	(*FaucetPayload)(nil),         // 34: dvote.types.v1.FaucetPayload
	(*FaucetPackage)(nil),         // 35: dvote.types.v1.FaucetPackage
	(*SetKeykeeperTx)(nil),        // 36: dvote.types.v1.SetKeykeeperTx
	(*Process)(nil),               // 37: dvote.types.v1.Process
	(*EnvelopeType)(nil),          // 38: dvote.types.v1.EnvelopeType
	(*ProcessMode)(nil),           // 39: dvote.types.v1.ProcessMode
	(*ProcessVoteOptions)(nil),    // 40: dvote.types.v1.ProcessVoteOptions
	(*OracleList)(nil),            // 41: dvote.types.v1.OracleList
	(*ValidatorList)(nil),         // 42: dvote.types.v1.ValidatorList
	(*Validator)(nil),             // 43: dvote.types.v1.Validator
	(*TendermintHeader)(nil),      // 44: dvote.types.v1.TendermintHeader
	(*ProcessResult)(nil),         // 45: dvote.types.v1.ProcessResult
	(*QuestionResult)(nil),        // 46: dvote.types.v1.QuestionResult
	(*ProcessEndingList)(nil),     // 47: dvote.types.v1.ProcessEndingList
	(*StoredKeys)(nil),            // 48: dvote.types.v1.StoredKeys
}
var file_vochain_vochain_proto_depIdxs = []int32{
	10, // 0: dvote.types.v1.VoteEnvelope.proof:type_name -> dvote.types.v1.Proof
	11, // 1: dvote.types.v1.Proof.graviton:type_name -> dvote.types.v1.ProofGraviton
	12, // 2: dvote.types.v1.Proof.iden3:type_name -> dvote.types.v1.ProofIden3
	13, // 3: dvote.types.v1.Proof.ethereumStorage:type_name -> dvote.types.v1.ProofEthereumStorage
	14, // 4: dvote.types.v1.Proof.ethereumAccount:type_name -> dvote.types.v1.ProofEthereumAccount
	16, // 5: dvote.types.v1.Proof.ca:type_name -> dvote.types.v1.ProofCA
	18, // 6: dvote.types.v1.Proof.arbo:type_name -> dvote.types.v1.ProofArbo
	19, // 7: dvote.types.v1.Proof.zkSnark:type_name -> dvote.types.v1.ProofZkSNARK
	15, // 8: dvote.types.v1.Proof.minimeStorage:type_name -> dvote.types.v1.ProofMinime
	13, // 9: dvote.types.v1.ProofMinime.proofPrevBlock:type_name -> dvote.types.v1.ProofEthereumStorage
	13, // 10: dvote.types.v1.ProofMinime.proofNextBlock:type_name -> dvote.types.v1.ProofEthereumStorage
	5,  // 11: dvote.types.v1.ProofCA.type:type_name -> dvote.types.v1.ProofCA.Type
	17, // 12: dvote.types.v1.ProofCA.bundle:type_name -> dvote.types.v1.CAbundle
	6,  // 13: dvote.types.v1.ProofArbo.type:type_name -> dvote.types.v1.ProofArbo.Type
	7,  // 14: dvote.types.v1.ProofArbo.keyType:type_name -> dvote.types.v1.ProofArbo.KeyType
	8,  // 15: dvote.types.v1.Tx.vote:type_name -> dvote.types.v1.VoteEnvelope
	24, // 16: dvote.types.v1.Tx.newProcess:type_name -> dvote.types.v1.NewProcessTx
	26, // 17: dvote.types.v1.Tx.admin:type_name -> dvote.types.v1.AdminTx
	25, // 18: dvote.types.v1.Tx.setProcess:type_name -> dvote.types.v1.SetProcessTx
	27, // 19: dvote.types.v1.Tx.registerKey:type_name -> dvote.types.v1.RegisterKeyTx
	28, // 20: dvote.types.v1.Tx.mintTokens:type_name -> dvote.types.v1.MintTokensTx
	29, // 21: dvote.types.v1.Tx.sendTokens:type_name -> dvote.types.v1.SendTokensTx
	30, // 22: dvote.types.v1.Tx.setTransactionCosts:type_name -> dvote.types.v1.SetTransactionCostsTx
	31, // 23: dvote.types.v1.Tx.setAccount:type_name -> dvote.types.v1.SetAccountTx
	33, // 24: dvote.types.v1.Tx.collectFaucet:type_name -> dvote.types.v1.CollectFaucetTx
	36, // 25: dvote.types.v1.Tx.setKeykeeper:type_name -> dvote.types.v1.SetKeykeeperTx
	32, // 26: dvote.types.v1.Tx.setSik:type_name -> dvote.types.v1.SetSikTx
	0,  // 27: dvote.types.v1.NewProcessTx.txtype:type_name -> dvote.types.v1.TxType
	37, // 28: dvote.types.v1.NewProcessTx.process:type_name -> dvote.types.v1.Process
	0,  // 29: dvote.types.v1.SetProcessTx.txtype:type_name -> dvote.types.v1.TxType
	1,  // 30: dvote.types.v1.SetProcessTx.status:type_name -> dvote.types.v1.ProcessStatus
	10, // 31: dvote.types.v1.SetProcessTx.proof:type_name -> dvote.types.v1.Proof
	45, // 32: dvote.types.v1.SetProcessTx.results:type_name -> dvote.types.v1.ProcessResult
	0,  // 33: dvote.types.v1.AdminTx.txtype:type_name -> dvote.types.v1.TxType
	10, // 34: dvote.types.v1.RegisterKeyTx.proof:type_name -> dvote.types.v1.Proof
	0,  // 35: dvote.types.v1.MintTokensTx.txtype:type_name -> dvote.types.v1.TxType
	0,  // 36: dvote.types.v1.SendTokensTx.txtype:type_name -> dvote.types.v1.TxType
	0,  // 37: dvote.types.v1.SetTransactionCostsTx.txtype:type_name -> dvote.types.v1.TxType
	0,  // 38: dvote.types.v1.SetAccountTx.txtype:type_name -> dvote.types.v1.TxType
	35, // 39: dvote.types.v1.SetAccountTx.faucetPackage:type_name -> dvote.types.v1.FaucetPackage
	0,  // 40: dvote.types.v1.SetSikTx.txtype:type_name -> dvote.types.v1.TxType
	0,  // 41: dvote.types.v1.CollectFaucetTx.txType:type_name -> dvote.types.v1.TxType
	35, // 42: dvote.types.v1.CollectFaucetTx.faucetPackage:type_name -> dvote.types.v1.FaucetPackage
	0,  // 43: dvote.types.v1.SetKeykeeperTx.txtype:type_name -> dvote.types.v1.TxType
	1,  // 44: dvote.types.v1.Process.status:type_name -> dvote.types.v1.ProcessStatus
	38, // 45: dvote.types.v1.Process.envelopeType:type_name -> dvote.types.v1.EnvelopeType
	39, // 46: dvote.types.v1.Process.mode:type_name -> dvote.types.v1.ProcessMode
	40, // 47: dvote.types.v1.Process.voteOptions:type_name -> dvote.types.v1.ProcessVoteOptions
	3,  // 48: dvote.types.v1.Process.censusOrigin:type_name -> dvote.types.v1.CensusOrigin
	45, // 49: dvote.types.v1.Process.results:type_name -> dvote.types.v1.ProcessResult
	2,  // 50: dvote.types.v1.Process.sourceNetworkId:type_name -> dvote.types.v1.SourceNetworkId
	43, // 51: dvote.types.v1.ValidatorList.validators:type_name -> dvote.types.v1.Validator
	46, // 52: dvote.types.v1.ProcessResult.votes:type_name -> dvote.types.v1.QuestionResult
	53, // [53:53] is the sub-list for method output_type
	53, // [53:53] is the sub-list for method input_type
	53, // [53:53] is the sub-list for extension type_name
	53, // [53:53] is the sub-list for extension extendee
	0,  // [0:53] is the sub-list for field type_name
}

func init() { file_vochain_vochain_proto_init() }
func file_vochain_vochain_proto_init() {
	if File_vochain_vochain_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_vochain_vochain_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoteEnvelope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vochain_vochain_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Census); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vochain_vochain_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Proof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vochain_vochain_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProofGraviton); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vochain_vochain_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProofIden3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vochain_vochain_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProofEthereumStorage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vochain_vochain_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProofEthereumAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vochain_vochain_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProofMinime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vochain_vochain_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProofCA); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vochain_vochain_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CAbundle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vochain_vochain_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProofArbo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vochain_vochain_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProofZkSNARK); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vochain_vochain_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Account); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vochain_vochain_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Treasurer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vochain_vochain_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vochain_vochain_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignedTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vochain_vochain_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewProcessTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vochain_vochain_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetProcessTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vochain_vochain_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vochain_vochain_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterKeyTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vochain_vochain_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MintTokensTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vochain_vochain_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendTokensTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vochain_vochain_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTransactionCostsTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vochain_vochain_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetAccountTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vochain_vochain_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSikTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vochain_vochain_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectFaucetTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vochain_vochain_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FaucetPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vochain_vochain_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FaucetPackage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vochain_vochain_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetKeykeeperTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vochain_vochain_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Process); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vochain_vochain_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnvelopeType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vochain_vochain_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vochain_vochain_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessVoteOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vochain_vochain_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OracleList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vochain_vochain_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidatorList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vochain_vochain_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Validator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vochain_vochain_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TendermintHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vochain_vochain_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vochain_vochain_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vochain_vochain_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessEndingList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vochain_vochain_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoredKeys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_vochain_vochain_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Proof_Graviton)(nil),
		(*Proof_Iden3)(nil),
		(*Proof_EthereumStorage)(nil),
		(*Proof_EthereumAccount)(nil),
		(*Proof_Ca)(nil),
		(*Proof_Arbo)(nil),
		(*Proof_ZkSnark)(nil),
		(*Proof_MinimeStorage)(nil),
	}
	file_vochain_vochain_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*Tx_Vote)(nil),
		(*Tx_NewProcess)(nil),
		(*Tx_Admin)(nil),
		(*Tx_SetProcess)(nil),
		(*Tx_RegisterKey)(nil),
		(*Tx_MintTokens)(nil),
		(*Tx_SendTokens)(nil),
		(*Tx_SetTransactionCosts)(nil),
		(*Tx_SetAccount)(nil),
		(*Tx_CollectFaucet)(nil),
		(*Tx_SetKeykeeper)(nil),
		(*Tx_SetSik)(nil),
	}
	file_vochain_vochain_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_vochain_vochain_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_vochain_vochain_proto_msgTypes[18].OneofWrappers = []interface{}{}
	file_vochain_vochain_proto_msgTypes[23].OneofWrappers = []interface{}{}
	file_vochain_vochain_proto_msgTypes[24].OneofWrappers = []interface{}{}
	file_vochain_vochain_proto_msgTypes[29].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_vochain_vochain_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   41,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_vochain_vochain_proto_goTypes,
		DependencyIndexes: file_vochain_vochain_proto_depIdxs,
		EnumInfos:         file_vochain_vochain_proto_enumTypes,
		MessageInfos:      file_vochain_vochain_proto_msgTypes,
	}.Build()
	File_vochain_vochain_proto = out.File
	file_vochain_vochain_proto_rawDesc = nil
	file_vochain_vochain_proto_goTypes = nil
	file_vochain_vochain_proto_depIdxs = nil
}
