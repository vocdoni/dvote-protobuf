// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: vochain/vochain.proto

package models

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SignatureType int32

const (
	SignatureType_UNKNOWN               SignatureType = 0
	SignatureType_ECDSA                 SignatureType = 1
	SignatureType_ECDSA_PIDSALTED       SignatureType = 2
	SignatureType_ECDSA_BLIND           SignatureType = 3
	SignatureType_ECDSA_BLIND_PIDSALTED SignatureType = 4
)

// Enum value maps for SignatureType.
var (
	SignatureType_name = map[int32]string{
		0: "UNKNOWN",
		1: "ECDSA",
		2: "ECDSA_PIDSALTED",
		3: "ECDSA_BLIND",
		4: "ECDSA_BLIND_PIDSALTED",
	}
	SignatureType_value = map[string]int32{
		"UNKNOWN":               0,
		"ECDSA":                 1,
		"ECDSA_PIDSALTED":       2,
		"ECDSA_BLIND":           3,
		"ECDSA_BLIND_PIDSALTED": 4,
	}
)

func (x SignatureType) Enum() *SignatureType {
	p := new(SignatureType)
	*p = x
	return p
}

func (x SignatureType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SignatureType) Descriptor() protoreflect.EnumDescriptor {
	return file_vochain_vochain_proto_enumTypes[0].Descriptor()
}

func (SignatureType) Type() protoreflect.EnumType {
	return &file_vochain_vochain_proto_enumTypes[0]
}

func (x SignatureType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SignatureType.Descriptor instead.
func (SignatureType) EnumDescriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{0}
}

type TxType int32

const (
	TxType_TX_UNKNOWN                 TxType = 0
	TxType_NEW_PROCESS                TxType = 1
	TxType_SET_PROCESS_STATUS         TxType = 2
	TxType_SET_PROCESS_CENSUS         TxType = 3
	TxType_SET_PROCESS_QUESTION_INDEX TxType = 4
	TxType_ADD_PROCESS_KEYS           TxType = 5
	TxType_REVEAL_PROCESS_KEYS        TxType = 6
	TxType_ADD_ORACLE                 TxType = 7
	TxType_REMOVE_ORACLE              TxType = 8
	TxType_ADD_VALIDATOR              TxType = 9
	TxType_REMOVE_VALIDATOR           TxType = 10
	TxType_VOTE                       TxType = 11
	TxType_SET_PROCESS_RESULTS        TxType = 12
)

// Enum value maps for TxType.
var (
	TxType_name = map[int32]string{
		0:  "TX_UNKNOWN",
		1:  "NEW_PROCESS",
		2:  "SET_PROCESS_STATUS",
		3:  "SET_PROCESS_CENSUS",
		4:  "SET_PROCESS_QUESTION_INDEX",
		5:  "ADD_PROCESS_KEYS",
		6:  "REVEAL_PROCESS_KEYS",
		7:  "ADD_ORACLE",
		8:  "REMOVE_ORACLE",
		9:  "ADD_VALIDATOR",
		10: "REMOVE_VALIDATOR",
		11: "VOTE",
		12: "SET_PROCESS_RESULTS",
	}
	TxType_value = map[string]int32{
		"TX_UNKNOWN":                 0,
		"NEW_PROCESS":                1,
		"SET_PROCESS_STATUS":         2,
		"SET_PROCESS_CENSUS":         3,
		"SET_PROCESS_QUESTION_INDEX": 4,
		"ADD_PROCESS_KEYS":           5,
		"REVEAL_PROCESS_KEYS":        6,
		"ADD_ORACLE":                 7,
		"REMOVE_ORACLE":              8,
		"ADD_VALIDATOR":              9,
		"REMOVE_VALIDATOR":           10,
		"VOTE":                       11,
		"SET_PROCESS_RESULTS":        12,
	}
)

func (x TxType) Enum() *TxType {
	p := new(TxType)
	*p = x
	return p
}

func (x TxType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TxType) Descriptor() protoreflect.EnumDescriptor {
	return file_vochain_vochain_proto_enumTypes[1].Descriptor()
}

func (TxType) Type() protoreflect.EnumType {
	return &file_vochain_vochain_proto_enumTypes[1]
}

func (x TxType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TxType.Descriptor instead.
func (TxType) EnumDescriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{1}
}

type ProcessStatus int32

const (
	ProcessStatus_PROCESS_UNKNOWN ProcessStatus = 0
	ProcessStatus_READY           ProcessStatus = 1
	ProcessStatus_ENDED           ProcessStatus = 2
	ProcessStatus_CANCELED        ProcessStatus = 3
	ProcessStatus_PAUSED          ProcessStatus = 4
	ProcessStatus_RESULTS         ProcessStatus = 5
)

// Enum value maps for ProcessStatus.
var (
	ProcessStatus_name = map[int32]string{
		0: "PROCESS_UNKNOWN",
		1: "READY",
		2: "ENDED",
		3: "CANCELED",
		4: "PAUSED",
		5: "RESULTS",
	}
	ProcessStatus_value = map[string]int32{
		"PROCESS_UNKNOWN": 0,
		"READY":           1,
		"ENDED":           2,
		"CANCELED":        3,
		"PAUSED":          4,
		"RESULTS":         5,
	}
)

func (x ProcessStatus) Enum() *ProcessStatus {
	p := new(ProcessStatus)
	*p = x
	return p
}

func (x ProcessStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProcessStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_vochain_vochain_proto_enumTypes[2].Descriptor()
}

func (ProcessStatus) Type() protoreflect.EnumType {
	return &file_vochain_vochain_proto_enumTypes[2]
}

func (x ProcessStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProcessStatus.Descriptor instead.
func (ProcessStatus) EnumDescriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{2}
}

type CensusOrigin int32

const (
	CensusOrigin_CENSUS_UNKNOWN          CensusOrigin = 0
	CensusOrigin_OFF_CHAIN_TREE          CensusOrigin = 1
	CensusOrigin_OFF_CHAIN_TREE_WEIGHTED CensusOrigin = 2
	CensusOrigin_OFF_CHAIN_CA            CensusOrigin = 3
	CensusOrigin_ERC20                   CensusOrigin = 11
	CensusOrigin_ERC721                  CensusOrigin = 12
	CensusOrigin_ERC1155                 CensusOrigin = 13
	CensusOrigin_ERC777                  CensusOrigin = 14
	CensusOrigin_MINI_ME                 CensusOrigin = 15
)

// Enum value maps for CensusOrigin.
var (
	CensusOrigin_name = map[int32]string{
		0:  "CENSUS_UNKNOWN",
		1:  "OFF_CHAIN_TREE",
		2:  "OFF_CHAIN_TREE_WEIGHTED",
		3:  "OFF_CHAIN_CA",
		11: "ERC20",
		12: "ERC721",
		13: "ERC1155",
		14: "ERC777",
		15: "MINI_ME",
	}
	CensusOrigin_value = map[string]int32{
		"CENSUS_UNKNOWN":          0,
		"OFF_CHAIN_TREE":          1,
		"OFF_CHAIN_TREE_WEIGHTED": 2,
		"OFF_CHAIN_CA":            3,
		"ERC20":                   11,
		"ERC721":                  12,
		"ERC1155":                 13,
		"ERC777":                  14,
		"MINI_ME":                 15,
	}
)

func (x CensusOrigin) Enum() *CensusOrigin {
	p := new(CensusOrigin)
	*p = x
	return p
}

func (x CensusOrigin) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CensusOrigin) Descriptor() protoreflect.EnumDescriptor {
	return file_vochain_vochain_proto_enumTypes[3].Descriptor()
}

func (CensusOrigin) Type() protoreflect.EnumType {
	return &file_vochain_vochain_proto_enumTypes[3]
}

func (x CensusOrigin) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CensusOrigin.Descriptor instead.
func (CensusOrigin) EnumDescriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{3}
}

type EnvelopePackage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Envelope *VoteEnvelope `protobuf:"bytes,1,opt,name=envelope,proto3" json:"envelope,omitempty"`
	Weight   []byte        `protobuf:"bytes,2,opt,name=weight,proto3" json:"weight,omitempty"`
	TxIndex  int32         `protobuf:"varint,3,opt,name=txIndex,proto3" json:"txIndex,omitempty"`
	Height   uint32        `protobuf:"varint,4,opt,name=height,proto3" json:"height,omitempty"`
	TxHash   []byte        `protobuf:"bytes,5,opt,name=txHash,proto3" json:"txHash,omitempty"`
}

func (x *EnvelopePackage) Reset() {
	*x = EnvelopePackage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vochain_vochain_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnvelopePackage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvelopePackage) ProtoMessage() {}

func (x *EnvelopePackage) ProtoReflect() protoreflect.Message {
	mi := &file_vochain_vochain_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvelopePackage.ProtoReflect.Descriptor instead.
func (*EnvelopePackage) Descriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{0}
}

func (x *EnvelopePackage) GetEnvelope() *VoteEnvelope {
	if x != nil {
		return x.Envelope
	}
	return nil
}

func (x *EnvelopePackage) GetWeight() []byte {
	if x != nil {
		return x.Weight
	}
	return nil
}

func (x *EnvelopePackage) GetTxIndex() int32 {
	if x != nil {
		return x.TxIndex
	}
	return 0
}

func (x *EnvelopePackage) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *EnvelopePackage) GetTxHash() []byte {
	if x != nil {
		return x.TxHash
	}
	return nil
}

type VoteEnvelope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nonce       []byte `protobuf:"bytes,1,opt,name=nonce,proto3" json:"nonce,omitempty"`             // Unique number per vote attempt, so that replay attacks can't reuse this payload
	ProcessId   []byte `protobuf:"bytes,2,opt,name=processId,proto3" json:"processId,omitempty"`     // The process for which the vote is casted
	Proof       *Proof `protobuf:"bytes,3,opt,name=proof,proto3" json:"proof,omitempty"`             // One of ProofGraviton, ProofIden3, ProofEthereumStorage, ProofEthereumAccount, or ProofCA
	VotePackage []byte `protobuf:"bytes,4,opt,name=votePackage,proto3" json:"votePackage,omitempty"` // JSON string of the Vote Package (potentially encrypted), encoded as bytes.
	// optional bytes nullifier = 5;
	Nullifier            []byte   `protobuf:"bytes,5,opt,name=nullifier,proto3" json:"nullifier,omitempty"`                               // Hash of the private key + processId
	EncryptionKeyIndexes []uint32 `protobuf:"varint,6,rep,packed,name=encryptionKeyIndexes,proto3" json:"encryptionKeyIndexes,omitempty"` // On encrypted votes, contains the (sorted) indexes of the keys used to encrypt
}

func (x *VoteEnvelope) Reset() {
	*x = VoteEnvelope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vochain_vochain_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoteEnvelope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoteEnvelope) ProtoMessage() {}

func (x *VoteEnvelope) ProtoReflect() protoreflect.Message {
	mi := &file_vochain_vochain_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoteEnvelope.ProtoReflect.Descriptor instead.
func (*VoteEnvelope) Descriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{1}
}

func (x *VoteEnvelope) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *VoteEnvelope) GetProcessId() []byte {
	if x != nil {
		return x.ProcessId
	}
	return nil
}

func (x *VoteEnvelope) GetProof() *Proof {
	if x != nil {
		return x.Proof
	}
	return nil
}

func (x *VoteEnvelope) GetVotePackage() []byte {
	if x != nil {
		return x.VotePackage
	}
	return nil
}

func (x *VoteEnvelope) GetNullifier() []byte {
	if x != nil {
		return x.Nullifier
	}
	return nil
}

func (x *VoteEnvelope) GetEncryptionKeyIndexes() []uint32 {
	if x != nil {
		return x.EncryptionKeyIndexes
	}
	return nil
}

type Proof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//	*Proof_Graviton
	//	*Proof_Iden3
	//	*Proof_EthereumStorage
	//	*Proof_EthereumAccount
	//	*Proof_Ca
	Payload isProof_Payload `protobuf_oneof:"payload"`
}

func (x *Proof) Reset() {
	*x = Proof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vochain_vochain_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Proof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proof) ProtoMessage() {}

func (x *Proof) ProtoReflect() protoreflect.Message {
	mi := &file_vochain_vochain_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proof.ProtoReflect.Descriptor instead.
func (*Proof) Descriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{2}
}

func (m *Proof) GetPayload() isProof_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *Proof) GetGraviton() *ProofGraviton {
	if x, ok := x.GetPayload().(*Proof_Graviton); ok {
		return x.Graviton
	}
	return nil
}

func (x *Proof) GetIden3() *ProofIden3 {
	if x, ok := x.GetPayload().(*Proof_Iden3); ok {
		return x.Iden3
	}
	return nil
}

func (x *Proof) GetEthereumStorage() *ProofEthereumStorage {
	if x, ok := x.GetPayload().(*Proof_EthereumStorage); ok {
		return x.EthereumStorage
	}
	return nil
}

func (x *Proof) GetEthereumAccount() *ProofEthereumAccount {
	if x, ok := x.GetPayload().(*Proof_EthereumAccount); ok {
		return x.EthereumAccount
	}
	return nil
}

func (x *Proof) GetCa() *ProofCA {
	if x, ok := x.GetPayload().(*Proof_Ca); ok {
		return x.Ca
	}
	return nil
}

type isProof_Payload interface {
	isProof_Payload()
}

type Proof_Graviton struct {
	// Proof used for signed envelopes
	Graviton *ProofGraviton `protobuf:"bytes,1,opt,name=graviton,proto3,oneof"`
}

type Proof_Iden3 struct {
	// Proof used for anonymous votes
	Iden3 *ProofIden3 `protobuf:"bytes,2,opt,name=iden3,proto3,oneof"`
}

type Proof_EthereumStorage struct {
	// Proof used on EVM census based processes
	EthereumStorage *ProofEthereumStorage `protobuf:"bytes,3,opt,name=ethereumStorage,proto3,oneof"`
}

type Proof_EthereumAccount struct {
	// Proof used by oracles to update the census of EVM processes
	EthereumAccount *ProofEthereumAccount `protobuf:"bytes,4,opt,name=ethereumAccount,proto3,oneof"`
}

type Proof_Ca struct {
	// Proof Certification Authority
	Ca *ProofCA `protobuf:"bytes,5,opt,name=ca,proto3,oneof"`
}

func (*Proof_Graviton) isProof_Payload() {}

func (*Proof_Iden3) isProof_Payload() {}

func (*Proof_EthereumStorage) isProof_Payload() {}

func (*Proof_EthereumAccount) isProof_Payload() {}

func (*Proof_Ca) isProof_Payload() {}

type ProofGraviton struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Siblings []byte `protobuf:"bytes,1,opt,name=siblings,proto3" json:"siblings,omitempty"`
}

func (x *ProofGraviton) Reset() {
	*x = ProofGraviton{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vochain_vochain_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProofGraviton) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProofGraviton) ProtoMessage() {}

func (x *ProofGraviton) ProtoReflect() protoreflect.Message {
	mi := &file_vochain_vochain_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProofGraviton.ProtoReflect.Descriptor instead.
func (*ProofGraviton) Descriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{3}
}

func (x *ProofGraviton) GetSiblings() []byte {
	if x != nil {
		return x.Siblings
	}
	return nil
}

type ProofIden3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Siblings []byte `protobuf:"bytes,1,opt,name=siblings,proto3" json:"siblings,omitempty"`
}

func (x *ProofIden3) Reset() {
	*x = ProofIden3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vochain_vochain_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProofIden3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProofIden3) ProtoMessage() {}

func (x *ProofIden3) ProtoReflect() protoreflect.Message {
	mi := &file_vochain_vochain_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProofIden3.ProtoReflect.Descriptor instead.
func (*ProofIden3) Descriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{4}
}

func (x *ProofIden3) GetSiblings() []byte {
	if x != nil {
		return x.Siblings
	}
	return nil
}

type ProofCA struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      SignatureType `protobuf:"varint,1,opt,name=type,proto3,enum=dvote.types.v1.SignatureType" json:"type,omitempty"`
	Bundle    *CAbundle     `protobuf:"bytes,2,opt,name=bundle,proto3" json:"bundle,omitempty"`
	Signature []byte        `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *ProofCA) Reset() {
	*x = ProofCA{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vochain_vochain_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProofCA) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProofCA) ProtoMessage() {}

func (x *ProofCA) ProtoReflect() protoreflect.Message {
	mi := &file_vochain_vochain_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProofCA.ProtoReflect.Descriptor instead.
func (*ProofCA) Descriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{5}
}

func (x *ProofCA) GetType() SignatureType {
	if x != nil {
		return x.Type
	}
	return SignatureType_UNKNOWN
}

func (x *ProofCA) GetBundle() *CAbundle {
	if x != nil {
		return x.Bundle
	}
	return nil
}

func (x *ProofCA) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type CAbundle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcessId []byte `protobuf:"bytes,1,opt,name=processId,proto3" json:"processId,omitempty"`
	Address   []byte `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *CAbundle) Reset() {
	*x = CAbundle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vochain_vochain_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAbundle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAbundle) ProtoMessage() {}

func (x *CAbundle) ProtoReflect() protoreflect.Message {
	mi := &file_vochain_vochain_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAbundle.ProtoReflect.Descriptor instead.
func (*CAbundle) Descriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{6}
}

func (x *CAbundle) GetProcessId() []byte {
	if x != nil {
		return x.ProcessId
	}
	return nil
}

func (x *CAbundle) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

type ProofEthereumStorage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key      []byte   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value    []byte   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Siblings [][]byte `protobuf:"bytes,3,rep,name=siblings,proto3" json:"siblings,omitempty"`
}

func (x *ProofEthereumStorage) Reset() {
	*x = ProofEthereumStorage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vochain_vochain_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProofEthereumStorage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProofEthereumStorage) ProtoMessage() {}

func (x *ProofEthereumStorage) ProtoReflect() protoreflect.Message {
	mi := &file_vochain_vochain_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProofEthereumStorage.ProtoReflect.Descriptor instead.
func (*ProofEthereumStorage) Descriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{7}
}

func (x *ProofEthereumStorage) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *ProofEthereumStorage) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *ProofEthereumStorage) GetSiblings() [][]byte {
	if x != nil {
		return x.Siblings
	}
	return nil
}

type ProofEthereumAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nonce       []byte   `protobuf:"bytes,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Balance     []byte   `protobuf:"bytes,2,opt,name=balance,proto3" json:"balance,omitempty"` // Big Int encoded as bytes
	StorageHash []byte   `protobuf:"bytes,3,opt,name=storageHash,proto3" json:"storageHash,omitempty"`
	CodeHash    []byte   `protobuf:"bytes,4,opt,name=codeHash,proto3" json:"codeHash,omitempty"`
	Siblings    [][]byte `protobuf:"bytes,5,rep,name=siblings,proto3" json:"siblings,omitempty"`
}

func (x *ProofEthereumAccount) Reset() {
	*x = ProofEthereumAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vochain_vochain_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProofEthereumAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProofEthereumAccount) ProtoMessage() {}

func (x *ProofEthereumAccount) ProtoReflect() protoreflect.Message {
	mi := &file_vochain_vochain_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProofEthereumAccount.ProtoReflect.Descriptor instead.
func (*ProofEthereumAccount) Descriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{8}
}

func (x *ProofEthereumAccount) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *ProofEthereumAccount) GetBalance() []byte {
	if x != nil {
		return x.Balance
	}
	return nil
}

func (x *ProofEthereumAccount) GetStorageHash() []byte {
	if x != nil {
		return x.StorageHash
	}
	return nil
}

func (x *ProofEthereumAccount) GetCodeHash() []byte {
	if x != nil {
		return x.CodeHash
	}
	return nil
}

func (x *ProofEthereumAccount) GetSiblings() [][]byte {
	if x != nil {
		return x.Siblings
	}
	return nil
}

type Tx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//	*Tx_Vote
	//	*Tx_NewProcess
	//	*Tx_Admin
	//	*Tx_SetProcess
	Payload isTx_Payload `protobuf_oneof:"payload"`
}

func (x *Tx) Reset() {
	*x = Tx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vochain_vochain_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tx) ProtoMessage() {}

func (x *Tx) ProtoReflect() protoreflect.Message {
	mi := &file_vochain_vochain_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tx.ProtoReflect.Descriptor instead.
func (*Tx) Descriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{9}
}

func (m *Tx) GetPayload() isTx_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *Tx) GetVote() *VoteEnvelope {
	if x, ok := x.GetPayload().(*Tx_Vote); ok {
		return x.Vote
	}
	return nil
}

func (x *Tx) GetNewProcess() *NewProcessTx {
	if x, ok := x.GetPayload().(*Tx_NewProcess); ok {
		return x.NewProcess
	}
	return nil
}

func (x *Tx) GetAdmin() *AdminTx {
	if x, ok := x.GetPayload().(*Tx_Admin); ok {
		return x.Admin
	}
	return nil
}

func (x *Tx) GetSetProcess() *SetProcessTx {
	if x, ok := x.GetPayload().(*Tx_SetProcess); ok {
		return x.SetProcess
	}
	return nil
}

type isTx_Payload interface {
	isTx_Payload()
}

type Tx_Vote struct {
	Vote *VoteEnvelope `protobuf:"bytes,1,opt,name=vote,proto3,oneof"`
}

type Tx_NewProcess struct {
	NewProcess *NewProcessTx `protobuf:"bytes,2,opt,name=newProcess,proto3,oneof"`
}

type Tx_Admin struct {
	Admin *AdminTx `protobuf:"bytes,3,opt,name=admin,proto3,oneof"`
}

type Tx_SetProcess struct {
	SetProcess *SetProcessTx `protobuf:"bytes,4,opt,name=setProcess,proto3,oneof"`
}

func (*Tx_Vote) isTx_Payload() {}

func (*Tx_NewProcess) isTx_Payload() {}

func (*Tx_Admin) isTx_Payload() {}

func (*Tx_SetProcess) isTx_Payload() {}

type SignedTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tx        []byte `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`                     // The bytes produced by Marshaling a Tx{} message
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3,oneof" json:"signature,omitempty"` // The signature for the tx bytes.
}

func (x *SignedTx) Reset() {
	*x = SignedTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vochain_vochain_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignedTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedTx) ProtoMessage() {}

func (x *SignedTx) ProtoReflect() protoreflect.Message {
	mi := &file_vochain_vochain_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedTx.ProtoReflect.Descriptor instead.
func (*SignedTx) Descriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{10}
}

func (x *SignedTx) GetTx() []byte {
	if x != nil {
		return x.Tx
	}
	return nil
}

func (x *SignedTx) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type NewProcessTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txtype  TxType   `protobuf:"varint,1,opt,name=txtype,proto3,enum=dvote.types.v1.TxType" json:"txtype,omitempty"`
	Nonce   []byte   `protobuf:"bytes,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Process *Process `protobuf:"bytes,3,opt,name=process,proto3" json:"process,omitempty"`
}

func (x *NewProcessTx) Reset() {
	*x = NewProcessTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vochain_vochain_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewProcessTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewProcessTx) ProtoMessage() {}

func (x *NewProcessTx) ProtoReflect() protoreflect.Message {
	mi := &file_vochain_vochain_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewProcessTx.ProtoReflect.Descriptor instead.
func (*NewProcessTx) Descriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{11}
}

func (x *NewProcessTx) GetTxtype() TxType {
	if x != nil {
		return x.Txtype
	}
	return TxType_TX_UNKNOWN
}

func (x *NewProcessTx) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *NewProcessTx) GetProcess() *Process {
	if x != nil {
		return x.Process
	}
	return nil
}

type SetProcessTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txtype        TxType         `protobuf:"varint,1,opt,name=txtype,proto3,enum=dvote.types.v1.TxType" json:"txtype,omitempty"`
	Nonce         []byte         `protobuf:"bytes,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	ProcessId     []byte         `protobuf:"bytes,3,opt,name=processId,proto3" json:"processId,omitempty"`
	Status        *ProcessStatus `protobuf:"varint,4,opt,name=status,proto3,enum=dvote.types.v1.ProcessStatus,oneof" json:"status,omitempty"`
	QuestionIndex *uint32        `protobuf:"varint,5,opt,name=questionIndex,proto3,oneof" json:"questionIndex,omitempty"`
	CensusRoot    []byte         `protobuf:"bytes,6,opt,name=censusRoot,proto3,oneof" json:"censusRoot,omitempty"`
	CensusURI     *string        `protobuf:"bytes,7,opt,name=censusURI,proto3,oneof" json:"censusURI,omitempty"`
	Proof         *Proof         `protobuf:"bytes,8,opt,name=proof,proto3,oneof" json:"proof,omitempty"`
	Results       *ProcessResult `protobuf:"bytes,9,opt,name=results,proto3,oneof" json:"results,omitempty"`
}

func (x *SetProcessTx) Reset() {
	*x = SetProcessTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vochain_vochain_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetProcessTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetProcessTx) ProtoMessage() {}

func (x *SetProcessTx) ProtoReflect() protoreflect.Message {
	mi := &file_vochain_vochain_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetProcessTx.ProtoReflect.Descriptor instead.
func (*SetProcessTx) Descriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{12}
}

func (x *SetProcessTx) GetTxtype() TxType {
	if x != nil {
		return x.Txtype
	}
	return TxType_TX_UNKNOWN
}

func (x *SetProcessTx) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *SetProcessTx) GetProcessId() []byte {
	if x != nil {
		return x.ProcessId
	}
	return nil
}

func (x *SetProcessTx) GetStatus() ProcessStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ProcessStatus_PROCESS_UNKNOWN
}

func (x *SetProcessTx) GetQuestionIndex() uint32 {
	if x != nil && x.QuestionIndex != nil {
		return *x.QuestionIndex
	}
	return 0
}

func (x *SetProcessTx) GetCensusRoot() []byte {
	if x != nil {
		return x.CensusRoot
	}
	return nil
}

func (x *SetProcessTx) GetCensusURI() string {
	if x != nil && x.CensusURI != nil {
		return *x.CensusURI
	}
	return ""
}

func (x *SetProcessTx) GetProof() *Proof {
	if x != nil {
		return x.Proof
	}
	return nil
}

func (x *SetProcessTx) GetResults() *ProcessResult {
	if x != nil {
		return x.Results
	}
	return nil
}

type AdminTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txtype               TxType  `protobuf:"varint,1,opt,name=txtype,proto3,enum=dvote.types.v1.TxType" json:"txtype,omitempty"`
	ProcessId            []byte  `protobuf:"bytes,2,opt,name=processId,proto3" json:"processId,omitempty"`
	Address              []byte  `protobuf:"bytes,3,opt,name=address,proto3,oneof" json:"address,omitempty"`
	CommitmentKey        []byte  `protobuf:"bytes,4,opt,name=commitmentKey,proto3,oneof" json:"commitmentKey,omitempty"`
	EncryptionPrivateKey []byte  `protobuf:"bytes,5,opt,name=encryptionPrivateKey,proto3,oneof" json:"encryptionPrivateKey,omitempty"`
	EncryptionPublicKey  []byte  `protobuf:"bytes,6,opt,name=encryptionPublicKey,proto3,oneof" json:"encryptionPublicKey,omitempty"`
	KeyIndex             *uint32 `protobuf:"varint,7,opt,name=keyIndex,proto3,oneof" json:"keyIndex,omitempty"`
	Power                *uint64 `protobuf:"varint,8,opt,name=power,proto3,oneof" json:"power,omitempty"`
	PublicKey            []byte  `protobuf:"bytes,9,opt,name=publicKey,proto3,oneof" json:"publicKey,omitempty"`
	RevealKey            []byte  `protobuf:"bytes,10,opt,name=revealKey,proto3,oneof" json:"revealKey,omitempty"`
	Nonce                []byte  `protobuf:"bytes,11,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *AdminTx) Reset() {
	*x = AdminTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vochain_vochain_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminTx) ProtoMessage() {}

func (x *AdminTx) ProtoReflect() protoreflect.Message {
	mi := &file_vochain_vochain_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminTx.ProtoReflect.Descriptor instead.
func (*AdminTx) Descriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{13}
}

func (x *AdminTx) GetTxtype() TxType {
	if x != nil {
		return x.Txtype
	}
	return TxType_TX_UNKNOWN
}

func (x *AdminTx) GetProcessId() []byte {
	if x != nil {
		return x.ProcessId
	}
	return nil
}

func (x *AdminTx) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *AdminTx) GetCommitmentKey() []byte {
	if x != nil {
		return x.CommitmentKey
	}
	return nil
}

func (x *AdminTx) GetEncryptionPrivateKey() []byte {
	if x != nil {
		return x.EncryptionPrivateKey
	}
	return nil
}

func (x *AdminTx) GetEncryptionPublicKey() []byte {
	if x != nil {
		return x.EncryptionPublicKey
	}
	return nil
}

func (x *AdminTx) GetKeyIndex() uint32 {
	if x != nil && x.KeyIndex != nil {
		return *x.KeyIndex
	}
	return 0
}

func (x *AdminTx) GetPower() uint64 {
	if x != nil && x.Power != nil {
		return *x.Power
	}
	return 0
}

func (x *AdminTx) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *AdminTx) GetRevealKey() []byte {
	if x != nil {
		return x.RevealKey
	}
	return nil
}

func (x *AdminTx) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

type Process struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcessId []byte `protobuf:"bytes,1,opt,name=processId,proto3" json:"processId,omitempty"`
	// EntityId identifies unequivocally a process
	EntityId []byte `protobuf:"bytes,2,opt,name=entityId,proto3" json:"entityId,omitempty"`
	// StartBlock represents the tendermint block where the process goes from scheduled to active
	StartBlock uint32 `protobuf:"varint,3,opt,name=startBlock,proto3" json:"startBlock,omitempty"`
	// BlockCount represents the amount of tendermint blocks that the process will last
	BlockCount uint32 `protobuf:"varint,4,opt,name=blockCount,proto3" json:"blockCount,omitempty"`
	// CensusRoot merkle root of all the census in the process
	CensusRoot []byte `protobuf:"bytes,5,opt,name=censusRoot,proto3" json:"censusRoot,omitempty"`
	// CensusURI where to find the census
	CensusURI *string `protobuf:"bytes,6,opt,name=censusURI,proto3,oneof" json:"censusURI,omitempty"`
	// CommitmentKeys are the reveal keys hashed
	CommitmentKeys []string `protobuf:"bytes,7,rep,name=commitmentKeys,proto3" json:"commitmentKeys,omitempty"`
	// EncryptionPrivateKeys are the keys required to decrypt the votes
	EncryptionPrivateKeys []string `protobuf:"bytes,8,rep,name=encryptionPrivateKeys,proto3" json:"encryptionPrivateKeys,omitempty"`
	// EncryptionPublicKeys are the keys required to encrypt the votes
	EncryptionPublicKeys []string `protobuf:"bytes,9,rep,name=encryptionPublicKeys,proto3" json:"encryptionPublicKeys,omitempty"`
	// RevealKeys are the seed of the CommitmentKeys
	RevealKeys        []string            `protobuf:"bytes,10,rep,name=revealKeys,proto3" json:"revealKeys,omitempty"`
	KeyIndex          *uint32             `protobuf:"varint,11,opt,name=keyIndex,proto3,oneof" json:"keyIndex,omitempty"`
	Status            ProcessStatus       `protobuf:"varint,12,opt,name=status,proto3,enum=dvote.types.v1.ProcessStatus" json:"status,omitempty"`
	ParamsSignature   []byte              `protobuf:"bytes,13,opt,name=paramsSignature,proto3,oneof" json:"paramsSignature,omitempty"`
	Namespace         uint32              `protobuf:"varint,14,opt,name=namespace,proto3" json:"namespace,omitempty"`
	EnvelopeType      *EnvelopeType       `protobuf:"bytes,15,opt,name=envelopeType,proto3" json:"envelopeType,omitempty"`
	Mode              *ProcessMode        `protobuf:"bytes,16,opt,name=mode,proto3" json:"mode,omitempty"`
	QuestionIndex     *uint32             `protobuf:"varint,17,opt,name=questionIndex,proto3,oneof" json:"questionIndex,omitempty"`
	QuestionCount     *uint32             `protobuf:"varint,18,opt,name=questionCount,proto3,oneof" json:"questionCount,omitempty"`
	VoteOptions       *ProcessVoteOptions `protobuf:"bytes,19,opt,name=voteOptions,proto3" json:"voteOptions,omitempty"`
	CensusOrigin      CensusOrigin        `protobuf:"varint,20,opt,name=censusOrigin,proto3,enum=dvote.types.v1.CensusOrigin" json:"censusOrigin,omitempty"`
	Results           *ProcessResult      `protobuf:"bytes,21,opt,name=results,proto3" json:"results,omitempty"`
	ResultsSignatures [][]byte            `protobuf:"bytes,22,rep,name=resultsSignatures,proto3" json:"resultsSignatures,omitempty"`
	EthIndexSlot      *uint32             `protobuf:"varint,23,opt,name=ethIndexSlot,proto3,oneof" json:"ethIndexSlot,omitempty"`
	// SourceBlockHeight is the block height of the origin blockchain (if any)
	SourceBlockHeight *uint64 `protobuf:"varint,24,opt,name=sourceBlockHeight,proto3,oneof" json:"sourceBlockHeight,omitempty"`
	// Owner is the creator of a process (if any) otherwise is assumed the creator is the entityId
	Owner []byte `protobuf:"bytes,25,opt,name=owner,proto3,oneof" json:"owner,omitempty"`
}

func (x *Process) Reset() {
	*x = Process{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vochain_vochain_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Process) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Process) ProtoMessage() {}

func (x *Process) ProtoReflect() protoreflect.Message {
	mi := &file_vochain_vochain_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Process.ProtoReflect.Descriptor instead.
func (*Process) Descriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{14}
}

func (x *Process) GetProcessId() []byte {
	if x != nil {
		return x.ProcessId
	}
	return nil
}

func (x *Process) GetEntityId() []byte {
	if x != nil {
		return x.EntityId
	}
	return nil
}

func (x *Process) GetStartBlock() uint32 {
	if x != nil {
		return x.StartBlock
	}
	return 0
}

func (x *Process) GetBlockCount() uint32 {
	if x != nil {
		return x.BlockCount
	}
	return 0
}

func (x *Process) GetCensusRoot() []byte {
	if x != nil {
		return x.CensusRoot
	}
	return nil
}

func (x *Process) GetCensusURI() string {
	if x != nil && x.CensusURI != nil {
		return *x.CensusURI
	}
	return ""
}

func (x *Process) GetCommitmentKeys() []string {
	if x != nil {
		return x.CommitmentKeys
	}
	return nil
}

func (x *Process) GetEncryptionPrivateKeys() []string {
	if x != nil {
		return x.EncryptionPrivateKeys
	}
	return nil
}

func (x *Process) GetEncryptionPublicKeys() []string {
	if x != nil {
		return x.EncryptionPublicKeys
	}
	return nil
}

func (x *Process) GetRevealKeys() []string {
	if x != nil {
		return x.RevealKeys
	}
	return nil
}

func (x *Process) GetKeyIndex() uint32 {
	if x != nil && x.KeyIndex != nil {
		return *x.KeyIndex
	}
	return 0
}

func (x *Process) GetStatus() ProcessStatus {
	if x != nil {
		return x.Status
	}
	return ProcessStatus_PROCESS_UNKNOWN
}

func (x *Process) GetParamsSignature() []byte {
	if x != nil {
		return x.ParamsSignature
	}
	return nil
}

func (x *Process) GetNamespace() uint32 {
	if x != nil {
		return x.Namespace
	}
	return 0
}

func (x *Process) GetEnvelopeType() *EnvelopeType {
	if x != nil {
		return x.EnvelopeType
	}
	return nil
}

func (x *Process) GetMode() *ProcessMode {
	if x != nil {
		return x.Mode
	}
	return nil
}

func (x *Process) GetQuestionIndex() uint32 {
	if x != nil && x.QuestionIndex != nil {
		return *x.QuestionIndex
	}
	return 0
}

func (x *Process) GetQuestionCount() uint32 {
	if x != nil && x.QuestionCount != nil {
		return *x.QuestionCount
	}
	return 0
}

func (x *Process) GetVoteOptions() *ProcessVoteOptions {
	if x != nil {
		return x.VoteOptions
	}
	return nil
}

func (x *Process) GetCensusOrigin() CensusOrigin {
	if x != nil {
		return x.CensusOrigin
	}
	return CensusOrigin_CENSUS_UNKNOWN
}

func (x *Process) GetResults() *ProcessResult {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *Process) GetResultsSignatures() [][]byte {
	if x != nil {
		return x.ResultsSignatures
	}
	return nil
}

func (x *Process) GetEthIndexSlot() uint32 {
	if x != nil && x.EthIndexSlot != nil {
		return *x.EthIndexSlot
	}
	return 0
}

func (x *Process) GetSourceBlockHeight() uint64 {
	if x != nil && x.SourceBlockHeight != nil {
		return *x.SourceBlockHeight
	}
	return 0
}

func (x *Process) GetOwner() []byte {
	if x != nil {
		return x.Owner
	}
	return nil
}

type EnvelopeType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Serial         bool `protobuf:"varint,1,opt,name=serial,proto3" json:"serial,omitempty"`
	Anonymous      bool `protobuf:"varint,2,opt,name=anonymous,proto3" json:"anonymous,omitempty"`
	EncryptedVotes bool `protobuf:"varint,3,opt,name=encryptedVotes,proto3" json:"encryptedVotes,omitempty"`
	UniqueValues   bool `protobuf:"varint,4,opt,name=uniqueValues,proto3" json:"uniqueValues,omitempty"`
	CostFromWeight bool `protobuf:"varint,5,opt,name=costFromWeight,proto3" json:"costFromWeight,omitempty"`
}

func (x *EnvelopeType) Reset() {
	*x = EnvelopeType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vochain_vochain_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnvelopeType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvelopeType) ProtoMessage() {}

func (x *EnvelopeType) ProtoReflect() protoreflect.Message {
	mi := &file_vochain_vochain_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvelopeType.ProtoReflect.Descriptor instead.
func (*EnvelopeType) Descriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{15}
}

func (x *EnvelopeType) GetSerial() bool {
	if x != nil {
		return x.Serial
	}
	return false
}

func (x *EnvelopeType) GetAnonymous() bool {
	if x != nil {
		return x.Anonymous
	}
	return false
}

func (x *EnvelopeType) GetEncryptedVotes() bool {
	if x != nil {
		return x.EncryptedVotes
	}
	return false
}

func (x *EnvelopeType) GetUniqueValues() bool {
	if x != nil {
		return x.UniqueValues
	}
	return false
}

func (x *EnvelopeType) GetCostFromWeight() bool {
	if x != nil {
		return x.CostFromWeight
	}
	return false
}

type ProcessMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AutoStart         bool `protobuf:"varint,1,opt,name=autoStart,proto3" json:"autoStart,omitempty"`
	Interruptible     bool `protobuf:"varint,2,opt,name=interruptible,proto3" json:"interruptible,omitempty"`
	DynamicCensus     bool `protobuf:"varint,3,opt,name=dynamicCensus,proto3" json:"dynamicCensus,omitempty"`
	EncryptedMetaData bool `protobuf:"varint,4,opt,name=encryptedMetaData,proto3" json:"encryptedMetaData,omitempty"`
}

func (x *ProcessMode) Reset() {
	*x = ProcessMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vochain_vochain_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessMode) ProtoMessage() {}

func (x *ProcessMode) ProtoReflect() protoreflect.Message {
	mi := &file_vochain_vochain_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessMode.ProtoReflect.Descriptor instead.
func (*ProcessMode) Descriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{16}
}

func (x *ProcessMode) GetAutoStart() bool {
	if x != nil {
		return x.AutoStart
	}
	return false
}

func (x *ProcessMode) GetInterruptible() bool {
	if x != nil {
		return x.Interruptible
	}
	return false
}

func (x *ProcessMode) GetDynamicCensus() bool {
	if x != nil {
		return x.DynamicCensus
	}
	return false
}

func (x *ProcessMode) GetEncryptedMetaData() bool {
	if x != nil {
		return x.EncryptedMetaData
	}
	return false
}

type ProcessVoteOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxCount          uint32 `protobuf:"varint,1,opt,name=maxCount,proto3" json:"maxCount,omitempty"`
	MaxValue          uint32 `protobuf:"varint,2,opt,name=maxValue,proto3" json:"maxValue,omitempty"`
	MaxVoteOverwrites uint32 `protobuf:"varint,3,opt,name=maxVoteOverwrites,proto3" json:"maxVoteOverwrites,omitempty"`
	MaxTotalCost      uint32 `protobuf:"varint,4,opt,name=maxTotalCost,proto3" json:"maxTotalCost,omitempty"`
	CostExponent      uint32 `protobuf:"varint,5,opt,name=costExponent,proto3" json:"costExponent,omitempty"`
}

func (x *ProcessVoteOptions) Reset() {
	*x = ProcessVoteOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vochain_vochain_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessVoteOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessVoteOptions) ProtoMessage() {}

func (x *ProcessVoteOptions) ProtoReflect() protoreflect.Message {
	mi := &file_vochain_vochain_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessVoteOptions.ProtoReflect.Descriptor instead.
func (*ProcessVoteOptions) Descriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{17}
}

func (x *ProcessVoteOptions) GetMaxCount() uint32 {
	if x != nil {
		return x.MaxCount
	}
	return 0
}

func (x *ProcessVoteOptions) GetMaxValue() uint32 {
	if x != nil {
		return x.MaxValue
	}
	return 0
}

func (x *ProcessVoteOptions) GetMaxVoteOverwrites() uint32 {
	if x != nil {
		return x.MaxVoteOverwrites
	}
	return 0
}

func (x *ProcessVoteOptions) GetMaxTotalCost() uint32 {
	if x != nil {
		return x.MaxTotalCost
	}
	return 0
}

func (x *ProcessVoteOptions) GetCostExponent() uint32 {
	if x != nil {
		return x.CostExponent
	}
	return 0
}

type OracleList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oracles [][]byte `protobuf:"bytes,1,rep,name=oracles,proto3" json:"oracles,omitempty"`
}

func (x *OracleList) Reset() {
	*x = OracleList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vochain_vochain_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OracleList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OracleList) ProtoMessage() {}

func (x *OracleList) ProtoReflect() protoreflect.Message {
	mi := &file_vochain_vochain_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OracleList.ProtoReflect.Descriptor instead.
func (*OracleList) Descriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{18}
}

func (x *OracleList) GetOracles() [][]byte {
	if x != nil {
		return x.Oracles
	}
	return nil
}

type Validator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address []byte `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	PubKey  []byte `protobuf:"bytes,2,opt,name=pubKey,proto3" json:"pubKey,omitempty"`
	Power   uint64 `protobuf:"varint,3,opt,name=power,proto3" json:"power,omitempty"`
	Name    string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Validator) Reset() {
	*x = Validator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vochain_vochain_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Validator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Validator) ProtoMessage() {}

func (x *Validator) ProtoReflect() protoreflect.Message {
	mi := &file_vochain_vochain_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Validator.ProtoReflect.Descriptor instead.
func (*Validator) Descriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{19}
}

func (x *Validator) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *Validator) GetPubKey() []byte {
	if x != nil {
		return x.PubKey
	}
	return nil
}

func (x *Validator) GetPower() uint64 {
	if x != nil {
		return x.Power
	}
	return 0
}

func (x *Validator) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Vote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height               uint32   `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Nullifier            []byte   `protobuf:"bytes,2,opt,name=nullifier,proto3" json:"nullifier,omitempty"`
	ProcessId            []byte   `protobuf:"bytes,3,opt,name=processId,proto3" json:"processId,omitempty"`
	VotePackage          []byte   `protobuf:"bytes,4,opt,name=votePackage,proto3" json:"votePackage,omitempty"`
	EncryptionKeyIndexes []uint32 `protobuf:"varint,5,rep,packed,name=encryptionKeyIndexes,proto3" json:"encryptionKeyIndexes,omitempty"`
	Weight               []byte   `protobuf:"bytes,6,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (x *Vote) Reset() {
	*x = Vote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vochain_vochain_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vote) ProtoMessage() {}

func (x *Vote) ProtoReflect() protoreflect.Message {
	mi := &file_vochain_vochain_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vote.ProtoReflect.Descriptor instead.
func (*Vote) Descriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{20}
}

func (x *Vote) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *Vote) GetNullifier() []byte {
	if x != nil {
		return x.Nullifier
	}
	return nil
}

func (x *Vote) GetProcessId() []byte {
	if x != nil {
		return x.ProcessId
	}
	return nil
}

func (x *Vote) GetVotePackage() []byte {
	if x != nil {
		return x.VotePackage
	}
	return nil
}

func (x *Vote) GetEncryptionKeyIndexes() []uint32 {
	if x != nil {
		return x.EncryptionKeyIndexes
	}
	return nil
}

func (x *Vote) GetWeight() []byte {
	if x != nil {
		return x.Weight
	}
	return nil
}

type TendermintHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// basic block info
	ChainId   string `protobuf:"bytes,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Height    int64  `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	Timestamp int64  `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// prev block info
	BlockID []byte `protobuf:"bytes,5,opt,name=blockID,proto3" json:"blockID,omitempty"`
	// hashes of block data
	LastCommitHash []byte `protobuf:"bytes,6,opt,name=last_commit_hash,json=lastCommitHash,proto3" json:"last_commit_hash,omitempty"` // commit from validators from the last block
	DataHash       []byte `protobuf:"bytes,7,opt,name=data_hash,json=dataHash,proto3" json:"data_hash,omitempty"`                     // transactions
	// hashes from the app output from the prev block
	ValidatorsHash     []byte `protobuf:"bytes,8,opt,name=validators_hash,json=validatorsHash,proto3" json:"validators_hash,omitempty"`               // validators for the current block
	NextValidatorsHash []byte `protobuf:"bytes,9,opt,name=next_validators_hash,json=nextValidatorsHash,proto3" json:"next_validators_hash,omitempty"` // validators for the next block
	ConsensusHash      []byte `protobuf:"bytes,10,opt,name=consensus_hash,json=consensusHash,proto3" json:"consensus_hash,omitempty"`                 // consensus params for current block
	AppHash            []byte `protobuf:"bytes,11,opt,name=app_hash,json=appHash,proto3" json:"app_hash,omitempty"`                                   // state after txs from the previous block
	LastResultsHash    []byte `protobuf:"bytes,12,opt,name=last_results_hash,json=lastResultsHash,proto3" json:"last_results_hash,omitempty"`         // root hash of all results from the txs from the previous block
	// consensus info
	EvidenceHash    []byte `protobuf:"bytes,13,opt,name=evidence_hash,json=evidenceHash,proto3" json:"evidence_hash,omitempty"`          // evidence included in the block
	ProposerAddress []byte `protobuf:"bytes,14,opt,name=proposer_address,json=proposerAddress,proto3" json:"proposer_address,omitempty"` // original proposer of the block
}

func (x *TendermintHeader) Reset() {
	*x = TendermintHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vochain_vochain_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TendermintHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TendermintHeader) ProtoMessage() {}

func (x *TendermintHeader) ProtoReflect() protoreflect.Message {
	mi := &file_vochain_vochain_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TendermintHeader.ProtoReflect.Descriptor instead.
func (*TendermintHeader) Descriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{21}
}

func (x *TendermintHeader) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *TendermintHeader) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *TendermintHeader) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *TendermintHeader) GetBlockID() []byte {
	if x != nil {
		return x.BlockID
	}
	return nil
}

func (x *TendermintHeader) GetLastCommitHash() []byte {
	if x != nil {
		return x.LastCommitHash
	}
	return nil
}

func (x *TendermintHeader) GetDataHash() []byte {
	if x != nil {
		return x.DataHash
	}
	return nil
}

func (x *TendermintHeader) GetValidatorsHash() []byte {
	if x != nil {
		return x.ValidatorsHash
	}
	return nil
}

func (x *TendermintHeader) GetNextValidatorsHash() []byte {
	if x != nil {
		return x.NextValidatorsHash
	}
	return nil
}

func (x *TendermintHeader) GetConsensusHash() []byte {
	if x != nil {
		return x.ConsensusHash
	}
	return nil
}

func (x *TendermintHeader) GetAppHash() []byte {
	if x != nil {
		return x.AppHash
	}
	return nil
}

func (x *TendermintHeader) GetLastResultsHash() []byte {
	if x != nil {
		return x.LastResultsHash
	}
	return nil
}

func (x *TendermintHeader) GetEvidenceHash() []byte {
	if x != nil {
		return x.EvidenceHash
	}
	return nil
}

func (x *TendermintHeader) GetProposerAddress() []byte {
	if x != nil {
		return x.ProposerAddress
	}
	return nil
}

// Scrutinizer
type ProcessResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Votes     []*QuestionResult `protobuf:"bytes,1,rep,name=votes,proto3" json:"votes,omitempty"`
	ProcessId []byte            `protobuf:"bytes,2,opt,name=processId,proto3,oneof" json:"processId,omitempty"`
	EntityId  []byte            `protobuf:"bytes,3,opt,name=entityId,proto3,oneof" json:"entityId,omitempty"`
}

func (x *ProcessResult) Reset() {
	*x = ProcessResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vochain_vochain_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessResult) ProtoMessage() {}

func (x *ProcessResult) ProtoReflect() protoreflect.Message {
	mi := &file_vochain_vochain_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessResult.ProtoReflect.Descriptor instead.
func (*ProcessResult) Descriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{22}
}

func (x *ProcessResult) GetVotes() []*QuestionResult {
	if x != nil {
		return x.Votes
	}
	return nil
}

func (x *ProcessResult) GetProcessId() []byte {
	if x != nil {
		return x.ProcessId
	}
	return nil
}

func (x *ProcessResult) GetEntityId() []byte {
	if x != nil {
		return x.EntityId
	}
	return nil
}

type QuestionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Question [][]byte `protobuf:"bytes,1,rep,name=question,proto3" json:"question,omitempty"`
}

func (x *QuestionResult) Reset() {
	*x = QuestionResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vochain_vochain_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionResult) ProtoMessage() {}

func (x *QuestionResult) ProtoReflect() protoreflect.Message {
	mi := &file_vochain_vochain_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionResult.ProtoReflect.Descriptor instead.
func (*QuestionResult) Descriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{23}
}

func (x *QuestionResult) GetQuestion() [][]byte {
	if x != nil {
		return x.Question
	}
	return nil
}

type ProcessEndingList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcessList [][]byte `protobuf:"bytes,1,rep,name=processList,proto3" json:"processList,omitempty"`
}

func (x *ProcessEndingList) Reset() {
	*x = ProcessEndingList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vochain_vochain_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessEndingList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessEndingList) ProtoMessage() {}

func (x *ProcessEndingList) ProtoReflect() protoreflect.Message {
	mi := &file_vochain_vochain_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessEndingList.ProtoReflect.Descriptor instead.
func (*ProcessEndingList) Descriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{24}
}

func (x *ProcessEndingList) GetProcessList() [][]byte {
	if x != nil {
		return x.ProcessList
	}
	return nil
}

// KeyKeeper
type StoredKeys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pids [][]byte `protobuf:"bytes,1,rep,name=pids,proto3" json:"pids,omitempty"`
}

func (x *StoredKeys) Reset() {
	*x = StoredKeys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vochain_vochain_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoredKeys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoredKeys) ProtoMessage() {}

func (x *StoredKeys) ProtoReflect() protoreflect.Message {
	mi := &file_vochain_vochain_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoredKeys.ProtoReflect.Descriptor instead.
func (*StoredKeys) Descriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{25}
}

func (x *StoredKeys) GetPids() [][]byte {
	if x != nil {
		return x.Pids
	}
	return nil
}

type VochainStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockHeight      uint32  `protobuf:"varint,1,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	BlockTimeStamp   int32   `protobuf:"varint,2,opt,name=blockTimeStamp,proto3" json:"blockTimeStamp,omitempty"`
	EntityCount      int64   `protobuf:"varint,3,opt,name=entityCount,proto3" json:"entityCount,omitempty"`
	EnvelopeCount    uint64  `protobuf:"varint,4,opt,name=envelopeCount,proto3" json:"envelopeCount,omitempty"`
	ProcessCount     int64   `protobuf:"varint,5,opt,name=processCount,proto3" json:"processCount,omitempty"`
	ValidatorCount   int32   `protobuf:"varint,6,opt,name=validatorCount,proto3" json:"validatorCount,omitempty"`
	BlockTime        []int32 `protobuf:"varint,7,rep,packed,name=blockTime,proto3" json:"blockTime,omitempty"`
	ChainID          string  `protobuf:"bytes,8,opt,name=chainID,proto3" json:"chainID,omitempty"`
	GenesisTimeStamp int64   `protobuf:"varint,9,opt,name=genesisTimeStamp,proto3" json:"genesisTimeStamp,omitempty"`
	Syncing          bool    `protobuf:"varint,10,opt,name=syncing,proto3" json:"syncing,omitempty"`
}

func (x *VochainStats) Reset() {
	*x = VochainStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vochain_vochain_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VochainStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VochainStats) ProtoMessage() {}

func (x *VochainStats) ProtoReflect() protoreflect.Message {
	mi := &file_vochain_vochain_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VochainStats.ProtoReflect.Descriptor instead.
func (*VochainStats) Descriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{26}
}

func (x *VochainStats) GetBlockHeight() uint32 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *VochainStats) GetBlockTimeStamp() int32 {
	if x != nil {
		return x.BlockTimeStamp
	}
	return 0
}

func (x *VochainStats) GetEntityCount() int64 {
	if x != nil {
		return x.EntityCount
	}
	return 0
}

func (x *VochainStats) GetEnvelopeCount() uint64 {
	if x != nil {
		return x.EnvelopeCount
	}
	return 0
}

func (x *VochainStats) GetProcessCount() int64 {
	if x != nil {
		return x.ProcessCount
	}
	return 0
}

func (x *VochainStats) GetValidatorCount() int32 {
	if x != nil {
		return x.ValidatorCount
	}
	return 0
}

func (x *VochainStats) GetBlockTime() []int32 {
	if x != nil {
		return x.BlockTime
	}
	return nil
}

func (x *VochainStats) GetChainID() string {
	if x != nil {
		return x.ChainID
	}
	return ""
}

func (x *VochainStats) GetGenesisTimeStamp() int64 {
	if x != nil {
		return x.GenesisTimeStamp
	}
	return 0
}

func (x *VochainStats) GetSyncing() bool {
	if x != nil {
		return x.Syncing
	}
	return false
}

type BlockHeaderList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockHeaders []*BlockHeader `protobuf:"bytes,1,rep,name=blockHeaders,proto3" json:"blockHeaders,omitempty"`
}

func (x *BlockHeaderList) Reset() {
	*x = BlockHeaderList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vochain_vochain_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockHeaderList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockHeaderList) ProtoMessage() {}

func (x *BlockHeaderList) ProtoReflect() protoreflect.Message {
	mi := &file_vochain_vochain_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockHeaderList.ProtoReflect.Descriptor instead.
func (*BlockHeaderList) Descriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{27}
}

func (x *BlockHeaderList) GetBlockHeaders() []*BlockHeader {
	if x != nil {
		return x.BlockHeaders
	}
	return nil
}

type BlockHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// basic block info
	ChainId   string `protobuf:"bytes,1,opt,name=chainId,proto3" json:"chainId,omitempty"`
	Height    int64  `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	Timestamp int64  `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	BlockHash []byte `protobuf:"bytes,4,opt,name=blockHash,proto3" json:"blockHash,omitempty"`
	NumTxs    uint64 `protobuf:"varint,5,opt,name=numTxs,proto3" json:"numTxs,omitempty"`
	// prev block info
	LastBlockHash []byte `protobuf:"bytes,6,opt,name=lastBlockHash,proto3" json:"lastBlockHash,omitempty"`
	// consensus info
	ProposerAddress []byte `protobuf:"bytes,7,opt,name=proposerAddress,proto3" json:"proposerAddress,omitempty"` // original proposer of the block
}

func (x *BlockHeader) Reset() {
	*x = BlockHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vochain_vochain_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockHeader) ProtoMessage() {}

func (x *BlockHeader) ProtoReflect() protoreflect.Message {
	mi := &file_vochain_vochain_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockHeader.ProtoReflect.Descriptor instead.
func (*BlockHeader) Descriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{28}
}

func (x *BlockHeader) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *BlockHeader) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *BlockHeader) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *BlockHeader) GetBlockHash() []byte {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *BlockHeader) GetNumTxs() uint64 {
	if x != nil {
		return x.NumTxs
	}
	return 0
}

func (x *BlockHeader) GetLastBlockHash() []byte {
	if x != nil {
		return x.LastBlockHash
	}
	return nil
}

func (x *BlockHeader) GetProposerAddress() []byte {
	if x != nil {
		return x.ProposerAddress
	}
	return nil
}

type ValidatorList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Validators []*Validator `protobuf:"bytes,1,rep,name=validators,proto3" json:"validators,omitempty"`
}

func (x *ValidatorList) Reset() {
	*x = ValidatorList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vochain_vochain_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidatorList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatorList) ProtoMessage() {}

func (x *ValidatorList) ProtoReflect() protoreflect.Message {
	mi := &file_vochain_vochain_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidatorList.ProtoReflect.Descriptor instead.
func (*ValidatorList) Descriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{29}
}

func (x *ValidatorList) GetValidators() []*Validator {
	if x != nil {
		return x.Validators
	}
	return nil
}

type EnvelopePackageList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Envelopes []*EnvelopePackage `protobuf:"bytes,1,rep,name=envelopes,proto3" json:"envelopes,omitempty"`
}

func (x *EnvelopePackageList) Reset() {
	*x = EnvelopePackageList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vochain_vochain_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnvelopePackageList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvelopePackageList) ProtoMessage() {}

func (x *EnvelopePackageList) ProtoReflect() protoreflect.Message {
	mi := &file_vochain_vochain_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvelopePackageList.ProtoReflect.Descriptor instead.
func (*EnvelopePackageList) Descriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{30}
}

func (x *EnvelopePackageList) GetEnvelopes() []*EnvelopePackage {
	if x != nil {
		return x.Envelopes
	}
	return nil
}

type TxPackage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tx          *SignedTx `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
	BlockHeight uint32    `protobuf:"varint,2,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	Index       int32     `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	Hash        []byte    `protobuf:"bytes,4,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *TxPackage) Reset() {
	*x = TxPackage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vochain_vochain_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxPackage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxPackage) ProtoMessage() {}

func (x *TxPackage) ProtoReflect() protoreflect.Message {
	mi := &file_vochain_vochain_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxPackage.ProtoReflect.Descriptor instead.
func (*TxPackage) Descriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{31}
}

func (x *TxPackage) GetTx() *SignedTx {
	if x != nil {
		return x.Tx
	}
	return nil
}

func (x *TxPackage) GetBlockHeight() uint32 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *TxPackage) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *TxPackage) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

type TxPackageList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxList []*TxPackage `protobuf:"bytes,1,rep,name=txList,proto3" json:"txList,omitempty"`
}

func (x *TxPackageList) Reset() {
	*x = TxPackageList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vochain_vochain_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxPackageList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxPackageList) ProtoMessage() {}

func (x *TxPackageList) ProtoReflect() protoreflect.Message {
	mi := &file_vochain_vochain_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxPackageList.ProtoReflect.Descriptor instead.
func (*TxPackageList) Descriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{32}
}

func (x *TxPackageList) GetTxList() []*TxPackage {
	if x != nil {
		return x.TxList
	}
	return nil
}

var File_vochain_vochain_proto protoreflect.FileDescriptor

var file_vochain_vochain_proto_rawDesc = []byte{
	0x0a, 0x15, 0x76, 0x6f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x76, 0x6f, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x22, 0xad, 0x01, 0x0a, 0x0f, 0x45, 0x6e, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x65,
	0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56,
	0x6f, 0x74, 0x65, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x52, 0x08, 0x65, 0x6e, 0x76,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x74, 0x78, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x74, 0x78, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x22, 0xe3, 0x01, 0x0a, 0x0c, 0x56, 0x6f, 0x74, 0x65,
	0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x05,
	0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x76,
	0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f,
	0x6f, 0x66, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x6f, 0x74,
	0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b,
	0x76, 0x6f, 0x74, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e,
	0x75, 0x6c, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x6e, 0x75, 0x6c, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x14, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x14, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x22, 0xd2, 0x02,
	0x0a, 0x05, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x3b, 0x0a, 0x08, 0x67, 0x72, 0x61, 0x76, 0x69,
	0x74, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x76, 0x6f, 0x74,
	0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66,
	0x47, 0x72, 0x61, 0x76, 0x69, 0x74, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x67, 0x72, 0x61, 0x76,
	0x69, 0x74, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x05, 0x69, 0x64, 0x65, 0x6e, 0x33, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x49, 0x64, 0x65, 0x6e, 0x33, 0x48,
	0x00, 0x52, 0x05, 0x69, 0x64, 0x65, 0x6e, 0x33, 0x12, 0x50, 0x0a, 0x0f, 0x65, 0x74, 0x68, 0x65,
	0x72, 0x65, 0x75, 0x6d, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x65, 0x74, 0x68, 0x65, 0x72,
	0x65, 0x75, 0x6d, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x50, 0x0a, 0x0f, 0x65, 0x74,
	0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65,
	0x75, 0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x65, 0x74, 0x68,
	0x65, 0x72, 0x65, 0x75, 0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x02,
	0x63, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x76, 0x6f, 0x74, 0x65,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x43,
	0x41, 0x48, 0x00, 0x52, 0x02, 0x63, 0x61, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x22, 0x2b, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x47, 0x72, 0x61, 0x76, 0x69,
	0x74, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x69, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x69, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x73, 0x22,
	0x28, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x49, 0x64, 0x65, 0x6e, 0x33, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x69, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x08, 0x73, 0x69, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x8c, 0x01, 0x0a, 0x07, 0x50, 0x72,
	0x6f, 0x6f, 0x66, 0x43, 0x41, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x62, 0x75, 0x6e, 0x64,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x76, 0x6f, 0x74, 0x65,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x41, 0x62, 0x75, 0x6e, 0x64,
	0x6c, 0x65, 0x52, 0x06, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x42, 0x0a, 0x08, 0x43, 0x41, 0x62, 0x75,
	0x6e, 0x64, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x5a, 0x0a, 0x14,
	0x50, 0x72, 0x6f, 0x6f, 0x66, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x69, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08,
	0x73, 0x69, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xa0, 0x01, 0x0a, 0x14, 0x50, 0x72, 0x6f,
	0x6f, 0x66, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x48, 0x61, 0x73, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x64, 0x65, 0x48, 0x61, 0x73, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x63, 0x6f, 0x64, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x69, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x08, 0x73, 0x69, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xf4, 0x01, 0x0a, 0x02,
	0x54, 0x78, 0x12, 0x32, 0x0a, 0x04, 0x76, 0x6f, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x48, 0x00,
	0x52, 0x04, 0x76, 0x6f, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x0a, 0x6e, 0x65, 0x77, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x76, 0x6f,
	0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x77, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x78, 0x48, 0x00, 0x52, 0x0a, 0x6e, 0x65, 0x77, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x2f, 0x0a, 0x05, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x54, 0x78, 0x48, 0x00,
	0x52, 0x05, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x3e, 0x0a, 0x0a, 0x73, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x76,
	0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x78, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x22, 0x4b, 0x0a, 0x08, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x78, 0x12, 0x0e,
	0x0a, 0x02, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x74, 0x78, 0x12, 0x21,
	0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x48, 0x00, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22,
	0x87, 0x01, 0x0a, 0x0c, 0x4e, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x78,
	0x12, 0x2e, 0x0a, 0x06, 0x74, 0x78, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x78, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x74, 0x78, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x52, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x22, 0xe1, 0x03, 0x0a, 0x0c, 0x53, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x78, 0x12, 0x2e, 0x0a, 0x06, 0x74, 0x78,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x64, 0x76, 0x6f,
	0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x78, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x06, 0x74, 0x78, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f,
	0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x3a,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d,
	0x2e, 0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x01, 0x52, 0x0d, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x63, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x52,
	0x6f, 0x6f, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x02, 0x52, 0x0a, 0x63, 0x65, 0x6e,
	0x73, 0x75, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x63, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x55, 0x52, 0x49, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52,
	0x09, 0x63, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x55, 0x52, 0x49, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a,
	0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64,
	0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x6f, 0x6f, 0x66, 0x48, 0x04, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x88, 0x01, 0x01, 0x12,
	0x3c, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48,
	0x05, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x55, 0x52, 0x49, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x72, 0x6f, 0x6f,
	0x66, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0xab, 0x04,
	0x0a, 0x07, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x54, 0x78, 0x12, 0x2e, 0x0a, 0x06, 0x74, 0x78, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x64, 0x76, 0x6f, 0x74,
	0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x78, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x06, 0x74, 0x78, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52,
	0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x37, 0x0a, 0x14, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x02, 0x52, 0x14, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x13, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x03, 0x52, 0x13, 0x65, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x04, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x04, 0x48, 0x05, 0x52, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a,
	0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c,
	0x48, 0x06, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01,
	0x12, 0x21, 0x0a, 0x09, 0x72, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x4b, 0x65, 0x79, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x07, 0x52, 0x09, 0x72, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x4b, 0x65, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79,
	0x42, 0x16, 0x0a, 0x14, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6b, 0x65, 0x79,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x4b, 0x65, 0x79, 0x22, 0xd0, 0x09, 0x0a, 0x07,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x63, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x52, 0x6f, 0x6f,
	0x74, 0x12, 0x21, 0x0a, 0x09, 0x63, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x55, 0x52, 0x49, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x63, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x55, 0x52,
	0x49, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x34, 0x0a, 0x15,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65,
	0x79, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x14, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x76, 0x65, 0x61, 0x6c,
	0x4b, 0x65, 0x79, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x76, 0x65,
	0x61, 0x6c, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x1f, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2d,
	0x0a, 0x0f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x02, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x0c, 0x65,
	0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0c, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a,
	0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x76,
	0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x29,
	0x0a, 0x0d, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x03, 0x52, 0x0d, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x04, 0x52, 0x0d, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x0b, 0x76, 0x6f, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x76, 0x6f, 0x74,
	0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x56, 0x6f, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x76,
	0x6f, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x40, 0x0a, 0x0c, 0x63, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1c, 0x2e, 0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x52, 0x0c,
	0x63, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x37, 0x0a, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0c,
	0x52, 0x11, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0c, 0x65, 0x74, 0x68, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53,
	0x6c, 0x6f, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x05, 0x52, 0x0c, 0x65, 0x74, 0x68,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x6c, 0x6f, 0x74, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x11,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x04, 0x48, 0x06, 0x52, 0x11, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x07,
	0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x55, 0x52, 0x49, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6b, 0x65, 0x79,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x65, 0x74, 0x68, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x6c, 0x6f, 0x74, 0x42, 0x14,
	0x0a, 0x12, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0xb8,
	0x01, 0x0a, 0x0c, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6e, 0x6f, 0x6e, 0x79,
	0x6d, 0x6f, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x6e, 0x6f, 0x6e,
	0x79, 0x6d, 0x6f, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x65, 0x64, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x22, 0x0a,
	0x0c, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x73, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x57, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x63, 0x6f, 0x73, 0x74, 0x46,
	0x72, 0x6f, 0x6d, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xa5, 0x01, 0x0a, 0x0b, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x75, 0x74,
	0x6f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x75,
	0x74, 0x6f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x72, 0x75, 0x70, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x65, 0x6e,
	0x73, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74,
	0x61, 0x22, 0xc2, 0x01, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x56, 0x6f, 0x74,
	0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x56, 0x6f, 0x74, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6d, 0x61, 0x78,
	0x56, 0x6f, 0x74, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x73, 0x12, 0x22,
	0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f,
	0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x73, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x73, 0x74, 0x45, 0x78,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x22, 0x26, 0x0a, 0x0a, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x07, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x73, 0x22, 0x67,
	0x0a, 0x09, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xc8, 0x01, 0x0a, 0x04, 0x56, 0x6f, 0x74, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x75, 0x6c, 0x6c,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x6e, 0x75, 0x6c,
	0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x6f, 0x74, 0x65, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x76, 0x6f, 0x74, 0x65, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x14, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x4b, 0x65, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x22, 0xdd, 0x03, 0x0a, 0x10, 0x54, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x49, 0x44, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x6c, 0x61,
	0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1b, 0x0a, 0x09,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x08, 0x64, 0x61, 0x74, 0x61, 0x48, 0x61, 0x73, 0x68, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x30, 0x0a, 0x14, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x12, 0x6e, 0x65, 0x78, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75,
	0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x63, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x61,
	0x70, 0x70, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61,
	0x70, 0x70, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x65, 0x76, 0x69, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x22, 0xa4, 0x01, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x05, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x09, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a,
	0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x01, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0x2c, 0x0a, 0x0e, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x35, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x45, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x20,
	0x0a, 0x0a, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x04, 0x70, 0x69, 0x64, 0x73,
	0x22, 0xea, 0x02, 0x0a, 0x0c, 0x56, 0x6f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a,
	0x0d, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x67, 0x65, 0x6e, 0x65, 0x73,
	0x69, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x10, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x79, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x79, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x22, 0x52, 0x0a,
	0x0f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x3f, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x22, 0xe3, 0x01, 0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x54, 0x78, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x6e, 0x75, 0x6d, 0x54, 0x78, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d,
	0x6c, 0x61, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x28, 0x0a,
	0x0f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x4a, 0x0a, 0x0d, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64,
	0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x73, 0x22, 0x54, 0x0a, 0x13, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x09, 0x65, 0x6e,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x09,
	0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x73, 0x22, 0x81, 0x01, 0x0a, 0x09, 0x54, 0x78,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x02, 0x74, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x78, 0x52, 0x02, 0x74,
	0x78, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x42, 0x0a,
	0x0d, 0x54, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x31,
	0x0a, 0x06, 0x74, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x06, 0x74, 0x78, 0x4c, 0x69, 0x73,
	0x74, 0x2a, 0x68, 0x0a, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x09, 0x0a, 0x05, 0x45, 0x43, 0x44, 0x53, 0x41, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x43,
	0x44, 0x53, 0x41, 0x5f, 0x50, 0x49, 0x44, 0x53, 0x41, 0x4c, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x0f, 0x0a, 0x0b, 0x45, 0x43, 0x44, 0x53, 0x41, 0x5f, 0x42, 0x4c, 0x49, 0x4e, 0x44, 0x10, 0x03,
	0x12, 0x19, 0x0a, 0x15, 0x45, 0x43, 0x44, 0x53, 0x41, 0x5f, 0x42, 0x4c, 0x49, 0x4e, 0x44, 0x5f,
	0x50, 0x49, 0x44, 0x53, 0x41, 0x4c, 0x54, 0x45, 0x44, 0x10, 0x04, 0x2a, 0x97, 0x02, 0x0a, 0x06,
	0x54, 0x78, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x58, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x45, 0x57, 0x5f, 0x50, 0x52,
	0x4f, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x45, 0x54, 0x5f, 0x50,
	0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x02, 0x12,
	0x16, 0x0a, 0x12, 0x53, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x43,
	0x45, 0x4e, 0x53, 0x55, 0x53, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x45, 0x54, 0x5f, 0x50,
	0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x4e, 0x44, 0x45, 0x58, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x44, 0x44, 0x5f, 0x50,
	0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x4b, 0x45, 0x59, 0x53, 0x10, 0x05, 0x12, 0x17, 0x0a,
	0x13, 0x52, 0x45, 0x56, 0x45, 0x41, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f,
	0x4b, 0x45, 0x59, 0x53, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x44, 0x44, 0x5f, 0x4f, 0x52,
	0x41, 0x43, 0x4c, 0x45, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45,
	0x5f, 0x4f, 0x52, 0x41, 0x43, 0x4c, 0x45, 0x10, 0x08, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x44, 0x44,
	0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x09, 0x12, 0x14, 0x0a, 0x10,
	0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x4f, 0x52,
	0x10, 0x0a, 0x12, 0x08, 0x0a, 0x04, 0x56, 0x4f, 0x54, 0x45, 0x10, 0x0b, 0x12, 0x17, 0x0a, 0x13,
	0x53, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x55,
	0x4c, 0x54, 0x53, 0x10, 0x0c, 0x2a, 0x61, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53,
	0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x52,
	0x45, 0x41, 0x44, 0x59, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10,
	0x02, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12,
	0x0a, 0x0a, 0x06, 0x50, 0x41, 0x55, 0x53, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x52,
	0x45, 0x53, 0x55, 0x4c, 0x54, 0x53, 0x10, 0x05, 0x2a, 0xa2, 0x01, 0x0a, 0x0c, 0x43, 0x65, 0x6e,
	0x73, 0x75, 0x73, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x45, 0x4e,
	0x53, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x12, 0x0a,
	0x0e, 0x4f, 0x46, 0x46, 0x5f, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x54, 0x52, 0x45, 0x45, 0x10,
	0x01, 0x12, 0x1b, 0x0a, 0x17, 0x4f, 0x46, 0x46, 0x5f, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x54,
	0x52, 0x45, 0x45, 0x5f, 0x57, 0x45, 0x49, 0x47, 0x48, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x10,
	0x0a, 0x0c, 0x4f, 0x46, 0x46, 0x5f, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x43, 0x41, 0x10, 0x03,
	0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x43, 0x32, 0x30, 0x10, 0x0b, 0x12, 0x0a, 0x0a, 0x06, 0x45,
	0x52, 0x43, 0x37, 0x32, 0x31, 0x10, 0x0c, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x52, 0x43, 0x31, 0x31,
	0x35, 0x35, 0x10, 0x0d, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x52, 0x43, 0x37, 0x37, 0x37, 0x10, 0x0e,
	0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x49, 0x4e, 0x49, 0x5f, 0x4d, 0x45, 0x10, 0x0f, 0x42, 0x25, 0x5a,
	0x23, 0x67, 0x6f, 0x2e, 0x76, 0x6f, 0x63, 0x64, 0x6f, 0x6e, 0x69, 0x2e, 0x69, 0x6f, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2f, 0x67, 0x6f, 0x2f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_vochain_vochain_proto_rawDescOnce sync.Once
	file_vochain_vochain_proto_rawDescData = file_vochain_vochain_proto_rawDesc
)

func file_vochain_vochain_proto_rawDescGZIP() []byte {
	file_vochain_vochain_proto_rawDescOnce.Do(func() {
		file_vochain_vochain_proto_rawDescData = protoimpl.X.CompressGZIP(file_vochain_vochain_proto_rawDescData)
	})
	return file_vochain_vochain_proto_rawDescData
}

var file_vochain_vochain_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_vochain_vochain_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_vochain_vochain_proto_goTypes = []interface{}{
	(SignatureType)(0),           // 0: dvote.types.v1.SignatureType
	(TxType)(0),                  // 1: dvote.types.v1.TxType
	(ProcessStatus)(0),           // 2: dvote.types.v1.ProcessStatus
	(CensusOrigin)(0),            // 3: dvote.types.v1.CensusOrigin
	(*EnvelopePackage)(nil),      // 4: dvote.types.v1.EnvelopePackage
	(*VoteEnvelope)(nil),         // 5: dvote.types.v1.VoteEnvelope
	(*Proof)(nil),                // 6: dvote.types.v1.Proof
	(*ProofGraviton)(nil),        // 7: dvote.types.v1.ProofGraviton
	(*ProofIden3)(nil),           // 8: dvote.types.v1.ProofIden3
	(*ProofCA)(nil),              // 9: dvote.types.v1.ProofCA
	(*CAbundle)(nil),             // 10: dvote.types.v1.CAbundle
	(*ProofEthereumStorage)(nil), // 11: dvote.types.v1.ProofEthereumStorage
	(*ProofEthereumAccount)(nil), // 12: dvote.types.v1.ProofEthereumAccount
	(*Tx)(nil),                   // 13: dvote.types.v1.Tx
	(*SignedTx)(nil),             // 14: dvote.types.v1.SignedTx
	(*NewProcessTx)(nil),         // 15: dvote.types.v1.NewProcessTx
	(*SetProcessTx)(nil),         // 16: dvote.types.v1.SetProcessTx
	(*AdminTx)(nil),              // 17: dvote.types.v1.AdminTx
	(*Process)(nil),              // 18: dvote.types.v1.Process
	(*EnvelopeType)(nil),         // 19: dvote.types.v1.EnvelopeType
	(*ProcessMode)(nil),          // 20: dvote.types.v1.ProcessMode
	(*ProcessVoteOptions)(nil),   // 21: dvote.types.v1.ProcessVoteOptions
	(*OracleList)(nil),           // 22: dvote.types.v1.OracleList
	(*Validator)(nil),            // 23: dvote.types.v1.Validator
	(*Vote)(nil),                 // 24: dvote.types.v1.Vote
	(*TendermintHeader)(nil),     // 25: dvote.types.v1.TendermintHeader
	(*ProcessResult)(nil),        // 26: dvote.types.v1.ProcessResult
	(*QuestionResult)(nil),       // 27: dvote.types.v1.QuestionResult
	(*ProcessEndingList)(nil),    // 28: dvote.types.v1.ProcessEndingList
	(*StoredKeys)(nil),           // 29: dvote.types.v1.StoredKeys
	(*VochainStats)(nil),         // 30: dvote.types.v1.VochainStats
	(*BlockHeaderList)(nil),      // 31: dvote.types.v1.BlockHeaderList
	(*BlockHeader)(nil),          // 32: dvote.types.v1.BlockHeader
	(*ValidatorList)(nil),        // 33: dvote.types.v1.ValidatorList
	(*EnvelopePackageList)(nil),  // 34: dvote.types.v1.EnvelopePackageList
	(*TxPackage)(nil),            // 35: dvote.types.v1.TxPackage
	(*TxPackageList)(nil),        // 36: dvote.types.v1.TxPackageList
}
var file_vochain_vochain_proto_depIdxs = []int32{
	5,  // 0: dvote.types.v1.EnvelopePackage.envelope:type_name -> dvote.types.v1.VoteEnvelope
	6,  // 1: dvote.types.v1.VoteEnvelope.proof:type_name -> dvote.types.v1.Proof
	7,  // 2: dvote.types.v1.Proof.graviton:type_name -> dvote.types.v1.ProofGraviton
	8,  // 3: dvote.types.v1.Proof.iden3:type_name -> dvote.types.v1.ProofIden3
	11, // 4: dvote.types.v1.Proof.ethereumStorage:type_name -> dvote.types.v1.ProofEthereumStorage
	12, // 5: dvote.types.v1.Proof.ethereumAccount:type_name -> dvote.types.v1.ProofEthereumAccount
	9,  // 6: dvote.types.v1.Proof.ca:type_name -> dvote.types.v1.ProofCA
	0,  // 7: dvote.types.v1.ProofCA.type:type_name -> dvote.types.v1.SignatureType
	10, // 8: dvote.types.v1.ProofCA.bundle:type_name -> dvote.types.v1.CAbundle
	5,  // 9: dvote.types.v1.Tx.vote:type_name -> dvote.types.v1.VoteEnvelope
	15, // 10: dvote.types.v1.Tx.newProcess:type_name -> dvote.types.v1.NewProcessTx
	17, // 11: dvote.types.v1.Tx.admin:type_name -> dvote.types.v1.AdminTx
	16, // 12: dvote.types.v1.Tx.setProcess:type_name -> dvote.types.v1.SetProcessTx
	1,  // 13: dvote.types.v1.NewProcessTx.txtype:type_name -> dvote.types.v1.TxType
	18, // 14: dvote.types.v1.NewProcessTx.process:type_name -> dvote.types.v1.Process
	1,  // 15: dvote.types.v1.SetProcessTx.txtype:type_name -> dvote.types.v1.TxType
	2,  // 16: dvote.types.v1.SetProcessTx.status:type_name -> dvote.types.v1.ProcessStatus
	6,  // 17: dvote.types.v1.SetProcessTx.proof:type_name -> dvote.types.v1.Proof
	26, // 18: dvote.types.v1.SetProcessTx.results:type_name -> dvote.types.v1.ProcessResult
	1,  // 19: dvote.types.v1.AdminTx.txtype:type_name -> dvote.types.v1.TxType
	2,  // 20: dvote.types.v1.Process.status:type_name -> dvote.types.v1.ProcessStatus
	19, // 21: dvote.types.v1.Process.envelopeType:type_name -> dvote.types.v1.EnvelopeType
	20, // 22: dvote.types.v1.Process.mode:type_name -> dvote.types.v1.ProcessMode
	21, // 23: dvote.types.v1.Process.voteOptions:type_name -> dvote.types.v1.ProcessVoteOptions
	3,  // 24: dvote.types.v1.Process.censusOrigin:type_name -> dvote.types.v1.CensusOrigin
	26, // 25: dvote.types.v1.Process.results:type_name -> dvote.types.v1.ProcessResult
	27, // 26: dvote.types.v1.ProcessResult.votes:type_name -> dvote.types.v1.QuestionResult
	32, // 27: dvote.types.v1.BlockHeaderList.blockHeaders:type_name -> dvote.types.v1.BlockHeader
	23, // 28: dvote.types.v1.ValidatorList.validators:type_name -> dvote.types.v1.Validator
	4,  // 29: dvote.types.v1.EnvelopePackageList.envelopes:type_name -> dvote.types.v1.EnvelopePackage
	14, // 30: dvote.types.v1.TxPackage.tx:type_name -> dvote.types.v1.SignedTx
	35, // 31: dvote.types.v1.TxPackageList.txList:type_name -> dvote.types.v1.TxPackage
	32, // [32:32] is the sub-list for method output_type
	32, // [32:32] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { file_vochain_vochain_proto_init() }
func file_vochain_vochain_proto_init() {
	if File_vochain_vochain_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_vochain_vochain_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnvelopePackage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vochain_vochain_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoteEnvelope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vochain_vochain_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Proof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vochain_vochain_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProofGraviton); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vochain_vochain_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProofIden3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vochain_vochain_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProofCA); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vochain_vochain_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CAbundle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vochain_vochain_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProofEthereumStorage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vochain_vochain_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProofEthereumAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vochain_vochain_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vochain_vochain_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignedTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vochain_vochain_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewProcessTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vochain_vochain_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetProcessTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vochain_vochain_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vochain_vochain_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Process); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vochain_vochain_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnvelopeType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vochain_vochain_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vochain_vochain_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessVoteOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vochain_vochain_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OracleList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vochain_vochain_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Validator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vochain_vochain_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vochain_vochain_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TendermintHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vochain_vochain_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vochain_vochain_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vochain_vochain_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessEndingList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vochain_vochain_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoredKeys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vochain_vochain_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VochainStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vochain_vochain_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockHeaderList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vochain_vochain_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vochain_vochain_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidatorList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vochain_vochain_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnvelopePackageList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vochain_vochain_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxPackage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vochain_vochain_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxPackageList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_vochain_vochain_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Proof_Graviton)(nil),
		(*Proof_Iden3)(nil),
		(*Proof_EthereumStorage)(nil),
		(*Proof_EthereumAccount)(nil),
		(*Proof_Ca)(nil),
	}
	file_vochain_vochain_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*Tx_Vote)(nil),
		(*Tx_NewProcess)(nil),
		(*Tx_Admin)(nil),
		(*Tx_SetProcess)(nil),
	}
	file_vochain_vochain_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_vochain_vochain_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_vochain_vochain_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_vochain_vochain_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_vochain_vochain_proto_msgTypes[22].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_vochain_vochain_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_vochain_vochain_proto_goTypes,
		DependencyIndexes: file_vochain_vochain_proto_depIdxs,
		EnumInfos:         file_vochain_vochain_proto_enumTypes,
		MessageInfos:      file_vochain_vochain_proto_msgTypes,
	}.Build()
	File_vochain_vochain_proto = out.File
	file_vochain_vochain_proto_rawDesc = nil
	file_vochain_vochain_proto_goTypes = nil
	file_vochain_vochain_proto_depIdxs = nil
}
