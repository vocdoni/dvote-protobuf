// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.4
// source: vochain/vochain.proto

package vocdonitypes

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TxType int32

const (
	TxType_UNKNOWN                    TxType = 0
	TxType_NEW_PROCESS                TxType = 1
	TxType_CANCEL_PROCESS             TxType = 2
	TxType_SET_PROCESS_STATUS         TxType = 3
	TxType_SET_PROCESS_CENSUS         TxType = 4
	TxType_SET_PROCESS_QUESTION_INDEX TxType = 5
	TxType_ADD_PROCESS_KEYS           TxType = 6
	TxType_REVEAL_PROCESS_KEYS        TxType = 7
	TxType_ADD_ORACLE                 TxType = 8
	TxType_REMOVE_ORACLE              TxType = 9
	TxType_ADD_VALIDATOR              TxType = 10
	TxType_REMOVE_VALIDATOR           TxType = 11
)

// Enum value maps for TxType.
var (
	TxType_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "NEW_PROCESS",
		2:  "CANCEL_PROCESS",
		3:  "SET_PROCESS_STATUS",
		4:  "SET_PROCESS_CENSUS",
		5:  "SET_PROCESS_QUESTION_INDEX",
		6:  "ADD_PROCESS_KEYS",
		7:  "REVEAL_PROCESS_KEYS",
		8:  "ADD_ORACLE",
		9:  "REMOVE_ORACLE",
		10: "ADD_VALIDATOR",
		11: "REMOVE_VALIDATOR",
	}
	TxType_value = map[string]int32{
		"UNKNOWN":                    0,
		"NEW_PROCESS":                1,
		"CANCEL_PROCESS":             2,
		"SET_PROCESS_STATUS":         3,
		"SET_PROCESS_CENSUS":         4,
		"SET_PROCESS_QUESTION_INDEX": 5,
		"ADD_PROCESS_KEYS":           6,
		"REVEAL_PROCESS_KEYS":        7,
		"ADD_ORACLE":                 8,
		"REMOVE_ORACLE":              9,
		"ADD_VALIDATOR":              10,
		"REMOVE_VALIDATOR":           11,
	}
)

func (x TxType) Enum() *TxType {
	p := new(TxType)
	*p = x
	return p
}

func (x TxType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TxType) Descriptor() protoreflect.EnumDescriptor {
	return file_vochain_vochain_proto_enumTypes[0].Descriptor()
}

func (TxType) Type() protoreflect.EnumType {
	return &file_vochain_vochain_proto_enumTypes[0]
}

func (x TxType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TxType.Descriptor instead.
func (TxType) EnumDescriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{0}
}

type Tx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Tx:
	//	*Tx_Vote
	//	*Tx_NewProcess
	//	*Tx_CancelProcess
	//	*Tx_Admin
	//	*Tx_SetProcess
	Tx        isTx_Tx `protobuf_oneof:"tx"`
	Signature []byte  `protobuf:"bytes,1,opt,name=signature,proto3,oneof" json:"signature,omitempty"`
}

func (x *Tx) Reset() {
	*x = Tx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vochain_vochain_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tx) ProtoMessage() {}

func (x *Tx) ProtoReflect() protoreflect.Message {
	mi := &file_vochain_vochain_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tx.ProtoReflect.Descriptor instead.
func (*Tx) Descriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{0}
}

func (m *Tx) GetTx() isTx_Tx {
	if m != nil {
		return m.Tx
	}
	return nil
}

func (x *Tx) GetVote() *VoteEnvelope {
	if x, ok := x.GetTx().(*Tx_Vote); ok {
		return x.Vote
	}
	return nil
}

func (x *Tx) GetNewProcess() *NewProcessTx {
	if x, ok := x.GetTx().(*Tx_NewProcess); ok {
		return x.NewProcess
	}
	return nil
}

func (x *Tx) GetCancelProcess() *CancelProcessTx {
	if x, ok := x.GetTx().(*Tx_CancelProcess); ok {
		return x.CancelProcess
	}
	return nil
}

func (x *Tx) GetAdmin() *AdminTx {
	if x, ok := x.GetTx().(*Tx_Admin); ok {
		return x.Admin
	}
	return nil
}

func (x *Tx) GetSetProcess() *SetProcessTx {
	if x, ok := x.GetTx().(*Tx_SetProcess); ok {
		return x.SetProcess
	}
	return nil
}

func (x *Tx) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type isTx_Tx interface {
	isTx_Tx()
}

type Tx_Vote struct {
	Vote *VoteEnvelope `protobuf:"bytes,2,opt,name=vote,proto3,oneof"`
}

type Tx_NewProcess struct {
	NewProcess *NewProcessTx `protobuf:"bytes,3,opt,name=newProcess,proto3,oneof"`
}

type Tx_CancelProcess struct {
	CancelProcess *CancelProcessTx `protobuf:"bytes,4,opt,name=cancelProcess,proto3,oneof"`
}

type Tx_Admin struct {
	Admin *AdminTx `protobuf:"bytes,5,opt,name=admin,proto3,oneof"`
}

type Tx_SetProcess struct {
	SetProcess *SetProcessTx `protobuf:"bytes,6,opt,name=setProcess,proto3,oneof"`
}

func (*Tx_Vote) isTx_Tx() {}

func (*Tx_NewProcess) isTx_Tx() {}

func (*Tx_CancelProcess) isTx_Tx() {}

func (*Tx_Admin) isTx_Tx() {}

func (*Tx_SetProcess) isTx_Tx() {}

type NewProcessTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txtype  TxType   `protobuf:"varint,1,opt,name=txtype,proto3,enum=dvote.types.v1.TxType" json:"txtype,omitempty"`
	Nonce   string   `protobuf:"bytes,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Process *Process `protobuf:"bytes,3,opt,name=process,proto3" json:"process,omitempty"`
}

func (x *NewProcessTx) Reset() {
	*x = NewProcessTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vochain_vochain_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewProcessTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewProcessTx) ProtoMessage() {}

func (x *NewProcessTx) ProtoReflect() protoreflect.Message {
	mi := &file_vochain_vochain_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewProcessTx.ProtoReflect.Descriptor instead.
func (*NewProcessTx) Descriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{1}
}

func (x *NewProcessTx) GetTxtype() TxType {
	if x != nil {
		return x.Txtype
	}
	return TxType_UNKNOWN
}

func (x *NewProcessTx) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *NewProcessTx) GetProcess() *Process {
	if x != nil {
		return x.Process
	}
	return nil
}

type SetProcessTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txtype        TxType  `protobuf:"varint,1,opt,name=txtype,proto3,enum=dvote.types.v1.TxType" json:"txtype,omitempty"`
	Nonce         string  `protobuf:"bytes,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	ProcessID     []byte  `protobuf:"bytes,3,opt,name=processID,proto3" json:"processID,omitempty"`
	Status        *uint32 `protobuf:"varint,4,opt,name=status,proto3,oneof" json:"status,omitempty"`
	QuestionIndex *uint32 `protobuf:"varint,5,opt,name=questionIndex,proto3,oneof" json:"questionIndex,omitempty"`
	CensusMkRoot  []byte  `protobuf:"bytes,6,opt,name=censusMkRoot,proto3,oneof" json:"censusMkRoot,omitempty"`
	CensusMkURI   *string `protobuf:"bytes,7,opt,name=censusMkURI,proto3,oneof" json:"censusMkURI,omitempty"`
}

func (x *SetProcessTx) Reset() {
	*x = SetProcessTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vochain_vochain_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetProcessTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetProcessTx) ProtoMessage() {}

func (x *SetProcessTx) ProtoReflect() protoreflect.Message {
	mi := &file_vochain_vochain_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetProcessTx.ProtoReflect.Descriptor instead.
func (*SetProcessTx) Descriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{2}
}

func (x *SetProcessTx) GetTxtype() TxType {
	if x != nil {
		return x.Txtype
	}
	return TxType_UNKNOWN
}

func (x *SetProcessTx) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *SetProcessTx) GetProcessID() []byte {
	if x != nil {
		return x.ProcessID
	}
	return nil
}

func (x *SetProcessTx) GetStatus() uint32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *SetProcessTx) GetQuestionIndex() uint32 {
	if x != nil && x.QuestionIndex != nil {
		return *x.QuestionIndex
	}
	return 0
}

func (x *SetProcessTx) GetCensusMkRoot() []byte {
	if x != nil {
		return x.CensusMkRoot
	}
	return nil
}

func (x *SetProcessTx) GetCensusMkURI() string {
	if x != nil && x.CensusMkURI != nil {
		return *x.CensusMkURI
	}
	return ""
}

type CancelProcessTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txtype    TxType `protobuf:"varint,1,opt,name=txtype,proto3,enum=dvote.types.v1.TxType" json:"txtype,omitempty"`
	ProcessId []byte `protobuf:"bytes,2,opt,name=processId,proto3" json:"processId,omitempty"`
	Nonce     string `protobuf:"bytes,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *CancelProcessTx) Reset() {
	*x = CancelProcessTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vochain_vochain_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelProcessTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelProcessTx) ProtoMessage() {}

func (x *CancelProcessTx) ProtoReflect() protoreflect.Message {
	mi := &file_vochain_vochain_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelProcessTx.ProtoReflect.Descriptor instead.
func (*CancelProcessTx) Descriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{3}
}

func (x *CancelProcessTx) GetTxtype() TxType {
	if x != nil {
		return x.Txtype
	}
	return TxType_UNKNOWN
}

func (x *CancelProcessTx) GetProcessId() []byte {
	if x != nil {
		return x.ProcessId
	}
	return nil
}

func (x *CancelProcessTx) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

type AdminTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txtype               TxType  `protobuf:"varint,1,opt,name=txtype,proto3,enum=dvote.types.v1.TxType" json:"txtype,omitempty"`
	ProcessId            []byte  `protobuf:"bytes,2,opt,name=processId,proto3" json:"processId,omitempty"`
	Address              []byte  `protobuf:"bytes,3,opt,name=address,proto3,oneof" json:"address,omitempty"`
	CommitmentKey        []byte  `protobuf:"bytes,4,opt,name=commitmentKey,proto3,oneof" json:"commitmentKey,omitempty"`
	EncryptionPrivateKey []byte  `protobuf:"bytes,5,opt,name=encryptionPrivateKey,proto3,oneof" json:"encryptionPrivateKey,omitempty"`
	EncryptionPublicKey  []byte  `protobuf:"bytes,6,opt,name=encryptionPublicKey,proto3,oneof" json:"encryptionPublicKey,omitempty"`
	KeyIndex             *uint32 `protobuf:"varint,7,opt,name=keyIndex,proto3,oneof" json:"keyIndex,omitempty"`
	Power                *uint64 `protobuf:"varint,8,opt,name=power,proto3,oneof" json:"power,omitempty"`
	PublicKey            []byte  `protobuf:"bytes,9,opt,name=publicKey,proto3,oneof" json:"publicKey,omitempty"`
	RevealKey            []byte  `protobuf:"bytes,10,opt,name=revealKey,proto3,oneof" json:"revealKey,omitempty"`
	Nonce                string  `protobuf:"bytes,11,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *AdminTx) Reset() {
	*x = AdminTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vochain_vochain_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminTx) ProtoMessage() {}

func (x *AdminTx) ProtoReflect() protoreflect.Message {
	mi := &file_vochain_vochain_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminTx.ProtoReflect.Descriptor instead.
func (*AdminTx) Descriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{4}
}

func (x *AdminTx) GetTxtype() TxType {
	if x != nil {
		return x.Txtype
	}
	return TxType_UNKNOWN
}

func (x *AdminTx) GetProcessId() []byte {
	if x != nil {
		return x.ProcessId
	}
	return nil
}

func (x *AdminTx) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *AdminTx) GetCommitmentKey() []byte {
	if x != nil {
		return x.CommitmentKey
	}
	return nil
}

func (x *AdminTx) GetEncryptionPrivateKey() []byte {
	if x != nil {
		return x.EncryptionPrivateKey
	}
	return nil
}

func (x *AdminTx) GetEncryptionPublicKey() []byte {
	if x != nil {
		return x.EncryptionPublicKey
	}
	return nil
}

func (x *AdminTx) GetKeyIndex() uint32 {
	if x != nil && x.KeyIndex != nil {
		return *x.KeyIndex
	}
	return 0
}

func (x *AdminTx) GetPower() uint64 {
	if x != nil && x.Power != nil {
		return *x.Power
	}
	return 0
}

func (x *AdminTx) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *AdminTx) GetRevealKey() []byte {
	if x != nil {
		return x.RevealKey
	}
	return nil
}

func (x *AdminTx) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

type Process struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcessId []byte `protobuf:"bytes,1,opt,name=processId,proto3" json:"processId,omitempty"`
	// EntityID identifies unequivocally a process
	EntityId []byte `protobuf:"bytes,2,opt,name=entityId,proto3" json:"entityId,omitempty"`
	// StartBlock represents the tendermint block where the process goes from scheduled to active
	StartBlock uint64 `protobuf:"varint,3,opt,name=startBlock,proto3" json:"startBlock,omitempty"`
	// BlockCount represents the amount of tendermint blocks that the process will last
	BlockCount uint64 `protobuf:"varint,4,opt,name=blockCount,proto3" json:"blockCount,omitempty"`
	// CensusMkRoot merkle root of all the census in the process
	CensusMkRoot []byte `protobuf:"bytes,5,opt,name=censusMkRoot,proto3" json:"censusMkRoot,omitempty"`
	// CensusMkURI merkle tree URI of all the census in the process
	CensusMkURI *string `protobuf:"bytes,6,opt,name=censusMkURI,proto3,oneof" json:"censusMkURI,omitempty"`
	// CommitmentKeys are the reveal keys hashed
	CommitmentKeys []string `protobuf:"bytes,7,rep,name=commitmentKeys,proto3" json:"commitmentKeys,omitempty"`
	// EncryptionPrivateKeys are the keys required to decrypt the votes
	EncryptionPrivateKeys []string `protobuf:"bytes,8,rep,name=encryptionPrivateKeys,proto3" json:"encryptionPrivateKeys,omitempty"`
	// EncryptionPublicKeys are the keys required to encrypt the votes
	EncryptionPublicKeys []string `protobuf:"bytes,9,rep,name=encryptionPublicKeys,proto3" json:"encryptionPublicKeys,omitempty"`
	// RevealKeys are the seed of the CommitmentKeys
	RevealKeys      []string            `protobuf:"bytes,10,rep,name=revealKeys,proto3" json:"revealKeys,omitempty"`
	KeyIndex        *uint32             `protobuf:"varint,11,opt,name=keyIndex,proto3,oneof" json:"keyIndex,omitempty"`
	Status          uint32              `protobuf:"varint,12,opt,name=status,proto3" json:"status,omitempty"`
	ParamsSignature []byte              `protobuf:"bytes,13,opt,name=paramsSignature,proto3,oneof" json:"paramsSignature,omitempty"`
	Namespace       uint32              `protobuf:"varint,14,opt,name=namespace,proto3" json:"namespace,omitempty"`
	EnvelopeType    uint32              `protobuf:"varint,15,opt,name=envelopeType,proto3" json:"envelopeType,omitempty"`
	Mode            uint32              `protobuf:"varint,16,opt,name=mode,proto3" json:"mode,omitempty"`
	QuestionIndex   *uint32             `protobuf:"varint,17,opt,name=questionIndex,proto3,oneof" json:"questionIndex,omitempty"`
	QuestionCount   *uint32             `protobuf:"varint,18,opt,name=questionCount,proto3,oneof" json:"questionCount,omitempty"`
	VoteOptions     *ProcessVoteOptions `protobuf:"bytes,19,opt,name=voteOptions,proto3" json:"voteOptions,omitempty"`
	ProcessType     string              `protobuf:"bytes,20,opt,name=ProcessType,proto3" json:"ProcessType,omitempty"` // legacy
}

func (x *Process) Reset() {
	*x = Process{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vochain_vochain_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Process) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Process) ProtoMessage() {}

func (x *Process) ProtoReflect() protoreflect.Message {
	mi := &file_vochain_vochain_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Process.ProtoReflect.Descriptor instead.
func (*Process) Descriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{5}
}

func (x *Process) GetProcessId() []byte {
	if x != nil {
		return x.ProcessId
	}
	return nil
}

func (x *Process) GetEntityId() []byte {
	if x != nil {
		return x.EntityId
	}
	return nil
}

func (x *Process) GetStartBlock() uint64 {
	if x != nil {
		return x.StartBlock
	}
	return 0
}

func (x *Process) GetBlockCount() uint64 {
	if x != nil {
		return x.BlockCount
	}
	return 0
}

func (x *Process) GetCensusMkRoot() []byte {
	if x != nil {
		return x.CensusMkRoot
	}
	return nil
}

func (x *Process) GetCensusMkURI() string {
	if x != nil && x.CensusMkURI != nil {
		return *x.CensusMkURI
	}
	return ""
}

func (x *Process) GetCommitmentKeys() []string {
	if x != nil {
		return x.CommitmentKeys
	}
	return nil
}

func (x *Process) GetEncryptionPrivateKeys() []string {
	if x != nil {
		return x.EncryptionPrivateKeys
	}
	return nil
}

func (x *Process) GetEncryptionPublicKeys() []string {
	if x != nil {
		return x.EncryptionPublicKeys
	}
	return nil
}

func (x *Process) GetRevealKeys() []string {
	if x != nil {
		return x.RevealKeys
	}
	return nil
}

func (x *Process) GetKeyIndex() uint32 {
	if x != nil && x.KeyIndex != nil {
		return *x.KeyIndex
	}
	return 0
}

func (x *Process) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Process) GetParamsSignature() []byte {
	if x != nil {
		return x.ParamsSignature
	}
	return nil
}

func (x *Process) GetNamespace() uint32 {
	if x != nil {
		return x.Namespace
	}
	return 0
}

func (x *Process) GetEnvelopeType() uint32 {
	if x != nil {
		return x.EnvelopeType
	}
	return 0
}

func (x *Process) GetMode() uint32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *Process) GetQuestionIndex() uint32 {
	if x != nil && x.QuestionIndex != nil {
		return *x.QuestionIndex
	}
	return 0
}

func (x *Process) GetQuestionCount() uint32 {
	if x != nil && x.QuestionCount != nil {
		return *x.QuestionCount
	}
	return 0
}

func (x *Process) GetVoteOptions() *ProcessVoteOptions {
	if x != nil {
		return x.VoteOptions
	}
	return nil
}

func (x *Process) GetProcessType() string {
	if x != nil {
		return x.ProcessType
	}
	return ""
}

type ProcessVoteOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxQuestions      uint32 `protobuf:"varint,1,opt,name=maxQuestions,proto3" json:"maxQuestions,omitempty"`
	MaxCount          uint32 `protobuf:"varint,2,opt,name=maxCount,proto3" json:"maxCount,omitempty"`
	MaxValue          uint32 `protobuf:"varint,3,opt,name=maxValue,proto3" json:"maxValue,omitempty"`
	MaxVoteOverwrites uint32 `protobuf:"varint,4,opt,name=maxVoteOverwrites,proto3" json:"maxVoteOverwrites,omitempty"`
	MaxTotalCost      uint32 `protobuf:"varint,5,opt,name=maxTotalCost,proto3" json:"maxTotalCost,omitempty"`
	CostExponent      uint32 `protobuf:"varint,6,opt,name=costExponent,proto3" json:"costExponent,omitempty"`
}

func (x *ProcessVoteOptions) Reset() {
	*x = ProcessVoteOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vochain_vochain_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessVoteOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessVoteOptions) ProtoMessage() {}

func (x *ProcessVoteOptions) ProtoReflect() protoreflect.Message {
	mi := &file_vochain_vochain_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessVoteOptions.ProtoReflect.Descriptor instead.
func (*ProcessVoteOptions) Descriptor() ([]byte, []int) {
	return file_vochain_vochain_proto_rawDescGZIP(), []int{6}
}

func (x *ProcessVoteOptions) GetMaxQuestions() uint32 {
	if x != nil {
		return x.MaxQuestions
	}
	return 0
}

func (x *ProcessVoteOptions) GetMaxCount() uint32 {
	if x != nil {
		return x.MaxCount
	}
	return 0
}

func (x *ProcessVoteOptions) GetMaxValue() uint32 {
	if x != nil {
		return x.MaxValue
	}
	return 0
}

func (x *ProcessVoteOptions) GetMaxVoteOverwrites() uint32 {
	if x != nil {
		return x.MaxVoteOverwrites
	}
	return 0
}

func (x *ProcessVoteOptions) GetMaxTotalCost() uint32 {
	if x != nil {
		return x.MaxTotalCost
	}
	return 0
}

func (x *ProcessVoteOptions) GetCostExponent() uint32 {
	if x != nil {
		return x.CostExponent
	}
	return 0
}

var File_vochain_vochain_proto protoreflect.FileDescriptor

var file_vochain_vochain_proto_rawDesc = []byte{
	0x0a, 0x15, 0x76, 0x6f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x76, 0x6f, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,
	0x76, 0x6f, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe9, 0x02, 0x0a, 0x02, 0x54,
	0x78, 0x12, 0x32, 0x0a, 0x04, 0x76, 0x6f, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x6f, 0x74, 0x65, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x48, 0x00, 0x52,
	0x04, 0x76, 0x6f, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x0a, 0x6e, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x76, 0x6f, 0x74,
	0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x77, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x78, 0x48, 0x00, 0x52, 0x0a, 0x6e, 0x65, 0x77, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x47, 0x0a, 0x0d, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64,
	0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x78, 0x48, 0x00, 0x52,
	0x0d, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x2f,
	0x0a, 0x05, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x54, 0x78, 0x48, 0x00, 0x52, 0x05, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x12,
	0x3e, 0x0a, 0x0a, 0x73, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54,
	0x78, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x21, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x48, 0x01, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x88,
	0x01, 0x01, 0x42, 0x04, 0x0a, 0x02, 0x74, 0x78, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x0c, 0x4e, 0x65, 0x77, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x78, 0x12, 0x2e, 0x0a, 0x06, 0x74, 0x78, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x78, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x06, 0x74, 0x78, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x31, 0x0a,
	0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x22, 0xc8, 0x02, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54,
	0x78, 0x12, 0x2e, 0x0a, 0x06, 0x74, 0x78, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x78, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x74, 0x78, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x49, 0x44, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x0d, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a,
	0x0c, 0x63, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x4d, 0x6b, 0x52, 0x6f, 0x6f, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x02, 0x52, 0x0c, 0x63, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x4d, 0x6b, 0x52,
	0x6f, 0x6f, 0x74, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x63, 0x65, 0x6e, 0x73, 0x75, 0x73,
	0x4d, 0x6b, 0x55, 0x52, 0x49, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0b, 0x63,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x4d, 0x6b, 0x55, 0x52, 0x49, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x4d, 0x6b, 0x52, 0x6f, 0x6f, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x63, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x4d, 0x6b, 0x55, 0x52, 0x49, 0x22, 0x75, 0x0a, 0x0f, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x78, 0x12, 0x2e,
	0x0a, 0x06, 0x74, 0x78, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x78, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x74, 0x78, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x22, 0xab, 0x04, 0x0a, 0x07, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x54, 0x78, 0x12, 0x2e,
	0x0a, 0x06, 0x74, 0x78, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x64, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x78, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x74, 0x78, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x48, 0x01, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x14, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x02, 0x52, 0x14, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12,
	0x35, 0x0a, 0x13, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x03, 0x52, 0x13,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x04, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x48, 0x05, 0x52, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x06, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x72, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x4b,
	0x65, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x07, 0x52, 0x09, 0x72, 0x65, 0x76, 0x65,
	0x61, 0x6c, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x42, 0x17, 0x0a, 0x15,
	0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x4b, 0x65, 0x79, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x6b, 0x65, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x4b, 0x65, 0x79,
	0x22, 0xd1, 0x06, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x65, 0x6e, 0x73, 0x75, 0x73,
	0x4d, 0x6b, 0x52, 0x6f, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x63, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x4d, 0x6b, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x25, 0x0a, 0x0b, 0x63, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x4d, 0x6b, 0x55, 0x52, 0x49, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0b, 0x63, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x4d, 0x6b, 0x55, 0x52, 0x49, 0x88, 0x01,
	0x01, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4b,
	0x65, 0x79, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65,
	0x79, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x12,
	0x32, 0x0a, 0x14, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x4b, 0x65, 0x79,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x4b,
	0x65, 0x79, 0x73, 0x12, 0x1f, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2d, 0x0a, 0x0f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x02, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x6e, 0x76,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6d, 0x6f, 0x64,
	0x65, 0x12, 0x29, 0x0a, 0x0d, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x03, 0x52, 0x0d, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x04, 0x52, 0x0d, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x0b, 0x76, 0x6f, 0x74, 0x65, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64,
	0x76, 0x6f, 0x74, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x56, 0x6f, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x0b, 0x76, 0x6f, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x20, 0x0a,
	0x0b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x4d, 0x6b, 0x55, 0x52, 0x49, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x6b, 0x65, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0xe6, 0x01, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x56, 0x6f, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x6d,
	0x61, 0x78, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d,
	0x61, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d,
	0x61, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x56, 0x6f,
	0x74, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x56, 0x6f, 0x74, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x61, 0x78,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x73,
	0x74, 0x45, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x63, 0x6f, 0x73, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2a, 0x85, 0x02,
	0x0a, 0x06, 0x54, 0x78, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x45, 0x57, 0x5f, 0x50, 0x52, 0x4f,
	0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c,
	0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x45,
	0x54, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53,
	0x53, 0x5f, 0x43, 0x45, 0x4e, 0x53, 0x55, 0x53, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x45,
	0x54, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x44,
	0x44, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x4b, 0x45, 0x59, 0x53, 0x10, 0x06,
	0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x56, 0x45, 0x41, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45,
	0x53, 0x53, 0x5f, 0x4b, 0x45, 0x59, 0x53, 0x10, 0x07, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x44, 0x44,
	0x5f, 0x4f, 0x52, 0x41, 0x43, 0x4c, 0x45, 0x10, 0x08, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x45, 0x4d,
	0x4f, 0x56, 0x45, 0x5f, 0x4f, 0x52, 0x41, 0x43, 0x4c, 0x45, 0x10, 0x09, 0x12, 0x11, 0x0a, 0x0d,
	0x41, 0x44, 0x44, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x0a, 0x12,
	0x14, 0x0a, 0x10, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41,
	0x54, 0x4f, 0x52, 0x10, 0x0b, 0x42, 0x41, 0x5a, 0x3f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x6f, 0x63, 0x64, 0x6f, 0x6e, 0x69, 0x2f, 0x64, 0x76, 0x6f, 0x74,
	0x65, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x67, 0x6f, 0x2d, 0x76, 0x6f,
	0x63, 0x64, 0x6f, 0x6e, 0x69, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x3b, 0x76, 0x6f, 0x63, 0x64,
	0x6f, 0x6e, 0x69, 0x74, 0x79, 0x70, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_vochain_vochain_proto_rawDescOnce sync.Once
	file_vochain_vochain_proto_rawDescData = file_vochain_vochain_proto_rawDesc
)

func file_vochain_vochain_proto_rawDescGZIP() []byte {
	file_vochain_vochain_proto_rawDescOnce.Do(func() {
		file_vochain_vochain_proto_rawDescData = protoimpl.X.CompressGZIP(file_vochain_vochain_proto_rawDescData)
	})
	return file_vochain_vochain_proto_rawDescData
}

var file_vochain_vochain_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_vochain_vochain_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_vochain_vochain_proto_goTypes = []interface{}{
	(TxType)(0),                // 0: dvote.types.v1.TxType
	(*Tx)(nil),                 // 1: dvote.types.v1.Tx
	(*NewProcessTx)(nil),       // 2: dvote.types.v1.NewProcessTx
	(*SetProcessTx)(nil),       // 3: dvote.types.v1.SetProcessTx
	(*CancelProcessTx)(nil),    // 4: dvote.types.v1.CancelProcessTx
	(*AdminTx)(nil),            // 5: dvote.types.v1.AdminTx
	(*Process)(nil),            // 6: dvote.types.v1.Process
	(*ProcessVoteOptions)(nil), // 7: dvote.types.v1.ProcessVoteOptions
	(*VoteEnvelope)(nil),       // 8: dvote.types.v1.VoteEnvelope
}
var file_vochain_vochain_proto_depIdxs = []int32{
	8,  // 0: dvote.types.v1.Tx.vote:type_name -> dvote.types.v1.VoteEnvelope
	2,  // 1: dvote.types.v1.Tx.newProcess:type_name -> dvote.types.v1.NewProcessTx
	4,  // 2: dvote.types.v1.Tx.cancelProcess:type_name -> dvote.types.v1.CancelProcessTx
	5,  // 3: dvote.types.v1.Tx.admin:type_name -> dvote.types.v1.AdminTx
	3,  // 4: dvote.types.v1.Tx.setProcess:type_name -> dvote.types.v1.SetProcessTx
	0,  // 5: dvote.types.v1.NewProcessTx.txtype:type_name -> dvote.types.v1.TxType
	6,  // 6: dvote.types.v1.NewProcessTx.process:type_name -> dvote.types.v1.Process
	0,  // 7: dvote.types.v1.SetProcessTx.txtype:type_name -> dvote.types.v1.TxType
	0,  // 8: dvote.types.v1.CancelProcessTx.txtype:type_name -> dvote.types.v1.TxType
	0,  // 9: dvote.types.v1.AdminTx.txtype:type_name -> dvote.types.v1.TxType
	7,  // 10: dvote.types.v1.Process.voteOptions:type_name -> dvote.types.v1.ProcessVoteOptions
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_vochain_vochain_proto_init() }
func file_vochain_vochain_proto_init() {
	if File_vochain_vochain_proto != nil {
		return
	}
	file_common_vote_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_vochain_vochain_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vochain_vochain_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewProcessTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vochain_vochain_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetProcessTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vochain_vochain_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelProcessTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vochain_vochain_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vochain_vochain_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Process); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vochain_vochain_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessVoteOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_vochain_vochain_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Tx_Vote)(nil),
		(*Tx_NewProcess)(nil),
		(*Tx_CancelProcess)(nil),
		(*Tx_Admin)(nil),
		(*Tx_SetProcess)(nil),
	}
	file_vochain_vochain_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_vochain_vochain_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_vochain_vochain_proto_msgTypes[5].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_vochain_vochain_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_vochain_vochain_proto_goTypes,
		DependencyIndexes: file_vochain_vochain_proto_depIdxs,
		EnumInfos:         file_vochain_vochain_proto_enumTypes,
		MessageInfos:      file_vochain_vochain_proto_msgTypes,
	}.Build()
	File_vochain_vochain_proto = out.File
	file_vochain_vochain_proto_rawDesc = nil
	file_vochain_vochain_proto_goTypes = nil
	file_vochain_vochain_proto_depIdxs = nil
}
